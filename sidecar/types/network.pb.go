// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sidecar/network.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ShareKeygenRequest
type ShareKeygenRequest struct {
	// Traffic whats stand for
	NewKeyUid string `protobuf:"bytes,1,opt,name=new_key_uid,json=newKeyUid,proto3" json:"new_key_uid,omitempty"`
	// Traffic variable
	Traffic *TrafficIn `protobuf:"bytes,2,opt,name=traffic,proto3" json:"traffic,omitempty"`
}

func (m *ShareKeygenRequest) Reset()         { *m = ShareKeygenRequest{} }
func (m *ShareKeygenRequest) String() string { return proto.CompactTextString(m) }
func (*ShareKeygenRequest) ProtoMessage()    {}
func (*ShareKeygenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6a0c436f3950ae1, []int{0}
}
func (m *ShareKeygenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareKeygenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareKeygenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareKeygenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareKeygenRequest.Merge(m, src)
}
func (m *ShareKeygenRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShareKeygenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareKeygenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShareKeygenRequest proto.InternalMessageInfo

func (m *ShareKeygenRequest) GetNewKeyUid() string {
	if m != nil {
		return m.NewKeyUid
	}
	return ""
}

func (m *ShareKeygenRequest) GetTraffic() *TrafficIn {
	if m != nil {
		return m.Traffic
	}
	return nil
}

// ShareKeygenResponse
type ShareKeygenResponse struct {
}

func (m *ShareKeygenResponse) Reset()         { *m = ShareKeygenResponse{} }
func (m *ShareKeygenResponse) String() string { return proto.CompactTextString(m) }
func (*ShareKeygenResponse) ProtoMessage()    {}
func (*ShareKeygenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6a0c436f3950ae1, []int{1}
}
func (m *ShareKeygenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareKeygenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareKeygenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareKeygenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareKeygenResponse.Merge(m, src)
}
func (m *ShareKeygenResponse) XXX_Size() int {
	return m.Size()
}
func (m *ShareKeygenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareKeygenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShareKeygenResponse proto.InternalMessageInfo

// ShareSignRequest
type ShareSignRequest struct {
	// Traffic whats stand for
	NewSigUid string `protobuf:"bytes,1,opt,name=new_sig_uid,json=newSigUid,proto3" json:"new_sig_uid,omitempty"`
	// Traffic variable
	Traffic *TrafficIn `protobuf:"bytes,2,opt,name=traffic,proto3" json:"traffic,omitempty"`
}

func (m *ShareSignRequest) Reset()         { *m = ShareSignRequest{} }
func (m *ShareSignRequest) String() string { return proto.CompactTextString(m) }
func (*ShareSignRequest) ProtoMessage()    {}
func (*ShareSignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6a0c436f3950ae1, []int{2}
}
func (m *ShareSignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareSignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareSignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareSignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareSignRequest.Merge(m, src)
}
func (m *ShareSignRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShareSignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareSignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShareSignRequest proto.InternalMessageInfo

func (m *ShareSignRequest) GetNewSigUid() string {
	if m != nil {
		return m.NewSigUid
	}
	return ""
}

func (m *ShareSignRequest) GetTraffic() *TrafficIn {
	if m != nil {
		return m.Traffic
	}
	return nil
}

// Share
type ShareSignResponse struct {
}

func (m *ShareSignResponse) Reset()         { *m = ShareSignResponse{} }
func (m *ShareSignResponse) String() string { return proto.CompactTextString(m) }
func (*ShareSignResponse) ProtoMessage()    {}
func (*ShareSignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6a0c436f3950ae1, []int{3}
}
func (m *ShareSignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareSignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareSignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareSignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareSignResponse.Merge(m, src)
}
func (m *ShareSignResponse) XXX_Size() int {
	return m.Size()
}
func (m *ShareSignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareSignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShareSignResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ShareKeygenRequest)(nil), "tofnd.ShareKeygenRequest")
	proto.RegisterType((*ShareKeygenResponse)(nil), "tofnd.ShareKeygenResponse")
	proto.RegisterType((*ShareSignRequest)(nil), "tofnd.ShareSignRequest")
	proto.RegisterType((*ShareSignResponse)(nil), "tofnd.ShareSignResponse")
}

func init() { proto.RegisterFile("sidecar/network.proto", fileDescriptor_f6a0c436f3950ae1) }

var fileDescriptor_f6a0c436f3950ae1 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x3b, 0x17, 0xae, 0xa5, 0xd3, 0x4d, 0x9d, 0x5a, 0xac, 0x59, 0x0c, 0xa5, 0xab, 0x22,
	0x9a, 0x40, 0x7d, 0x03, 0x41, 0x41, 0xba, 0x6b, 0x74, 0xe3, 0xc2, 0x9a, 0x26, 0xa7, 0xd3, 0xa1,
	0x64, 0x26, 0xce, 0x4c, 0x08, 0x79, 0x0b, 0x5f, 0xc0, 0xf7, 0x71, 0xd9, 0xa5, 0x4b, 0x49, 0x5e,
	0x44, 0xc8, 0x34, 0x90, 0xb6, 0x6e, 0xdc, 0xfe, 0xff, 0xe1, 0xfb, 0x38, 0xe7, 0xe0, 0x81, 0xe6,
	0x11, 0x84, 0x81, 0xf2, 0x04, 0x98, 0x4c, 0xaa, 0x8d, 0x9b, 0x28, 0x69, 0x24, 0xf9, 0x6f, 0xe4,
	0x4a, 0x44, 0xce, 0x59, 0xdd, 0x86, 0x32, 0x8e, 0xa5, 0xb0, 0xa5, 0x43, 0xea, 0x94, 0xa9, 0x24,
	0xb4, 0xd9, 0xf8, 0x15, 0x13, 0x7f, 0x1d, 0x28, 0x98, 0x41, 0xce, 0x40, 0xcc, 0xe1, 0x2d, 0x05,
	0x6d, 0x08, 0xc5, 0x5d, 0x01, 0xd9, 0x62, 0x03, 0xf9, 0x22, 0xe5, 0xd1, 0x10, 0x8d, 0xd0, 0xa4,
	0x33, 0xef, 0x08, 0xc8, 0x66, 0x90, 0x3f, 0xf1, 0x88, 0x5c, 0xe2, 0xb6, 0x51, 0xc1, 0x6a, 0xc5,
	0xc3, 0xe1, 0xbf, 0x11, 0x9a, 0x74, 0xa7, 0x3d, 0xb7, 0x12, 0xbb, 0x8f, 0x36, 0x7d, 0x10, 0xf3,
	0x7a, 0x60, 0x3c, 0xc0, 0xfd, 0x3d, 0x83, 0x4e, 0xa4, 0xd0, 0x30, 0x7e, 0xc1, 0xbd, 0x2a, 0xf6,
	0x39, 0x3b, 0xd4, 0x6a, 0xce, 0x0e, 0xb4, 0x3e, 0x67, 0x7f, 0xd5, 0xf6, 0xf1, 0x69, 0x83, 0x6f,
	0xa5, 0xd3, 0x0f, 0x84, 0xdb, 0xbe, 0x3d, 0x02, 0x99, 0xed, 0x6d, 0xbe, 0x23, 0x90, 0x8b, 0x1d,
	0xf1, 0xf8, 0x28, 0x8e, 0xf3, 0x5b, 0x65, 0xc1, 0xe4, 0xae, 0xb1, 0x4d, 0x8d, 0x3a, 0x6f, 0xce,
	0x37, 0xd6, 0x74, 0x86, 0xc7, 0x85, 0xc5, 0xdc, 0xde, 0x7f, 0x16, 0x14, 0x6d, 0x0b, 0x8a, 0xbe,
	0x0b, 0x8a, 0xde, 0x4b, 0xda, 0xda, 0x96, 0xb4, 0xf5, 0x55, 0xd2, 0xd6, 0xf3, 0x15, 0xe3, 0x66,
	0x9d, 0x2e, 0xdd, 0x50, 0xc6, 0x5e, 0x1c, 0x88, 0xfc, 0xda, 0xac, 0xb9, 0x60, 0xda, 0x8b, 0xb9,
	0x91, 0x9a, 0x6b, 0xaf, 0x7e, 0xad, 0xc9, 0x13, 0xd0, 0xcb, 0x93, 0xea, 0xb9, 0x37, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xb8, 0x04, 0x16, 0x2f, 0x26, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SidecarClient is the client API for Sidecar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SidecarClient interface {
	// Share KeygenTraffic
	ShareKeygenTraffic(ctx context.Context, in *ShareKeygenRequest, opts ...grpc.CallOption) (*ShareKeygenResponse, error)
	// Share SignTraffic
	ShareSignTraffic(ctx context.Context, in *ShareSignRequest, opts ...grpc.CallOption) (*ShareSignResponse, error)
}

type sidecarClient struct {
	cc grpc1.ClientConn
}

func NewSidecarClient(cc grpc1.ClientConn) SidecarClient {
	return &sidecarClient{cc}
}

func (c *sidecarClient) ShareKeygenTraffic(ctx context.Context, in *ShareKeygenRequest, opts ...grpc.CallOption) (*ShareKeygenResponse, error) {
	out := new(ShareKeygenResponse)
	err := c.cc.Invoke(ctx, "/tofnd.Sidecar/ShareKeygenTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) ShareSignTraffic(ctx context.Context, in *ShareSignRequest, opts ...grpc.CallOption) (*ShareSignResponse, error) {
	out := new(ShareSignResponse)
	err := c.cc.Invoke(ctx, "/tofnd.Sidecar/ShareSignTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SidecarServer is the server API for Sidecar service.
type SidecarServer interface {
	// Share KeygenTraffic
	ShareKeygenTraffic(context.Context, *ShareKeygenRequest) (*ShareKeygenResponse, error)
	// Share SignTraffic
	ShareSignTraffic(context.Context, *ShareSignRequest) (*ShareSignResponse, error)
}

// UnimplementedSidecarServer can be embedded to have forward compatible implementations.
type UnimplementedSidecarServer struct {
}

func (*UnimplementedSidecarServer) ShareKeygenTraffic(ctx context.Context, req *ShareKeygenRequest) (*ShareKeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareKeygenTraffic not implemented")
}
func (*UnimplementedSidecarServer) ShareSignTraffic(ctx context.Context, req *ShareSignRequest) (*ShareSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareSignTraffic not implemented")
}

func RegisterSidecarServer(s grpc1.Server, srv SidecarServer) {
	s.RegisterService(&_Sidecar_serviceDesc, srv)
}

func _Sidecar_ShareKeygenTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareKeygenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).ShareKeygenTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tofnd.Sidecar/ShareKeygenTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).ShareKeygenTraffic(ctx, req.(*ShareKeygenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_ShareSignTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).ShareSignTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tofnd.Sidecar/ShareSignTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).ShareSignTraffic(ctx, req.(*ShareSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sidecar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tofnd.Sidecar",
	HandlerType: (*SidecarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShareKeygenTraffic",
			Handler:    _Sidecar_ShareKeygenTraffic_Handler,
		},
		{
			MethodName: "ShareSignTraffic",
			Handler:    _Sidecar_ShareSignTraffic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sidecar/network.proto",
}

func (m *ShareKeygenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareKeygenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareKeygenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Traffic != nil {
		{
			size, err := m.Traffic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NewKeyUid) > 0 {
		i -= len(m.NewKeyUid)
		copy(dAtA[i:], m.NewKeyUid)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.NewKeyUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShareKeygenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareKeygenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareKeygenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ShareSignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareSignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareSignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Traffic != nil {
		{
			size, err := m.Traffic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NewSigUid) > 0 {
		i -= len(m.NewSigUid)
		copy(dAtA[i:], m.NewSigUid)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.NewSigUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShareSignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareSignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareSignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ShareKeygenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewKeyUid)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Traffic != nil {
		l = m.Traffic.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *ShareKeygenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ShareSignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewSigUid)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Traffic != nil {
		l = m.Traffic.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *ShareSignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShareKeygenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareKeygenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareKeygenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewKeyUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewKeyUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traffic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Traffic == nil {
				m.Traffic = &TrafficIn{}
			}
			if err := m.Traffic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareKeygenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareKeygenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareKeygenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareSignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareSignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareSignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSigUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewSigUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traffic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Traffic == nil {
				m.Traffic = &TrafficIn{}
			}
			if err := m.Traffic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareSignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareSignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareSignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetwork = fmt.Errorf("proto: unexpected end of group")
)
