// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/event/v1beta1/types.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OutgoingEvent Message
type OutgoingEvent struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Result []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *OutgoingEvent) Reset()         { *m = OutgoingEvent{} }
func (m *OutgoingEvent) String() string { return proto.CompactTextString(m) }
func (*OutgoingEvent) ProtoMessage()    {}
func (*OutgoingEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da7b393ff87e406, []int{0}
}
func (m *OutgoingEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingEvent.Merge(m, src)
}
func (m *OutgoingEvent) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingEvent.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingEvent proto.InternalMessageInfo

func (m *OutgoingEvent) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *OutgoingEvent) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

// IncomingEvent Message
type IncomingEvent struct {
	DestChain string        `protobuf:"bytes,1,opt,name=dest_chain,json=destChain,proto3" json:"dest_chain,omitempty"`
	DestAddr  []byte        `protobuf:"bytes,2,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	OpId      uint32        `protobuf:"varint,3,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
	OpArgs    [][]byte      `protobuf:"bytes,4,rep,name=op_args,json=opArgs,proto3" json:"op_args,omitempty"`
	Funds     []*types.Coin `protobuf:"bytes,5,rep,name=funds,proto3" json:"funds,omitempty"`
}

func (m *IncomingEvent) Reset()         { *m = IncomingEvent{} }
func (m *IncomingEvent) String() string { return proto.CompactTextString(m) }
func (*IncomingEvent) ProtoMessage()    {}
func (*IncomingEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da7b393ff87e406, []int{1}
}
func (m *IncomingEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncomingEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncomingEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncomingEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncomingEvent.Merge(m, src)
}
func (m *IncomingEvent) XXX_Size() int {
	return m.Size()
}
func (m *IncomingEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_IncomingEvent.DiscardUnknown(m)
}

var xxx_messageInfo_IncomingEvent proto.InternalMessageInfo

func (m *IncomingEvent) GetDestChain() string {
	if m != nil {
		return m.DestChain
	}
	return ""
}

func (m *IncomingEvent) GetDestAddr() []byte {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *IncomingEvent) GetOpId() uint32 {
	if m != nil {
		return m.OpId
	}
	return 0
}

func (m *IncomingEvent) GetOpArgs() [][]byte {
	if m != nil {
		return m.OpArgs
	}
	return nil
}

func (m *IncomingEvent) GetFunds() []*types.Coin {
	if m != nil {
		return m.Funds
	}
	return nil
}

// Event Message
type Event struct {
	// Chain identifier
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// Transaction hash
	TxHash []byte `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Event Index
	EventIdx uint32 `protobuf:"varint,3,opt,name=evt_index,json=evtIndex,proto3" json:"evt_index,omitempty"`
	// Actual event payload
	//
	// Types that are valid to be assigned to Event:
	//
	//	*Event_Incoming
	//	*Event_Outgoing
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da7b393ff87e406, []int{2}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Event interface {
	isEvent_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_Incoming struct {
	Incoming *IncomingEvent `protobuf:"bytes,4,opt,name=incoming,proto3,oneof" json:"incoming,omitempty"`
}
type Event_Outgoing struct {
	Outgoing *OutgoingEvent `protobuf:"bytes,5,opt,name=outgoing,proto3,oneof" json:"outgoing,omitempty"`
}

func (*Event_Incoming) isEvent_Event() {}
func (*Event_Outgoing) isEvent_Event() {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Event) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Event) GetEventIdx() uint32 {
	if m != nil {
		return m.EventIdx
	}
	return 0
}

func (m *Event) GetIncoming() *IncomingEvent {
	if x, ok := m.GetEvent().(*Event_Incoming); ok {
		return x.Incoming
	}
	return nil
}

func (m *Event) GetOutgoing() *OutgoingEvent {
	if x, ok := m.GetEvent().(*Event_Outgoing); ok {
		return x.Outgoing
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_Incoming)(nil),
		(*Event_Outgoing)(nil),
	}
}

func init() {
	proto.RegisterType((*OutgoingEvent)(nil), "manythings.mitosis.v1beta1.event.OutgoingEvent")
	proto.RegisterType((*IncomingEvent)(nil), "manythings.mitosis.v1beta1.event.IncomingEvent")
	proto.RegisterType((*Event)(nil), "manythings.mitosis.v1beta1.event.Event")
}

func init() { proto.RegisterFile("mitosis/event/v1beta1/types.proto", fileDescriptor_6da7b393ff87e406) }

var fileDescriptor_6da7b393ff87e406 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x8e, 0xd3, 0x3c,
	0x18, 0x6c, 0xda, 0xa6, 0xdb, 0xba, 0xed, 0x7f, 0x88, 0x7e, 0xa1, 0xb0, 0x12, 0x49, 0x28, 0x97,
	0x20, 0x2d, 0xb1, 0x76, 0x39, 0x70, 0xde, 0x2c, 0xa0, 0xed, 0x01, 0x55, 0xb2, 0x38, 0x71, 0xa9,
	0xdc, 0xda, 0x24, 0xd6, 0x12, 0x3b, 0x8a, 0xdd, 0x2a, 0xfb, 0x16, 0xbc, 0x01, 0xaf, 0xc3, 0x71,
	0x8f, 0x9c, 0x22, 0x94, 0xbe, 0x08, 0xb2, 0xe3, 0x56, 0xac, 0x84, 0x04, 0x27, 0x7f, 0xf9, 0x32,
	0x9e, 0xf1, 0x7c, 0x1e, 0x83, 0xe7, 0x05, 0x53, 0x42, 0x32, 0x09, 0xe9, 0x9e, 0x72, 0x05, 0xf7,
	0x97, 0x1b, 0xaa, 0xf0, 0x25, 0x54, 0xf7, 0x25, 0x95, 0x49, 0x59, 0x09, 0x25, 0xbc, 0xa8, 0xc0,
	0xfc, 0x5e, 0xe5, 0x8c, 0x67, 0x32, 0xb1, 0xe8, 0xc4, 0xe2, 0x12, 0xb3, 0xeb, 0x3c, 0xd8, 0x0a,
	0x59, 0x08, 0x09, 0x37, 0x58, 0xd2, 0x13, 0xc5, 0x56, 0x30, 0xde, 0x31, 0x9c, 0xff, 0x9f, 0x89,
	0x4c, 0x98, 0x12, 0xea, 0xca, 0x76, 0x17, 0x7f, 0x96, 0x2e, 0x71, 0x85, 0x0b, 0xab, 0xbd, 0x78,
	0x03, 0xe6, 0xab, 0x9d, 0xca, 0x04, 0xe3, 0xd9, 0x3b, 0x8d, 0xf2, 0xfe, 0x03, 0x7d, 0x71, 0xe7,
	0x3b, 0x91, 0x13, 0x8f, 0x51, 0x5f, 0xdc, 0x79, 0x4f, 0xc0, 0xa8, 0xa2, 0x72, 0xf7, 0x45, 0xf9,
	0xfd, 0xc8, 0x89, 0x67, 0xc8, 0x7e, 0x2d, 0x0e, 0x0e, 0x98, 0x2f, 0xf9, 0x56, 0x14, 0xa7, 0x9d,
	0x17, 0x00, 0x10, 0x2a, 0xd5, 0x7a, 0x9b, 0x63, 0xc6, 0x0d, 0xc3, 0x24, 0x9d, 0xb7, 0x4d, 0x38,
	0x79, 0x4b, 0xa5, 0xba, 0xd1, 0x4d, 0x34, 0x21, 0xc7, 0xd2, 0x83, 0x60, 0x66, 0xd0, 0x98, 0x90,
	0x8a, 0x4a, 0xd9, 0xb1, 0xa7, 0xb3, 0xb6, 0x09, 0xc7, 0x1a, 0x7f, 0x4d, 0x48, 0x85, 0xa6, 0xc4,
	0x56, 0x54, 0x4a, 0xef, 0x19, 0x70, 0x45, 0xb9, 0x66, 0xc4, 0x1f, 0x44, 0x4e, 0x3c, 0x4f, 0xc7,
	0x6d, 0x13, 0x0e, 0x57, 0xe5, 0x92, 0xa0, 0xa1, 0x28, 0x97, 0xc4, 0x7b, 0x01, 0xce, 0x44, 0xb9,
	0xc6, 0x55, 0x26, 0xfd, 0x61, 0x34, 0x88, 0x67, 0x29, 0x68, 0x9b, 0x70, 0xb4, 0x2a, 0xaf, 0xab,
	0x4c, 0xa2, 0x91, 0x30, 0xab, 0x07, 0x81, 0xfb, 0x79, 0xc7, 0x89, 0xf4, 0xdd, 0x68, 0x10, 0x4f,
	0xaf, 0x9e, 0x26, 0xdd, 0x5c, 0x13, 0x3d, 0xd7, 0xd3, 0xc8, 0x6f, 0x04, 0xe3, 0xa8, 0xc3, 0x2d,
	0xbe, 0xf5, 0x81, 0xdb, 0xb9, 0x0b, 0x81, 0xfb, 0xbb, 0xb1, 0x49, 0xdb, 0x84, 0x6e, 0x67, 0xaa,
	0xeb, 0xeb, 0x03, 0xa8, 0x7a, 0x9d, 0x63, 0x99, 0x5b, 0x2f, 0xe6, 0x00, 0x1f, 0xeb, 0x5b, 0x2c,
	0x73, 0x34, 0x52, 0x66, 0xf5, 0x5e, 0x82, 0x09, 0xdd, 0xab, 0x35, 0xe3, 0x84, 0xd6, 0xd6, 0x88,
	0xb1, 0x6c, 0x34, 0x96, 0xa4, 0x46, 0x63, 0xba, 0x57, 0x4b, 0xfd, 0xd7, 0xfb, 0x00, 0xc6, 0xcc,
	0xce, 0xd7, 0x1f, 0x46, 0x4e, 0x3c, 0xbd, 0x82, 0xc9, 0xdf, 0x82, 0x92, 0x3c, 0xba, 0x91, 0xdb,
	0x1e, 0x3a, 0x51, 0x68, 0x3a, 0x61, 0x2f, 0xda, 0x77, 0xff, 0x95, 0xee, 0x51, 0x34, 0x34, 0xdd,
	0x91, 0x22, 0x3d, 0x03, 0xae, 0x81, 0xa4, 0xef, 0xbf, 0xb7, 0x81, 0xf3, 0xd0, 0x06, 0xce, 0xcf,
	0x36, 0x70, 0xbe, 0x1e, 0x82, 0xde, 0xc3, 0x21, 0xe8, 0xfd, 0x38, 0x04, 0xbd, 0x4f, 0x17, 0x19,
	0x53, 0xf9, 0x6e, 0x93, 0x6c, 0x45, 0x01, 0xb5, 0xd2, 0xab, 0x4e, 0x0a, 0x1e, 0x53, 0x59, 0xdb,
	0x5c, 0x9a, 0xa7, 0xb0, 0x19, 0x99, 0x3c, 0xbe, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x28, 0xb2,
	0xd1, 0x79, 0x30, 0x03, 0x00, 0x00,
}

func (m *OutgoingEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncomingEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncomingEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncomingEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funds) > 0 {
		for iNdEx := len(m.Funds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.OpArgs) > 0 {
		for iNdEx := len(m.OpArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OpArgs[iNdEx])
			copy(dAtA[i:], m.OpArgs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.OpArgs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.OpId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OpId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DestAddr) > 0 {
		i -= len(m.DestAddr)
		copy(dAtA[i:], m.DestAddr)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestChain) > 0 {
		i -= len(m.DestChain)
		copy(dAtA[i:], m.DestChain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EventIdx != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EventIdx))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_Incoming) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Incoming) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Incoming != nil {
		{
			size, err := m.Incoming.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Event_Outgoing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Outgoing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Outgoing != nil {
		{
			size, err := m.Outgoing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutgoingEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IncomingEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestChain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.DestAddr)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OpId != 0 {
		n += 1 + sovTypes(uint64(m.OpId))
	}
	if len(m.OpArgs) > 0 {
		for _, b := range m.OpArgs {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Funds) > 0 {
		for _, e := range m.Funds {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EventIdx != 0 {
		n += 1 + sovTypes(uint64(m.EventIdx))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *Event_Incoming) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Incoming != nil {
		l = m.Incoming.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Event_Outgoing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Outgoing != nil {
		l = m.Outgoing.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutgoingEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncomingEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncomingEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncomingEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestAddr = append(m.DestAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.DestAddr == nil {
				m.DestAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			m.OpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpArgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpArgs = append(m.OpArgs, make([]byte, postIndex-iNdEx))
			copy(m.OpArgs[len(m.OpArgs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = append(m.Funds, &types.Coin{})
			if err := m.Funds[len(m.Funds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIdx", wireType)
			}
			m.EventIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incoming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IncomingEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_Incoming{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outgoing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OutgoingEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_Outgoing{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
