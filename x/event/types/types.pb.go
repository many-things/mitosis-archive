// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/event/v1beta1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/many-things/mitosis/pkg/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Poll Status
type Poll_Status int32

const (
	// Unspecified status
	Poll_StatusUnspecified Poll_Status = 0
	// Pending status
	Poll_StatusPending Poll_Status = 1
	// Confirmed status
	Poll_StatusConfirmed Poll_Status = 2
	// Rejected status
	Poll_StatusRejected Poll_Status = 3
)

var Poll_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_PENDING",
	2: "STATUS_CONFIRMED",
	3: "STATUS_REJECTED",
}

var Poll_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_PENDING":     1,
	"STATUS_CONFIRMED":   2,
	"STATUS_REJECTED":    3,
}

func (x Poll_Status) String() string {
	return proto.EnumName(Poll_Status_name, int32(x))
}

func (Poll_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6da7b393ff87e406, []int{4, 0}
}

// TxReqEvent Message
type TxReqEvent struct {
	DestChain string        `protobuf:"bytes,1,opt,name=dest_chain,json=destChain,proto3" json:"dest_chain,omitempty"`
	DestAddr  []byte        `protobuf:"bytes,2,opt,name=dest_addr,json=destAddr,proto3" json:"dest_addr,omitempty"`
	OpId      uint32        `protobuf:"varint,3,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
	OpArgs    [][]byte      `protobuf:"bytes,4,rep,name=op_args,json=opArgs,proto3" json:"op_args,omitempty"`
	Funds     []*types.Coin `protobuf:"bytes,5,rep,name=funds,proto3" json:"funds,omitempty"`
}

func (m *TxReqEvent) Reset()         { *m = TxReqEvent{} }
func (m *TxReqEvent) String() string { return proto.CompactTextString(m) }
func (*TxReqEvent) ProtoMessage()    {}
func (*TxReqEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da7b393ff87e406, []int{0}
}
func (m *TxReqEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxReqEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxReqEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxReqEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxReqEvent.Merge(m, src)
}
func (m *TxReqEvent) XXX_Size() int {
	return m.Size()
}
func (m *TxReqEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TxReqEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TxReqEvent proto.InternalMessageInfo

func (m *TxReqEvent) GetDestChain() string {
	if m != nil {
		return m.DestChain
	}
	return ""
}

func (m *TxReqEvent) GetDestAddr() []byte {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *TxReqEvent) GetOpId() uint32 {
	if m != nil {
		return m.OpId
	}
	return 0
}

func (m *TxReqEvent) GetOpArgs() [][]byte {
	if m != nil {
		return m.OpArgs
	}
	return nil
}

func (m *TxReqEvent) GetFunds() []*types.Coin {
	if m != nil {
		return m.Funds
	}
	return nil
}

// TxResEvent Message
type TxResEvent struct {
	// Request Event id correspond to given response
	ReqEvtId uint64 `protobuf:"varint,1,opt,name=req_evt_id,json=reqEvtId,proto3" json:"req_evt_id,omitempty"`
	Ok       bool   `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	Result   []byte `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *TxResEvent) Reset()         { *m = TxResEvent{} }
func (m *TxResEvent) String() string { return proto.CompactTextString(m) }
func (*TxResEvent) ProtoMessage()    {}
func (*TxResEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da7b393ff87e406, []int{1}
}
func (m *TxResEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxResEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxResEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxResEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxResEvent.Merge(m, src)
}
func (m *TxResEvent) XXX_Size() int {
	return m.Size()
}
func (m *TxResEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TxResEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TxResEvent proto.InternalMessageInfo

func (m *TxResEvent) GetReqEvtId() uint64 {
	if m != nil {
		return m.ReqEvtId
	}
	return 0
}

func (m *TxResEvent) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *TxResEvent) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

// Event Message
type Event struct {
	// Block height
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// Transaction hash
	TxHash []byte `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Event Index
	EvtIdx uint32 `protobuf:"varint,3,opt,name=evt_idx,json=evtIdx,proto3" json:"evt_idx,omitempty"`
	// Actual event payload
	//
	// Types that are valid to be assigned to Event:
	//
	//	*Event_Req
	//	*Event_Res
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da7b393ff87e406, []int{2}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Event interface {
	isEvent_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_Req struct {
	Req *TxReqEvent `protobuf:"bytes,4,opt,name=req,proto3,oneof" json:"req,omitempty"`
}
type Event_Res struct {
	Res *TxResEvent `protobuf:"bytes,5,opt,name=res,proto3,oneof" json:"res,omitempty"`
}

func (*Event_Req) isEvent_Event() {}
func (*Event_Res) isEvent_Event() {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Event) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Event) GetEvtIdx() uint32 {
	if m != nil {
		return m.EvtIdx
	}
	return 0
}

func (m *Event) GetReq() *TxReqEvent {
	if x, ok := m.GetEvent().(*Event_Req); ok {
		return x.Req
	}
	return nil
}

func (m *Event) GetRes() *TxResEvent {
	if x, ok := m.GetEvent().(*Event_Res); ok {
		return x.Res
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_Req)(nil),
		(*Event_Res)(nil),
	}
}

// Tally Message
type Tally struct {
	TotalPower *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=total_power,json=totalPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_power,omitempty"`
	Confirmed  *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=confirmed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"confirmed,omitempty"`
}

func (m *Tally) Reset()         { *m = Tally{} }
func (m *Tally) String() string { return proto.CompactTextString(m) }
func (*Tally) ProtoMessage()    {}
func (*Tally) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da7b393ff87e406, []int{3}
}
func (m *Tally) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tally) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tally.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tally) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tally.Merge(m, src)
}
func (m *Tally) XXX_Size() int {
	return m.Size()
}
func (m *Tally) XXX_DiscardUnknown() {
	xxx_messageInfo_Tally.DiscardUnknown(m)
}

var xxx_messageInfo_Tally proto.InternalMessageInfo

// Poll Message
type Poll struct {
	// Chain identifier
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// Poll id
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Operation id - will be filled
	OpId uint64 `protobuf:"varint,3,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
	// Poll proposer
	Proposer github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,4,opt,name=proposer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"proposer,omitempty"`
	// Poll status
	Status Poll_Status `protobuf:"varint,5,opt,name=status,proto3,enum=manythings.mitosis.v1beta1.event.Poll_Status" json:"status,omitempty"`
	// Vote tally
	Tally *Tally `protobuf:"bytes,6,opt,name=tally,proto3" json:"tally,omitempty"`
	// Event payload
	Payload *Event `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Poll) Reset()         { *m = Poll{} }
func (m *Poll) String() string { return proto.CompactTextString(m) }
func (*Poll) ProtoMessage()    {}
func (*Poll) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da7b393ff87e406, []int{4}
}
func (m *Poll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Poll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Poll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Poll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Poll.Merge(m, src)
}
func (m *Poll) XXX_Size() int {
	return m.Size()
}
func (m *Poll) XXX_DiscardUnknown() {
	xxx_messageInfo_Poll.DiscardUnknown(m)
}

var xxx_messageInfo_Poll proto.InternalMessageInfo

func (m *Poll) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Poll) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Poll) GetOpId() uint64 {
	if m != nil {
		return m.OpId
	}
	return 0
}

func (m *Poll) GetProposer() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Proposer
	}
	return nil
}

func (m *Poll) GetStatus() Poll_Status {
	if m != nil {
		return m.Status
	}
	return Poll_StatusUnspecified
}

func (m *Poll) GetTally() *Tally {
	if m != nil {
		return m.Tally
	}
	return nil
}

func (m *Poll) GetPayload() *Event {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterEnum("manythings.mitosis.v1beta1.event.Poll_Status", Poll_Status_name, Poll_Status_value)
	proto.RegisterType((*TxReqEvent)(nil), "manythings.mitosis.v1beta1.event.TxReqEvent")
	proto.RegisterType((*TxResEvent)(nil), "manythings.mitosis.v1beta1.event.TxResEvent")
	proto.RegisterType((*Event)(nil), "manythings.mitosis.v1beta1.event.Event")
	proto.RegisterType((*Tally)(nil), "manythings.mitosis.v1beta1.event.Tally")
	proto.RegisterType((*Poll)(nil), "manythings.mitosis.v1beta1.event.Poll")
}

func init() { proto.RegisterFile("mitosis/event/v1beta1/types.proto", fileDescriptor_6da7b393ff87e406) }

var fileDescriptor_6da7b393ff87e406 = []byte{
	// 764 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x6e, 0xe3, 0x44,
	0x1c, 0x8e, 0x13, 0xc7, 0x49, 0xa7, 0xd9, 0x6c, 0x76, 0x76, 0x59, 0x4c, 0x80, 0xac, 0x89, 0x04,
	0x0d, 0x68, 0xe3, 0xa8, 0xe5, 0x8c, 0x44, 0xfe, 0xb8, 0x34, 0xa0, 0x0d, 0xd1, 0x24, 0xe5, 0xc0,
	0xc5, 0x72, 0x33, 0x53, 0xdb, 0xd4, 0xf1, 0xb8, 0x9e, 0x49, 0x49, 0x5e, 0x21, 0x07, 0xc4, 0x0b,
	0x84, 0x87, 0x40, 0xe2, 0x1d, 0x38, 0xf6, 0x88, 0x38, 0x54, 0xa8, 0x7d, 0x0b, 0x4e, 0x68, 0x3c,
	0x13, 0x5a, 0x24, 0xb4, 0x6d, 0x4f, 0xc9, 0xef, 0xe7, 0xef, 0xfb, 0xfd, 0xfb, 0x3e, 0x0d, 0xf8,
	0x68, 0x1e, 0x72, 0xca, 0x42, 0xd6, 0x21, 0x17, 0x24, 0xe6, 0x9d, 0x8b, 0xfd, 0x13, 0xc2, 0xbd,
	0xfd, 0x0e, 0x5f, 0x25, 0x84, 0xd9, 0x49, 0x4a, 0x39, 0x85, 0xd6, 0xdc, 0x8b, 0x57, 0x3c, 0x08,
	0x63, 0x9f, 0xd9, 0x0a, 0x6d, 0x2b, 0x9c, 0x9d, 0xb1, 0xea, 0xef, 0xcd, 0x28, 0x9b, 0x53, 0xe6,
	0x66, 0xf8, 0x8e, 0x0c, 0x24, 0xb9, 0xfe, 0xc2, 0xa7, 0x3e, 0x95, 0x79, 0xf1, 0x4f, 0x65, 0x9b,
	0xdb, 0xae, 0x33, 0x3a, 0x9f, 0xd3, 0xf8, 0xff, 0xda, 0x36, 0x7f, 0xd3, 0x00, 0x98, 0x2e, 0x11,
	0x39, 0x77, 0x44, 0x0f, 0xf8, 0x21, 0x00, 0x98, 0x30, 0xee, 0xce, 0x02, 0x2f, 0x8c, 0x4d, 0xcd,
	0xd2, 0x5a, 0x3b, 0x68, 0x47, 0x64, 0xfa, 0x22, 0x01, 0xdf, 0x07, 0x59, 0xe0, 0x7a, 0x18, 0xa7,
	0x66, 0xde, 0xd2, 0x5a, 0x15, 0x54, 0x16, 0x89, 0x2e, 0xc6, 0x29, 0x7c, 0x0e, 0x8a, 0x34, 0x71,
	0x43, 0x6c, 0x16, 0x2c, 0xad, 0xf5, 0x04, 0xe9, 0x34, 0x19, 0x62, 0xf8, 0x2e, 0x28, 0xd1, 0xc4,
	0xf5, 0x52, 0x9f, 0x99, 0xba, 0x55, 0x68, 0x55, 0x90, 0x41, 0x93, 0x6e, 0xea, 0x33, 0xf8, 0x05,
	0x28, 0x9e, 0x2e, 0x62, 0xcc, 0xcc, 0xa2, 0x55, 0x68, 0xed, 0x1e, 0xec, 0xd9, 0x6f, 0xd9, 0x5f,
	0xce, 0x6f, 0xf7, 0x69, 0x18, 0x23, 0xc9, 0x6a, 0x22, 0x39, 0x36, 0x93, 0x63, 0x7f, 0x00, 0x40,
	0x4a, 0xce, 0x5d, 0x72, 0xc1, 0x45, 0x7f, 0x31, 0xb6, 0x8e, 0xca, 0xa9, 0x58, 0x8a, 0x0f, 0x31,
	0xac, 0x82, 0x3c, 0x3d, 0xcb, 0xc6, 0x2d, 0xa3, 0x3c, 0x3d, 0x83, 0x2f, 0x81, 0x91, 0x12, 0xb6,
	0x88, 0x78, 0x36, 0x69, 0x05, 0xa9, 0xa8, 0x79, 0xa5, 0x81, 0xa2, 0xac, 0xf7, 0x12, 0x18, 0x01,
	0x09, 0xfd, 0x80, 0xab, 0x5a, 0x2a, 0x12, 0xdb, 0xf0, 0xa5, 0x1b, 0x78, 0x2c, 0x50, 0xdb, 0x1b,
	0x7c, 0x79, 0xe4, 0xb1, 0x40, 0x7c, 0x90, 0xcd, 0x97, 0x6a, 0x7b, 0x83, 0x88, 0xd6, 0x4b, 0xf8,
	0x25, 0x28, 0xa4, 0xe4, 0xdc, 0xd4, 0x2d, 0xad, 0xb5, 0x7b, 0xf0, 0xda, 0xbe, 0x4f, 0x64, 0xfb,
	0x56, 0x8b, 0xa3, 0x1c, 0x12, 0x54, 0x59, 0x41, 0x9c, 0xe9, 0x11, 0x15, 0xd8, 0x9d, 0x0a, 0xac,
	0x57, 0x02, 0xc5, 0xec, 0x53, 0xf3, 0x17, 0x0d, 0x14, 0xa7, 0x5e, 0x14, 0xad, 0xe0, 0x37, 0x60,
	0x97, 0x53, 0xee, 0x45, 0x6e, 0x42, 0x7f, 0x24, 0xa9, 0x14, 0xba, 0xf7, 0xd9, 0x9f, 0x57, 0xaf,
	0x3e, 0xf1, 0x43, 0x1e, 0x2c, 0x4e, 0xc4, 0xc9, 0x95, 0xc5, 0xd4, 0x4f, 0x9b, 0xe1, 0x33, 0xe5,
	0x9c, 0x61, 0xcc, 0x11, 0xc8, 0xe8, 0x63, 0xc1, 0x86, 0x47, 0x60, 0x67, 0x46, 0xe3, 0xd3, 0x30,
	0x9d, 0x13, 0x9c, 0xdd, 0xe5, 0x71, 0xa5, 0x6e, 0xc9, 0xcd, 0x9f, 0x74, 0xa0, 0x8f, 0x69, 0x14,
	0xc1, 0x17, 0xa0, 0x78, 0xd7, 0x82, 0x32, 0x10, 0x42, 0x86, 0xb2, 0x83, 0x8e, 0xf2, 0x21, 0xfe,
	0xaf, 0xe3, 0x74, 0xe5, 0xb8, 0x37, 0xa0, 0x9c, 0xa4, 0x34, 0xa1, 0x8c, 0xa4, 0xd9, 0xd9, 0x2b,
	0xbd, 0xfd, 0xbf, 0xaf, 0x5e, 0xb5, 0x1f, 0x30, 0xcc, 0x77, 0x5e, 0x24, 0x8c, 0x4c, 0x18, 0x43,
	0xff, 0x96, 0x80, 0x0e, 0x30, 0x18, 0xf7, 0xf8, 0x42, 0x2a, 0x50, 0x3d, 0x68, 0xdf, 0xaf, 0x80,
	0xd8, 0xc0, 0x9e, 0x64, 0x24, 0xa4, 0xc8, 0xc2, 0xee, 0x5c, 0x5c, 0xde, 0x34, 0x32, 0x1d, 0xf7,
	0x1e, 0xa0, 0xa3, 0x80, 0x23, 0xc9, 0x82, 0x5d, 0x50, 0x4a, 0xbc, 0x55, 0x44, 0x3d, 0x6c, 0x96,
	0x1e, 0x5a, 0x20, 0xf3, 0x00, 0xda, 0xf2, 0x9a, 0xbf, 0x6a, 0xc0, 0x90, 0x43, 0xc1, 0x36, 0x80,
	0x93, 0x69, 0x77, 0x7a, 0x3c, 0x71, 0x8f, 0x47, 0x93, 0xb1, 0xd3, 0x1f, 0x1e, 0x0e, 0x9d, 0x41,
	0x2d, 0x57, 0x7f, 0x67, 0xbd, 0xb1, 0x9e, 0x49, 0xcc, 0x71, 0xcc, 0x12, 0x32, 0x0b, 0x4f, 0x43,
	0x82, 0xe1, 0xc7, 0xa0, 0xaa, 0xe0, 0x63, 0x67, 0x34, 0x18, 0x8e, 0xbe, 0xaa, 0x69, 0xf5, 0x67,
	0xeb, 0x8d, 0xf5, 0x44, 0x42, 0xc7, 0x24, 0xc6, 0x61, 0xec, 0xc3, 0x4f, 0x41, 0x4d, 0xc1, 0xfa,
	0xdf, 0x8e, 0x0e, 0x87, 0xe8, 0x8d, 0x33, 0xa8, 0xe5, 0xeb, 0xcf, 0xd7, 0x1b, 0xeb, 0xa9, 0x04,
	0xf6, 0xb7, 0x3a, 0xc3, 0x3d, 0xf0, 0x54, 0x41, 0x91, 0xf3, 0xb5, 0xd3, 0x9f, 0x3a, 0x83, 0x5a,
	0xa1, 0x0e, 0xd7, 0x1b, 0xab, 0xaa, 0xce, 0x46, 0x7e, 0x20, 0x33, 0x4e, 0x70, 0xef, 0xf0, 0xf7,
	0xeb, 0x86, 0x76, 0x79, 0xdd, 0xd0, 0xfe, 0xba, 0x6e, 0x68, 0x3f, 0xdf, 0x34, 0x72, 0x97, 0x37,
	0x8d, 0xdc, 0x1f, 0x37, 0x8d, 0xdc, 0xf7, 0xaf, 0xef, 0x08, 0x2a, 0x4e, 0xd1, 0x96, 0xb7, 0xe8,
	0x6c, 0xdf, 0xbc, 0xa5, 0x7a, 0x6b, 0x33, 0x69, 0x4f, 0x8c, 0xec, 0xb5, 0xfb, 0xfc, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xdb, 0xbc, 0x4f, 0x60, 0x89, 0x05, 0x00, 0x00,
}

func (m *TxReqEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxReqEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxReqEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funds) > 0 {
		for iNdEx := len(m.Funds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.OpArgs) > 0 {
		for iNdEx := len(m.OpArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OpArgs[iNdEx])
			copy(dAtA[i:], m.OpArgs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.OpArgs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.OpId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OpId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DestAddr) > 0 {
		i -= len(m.DestAddr)
		copy(dAtA[i:], m.DestAddr)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestChain) > 0 {
		i -= len(m.DestChain)
		copy(dAtA[i:], m.DestChain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxResEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxResEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxResEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ReqEvtId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ReqEvtId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EvtIdx != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EvtIdx))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Event_Req) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Req) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Event_Res) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Res) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Tally) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tally) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tally) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confirmed != nil {
		{
			size := m.Confirmed.Size()
			i -= size
			if _, err := m.Confirmed.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TotalPower != nil {
		{
			size := m.TotalPower.Size()
			i -= size
			if _, err := m.TotalPower.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Poll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Poll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Poll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Tally != nil {
		{
			size, err := m.Tally.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x22
	}
	if m.OpId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OpId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxReqEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestChain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.DestAddr)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OpId != 0 {
		n += 1 + sovTypes(uint64(m.OpId))
	}
	if len(m.OpArgs) > 0 {
		for _, b := range m.OpArgs {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Funds) > 0 {
		for _, e := range m.Funds {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *TxResEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReqEvtId != 0 {
		n += 1 + sovTypes(uint64(m.ReqEvtId))
	}
	if m.Ok {
		n += 2
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EvtIdx != 0 {
		n += 1 + sovTypes(uint64(m.EvtIdx))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *Event_Req) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Event_Res) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Tally) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalPower != nil {
		l = m.TotalPower.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Confirmed != nil {
		l = m.Confirmed.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Poll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.OpId != 0 {
		n += 1 + sovTypes(uint64(m.OpId))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.Tally != nil {
		l = m.Tally.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxReqEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxReqEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxReqEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestAddr = append(m.DestAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.DestAddr == nil {
				m.DestAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			m.OpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpArgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpArgs = append(m.OpArgs, make([]byte, postIndex-iNdEx))
			copy(m.OpArgs[len(m.OpArgs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = append(m.Funds, &types.Coin{})
			if err := m.Funds[len(m.Funds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxResEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxResEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxResEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqEvtId", wireType)
			}
			m.ReqEvtId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqEvtId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvtIdx", wireType)
			}
			m.EvtIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvtIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TxReqEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_Req{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TxResEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_Res{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tally) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tally: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tally: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.TotalPower = &v
			if err := m.TotalPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Confirmed = &v
			if err := m.Confirmed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Poll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Poll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Poll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			m.OpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Poll_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tally", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tally == nil {
				m.Tally = &Tally{}
			}
			if err := m.Tally.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &Event{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
