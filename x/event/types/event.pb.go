// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/event/v1beta1/event.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventType is message group includes all event types
type EventType struct {
}

func (m *EventType) Reset()         { *m = EventType{} }
func (m *EventType) String() string { return proto.CompactTextString(m) }
func (*EventType) ProtoMessage()    {}
func (*EventType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ff137f95ca18e30, []int{0}
}
func (m *EventType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventType.Merge(m, src)
}
func (m *EventType) XXX_Size() int {
	return m.Size()
}
func (m *EventType) XXX_DiscardUnknown() {
	xxx_messageInfo_EventType.DiscardUnknown(m)
}

var xxx_messageInfo_EventType proto.InternalMessageInfo

// EventType_SubmitEvent is the event type of [MsgSubmitEvent]
type EventType_SubmitEvent struct {
	Executor     github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=executor,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"executor,omitempty"`
	ProxyAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=proxy_account,json=proxyAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proxy_account,omitempty"`
	Chain        string                                        `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	EventHash    [][]byte                                      `protobuf:"bytes,4,rep,name=event_hash,json=eventHash,proto3" json:"event_hash,omitempty"`
}

func (m *EventType_SubmitEvent) Reset()         { *m = EventType_SubmitEvent{} }
func (m *EventType_SubmitEvent) String() string { return proto.CompactTextString(m) }
func (*EventType_SubmitEvent) ProtoMessage()    {}
func (*EventType_SubmitEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ff137f95ca18e30, []int{0, 0}
}
func (m *EventType_SubmitEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventType_SubmitEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventType_SubmitEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventType_SubmitEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventType_SubmitEvent.Merge(m, src)
}
func (m *EventType_SubmitEvent) XXX_Size() int {
	return m.Size()
}
func (m *EventType_SubmitEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_EventType_SubmitEvent.DiscardUnknown(m)
}

var xxx_messageInfo_EventType_SubmitEvent proto.InternalMessageInfo

func (m *EventType_SubmitEvent) GetExecutor() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *EventType_SubmitEvent) GetProxyAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ProxyAccount
	}
	return nil
}

func (m *EventType_SubmitEvent) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *EventType_SubmitEvent) GetEventHash() [][]byte {
	if m != nil {
		return m.EventHash
	}
	return nil
}

// EventType_VoteEvent is the event type of [MsgVoteEvent]
type EventType_VoteEvent struct {
	Executor     github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=executor,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"executor,omitempty"`
	ProxyAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=proxy_account,json=proxyAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proxy_account,omitempty"`
	Chain        string                                        `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	PollIds      []uint64                                      `protobuf:"varint,4,rep,packed,name=poll_ids,json=pollIds,proto3" json:"poll_ids,omitempty"`
}

func (m *EventType_VoteEvent) Reset()         { *m = EventType_VoteEvent{} }
func (m *EventType_VoteEvent) String() string { return proto.CompactTextString(m) }
func (*EventType_VoteEvent) ProtoMessage()    {}
func (*EventType_VoteEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ff137f95ca18e30, []int{0, 1}
}
func (m *EventType_VoteEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventType_VoteEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventType_VoteEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventType_VoteEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventType_VoteEvent.Merge(m, src)
}
func (m *EventType_VoteEvent) XXX_Size() int {
	return m.Size()
}
func (m *EventType_VoteEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_EventType_VoteEvent.DiscardUnknown(m)
}

var xxx_messageInfo_EventType_VoteEvent proto.InternalMessageInfo

func (m *EventType_VoteEvent) GetExecutor() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *EventType_VoteEvent) GetProxyAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ProxyAccount
	}
	return nil
}

func (m *EventType_VoteEvent) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *EventType_VoteEvent) GetPollIds() []uint64 {
	if m != nil {
		return m.PollIds
	}
	return nil
}

// EventType_RegisterProxy is the event type of [MsgRegisterProxy]
type EventType_RegisterProxy struct {
	Executor        github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=executor,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"executor,omitempty"`
	ProxyRegistered github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=proxy_registered,json=proxyRegistered,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proxy_registered,omitempty"`
}

func (m *EventType_RegisterProxy) Reset()         { *m = EventType_RegisterProxy{} }
func (m *EventType_RegisterProxy) String() string { return proto.CompactTextString(m) }
func (*EventType_RegisterProxy) ProtoMessage()    {}
func (*EventType_RegisterProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ff137f95ca18e30, []int{0, 2}
}
func (m *EventType_RegisterProxy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventType_RegisterProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventType_RegisterProxy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventType_RegisterProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventType_RegisterProxy.Merge(m, src)
}
func (m *EventType_RegisterProxy) XXX_Size() int {
	return m.Size()
}
func (m *EventType_RegisterProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_EventType_RegisterProxy.DiscardUnknown(m)
}

var xxx_messageInfo_EventType_RegisterProxy proto.InternalMessageInfo

func (m *EventType_RegisterProxy) GetExecutor() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *EventType_RegisterProxy) GetProxyRegistered() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ProxyRegistered
	}
	return nil
}

// EventType_ClearProxy is the event type of [MsgClearProxy]
type EventType_ClearProxy struct {
	Executor     github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=executor,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"executor,omitempty"`
	ProxyCleared github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=proxy_cleared,json=proxyCleared,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proxy_cleared,omitempty"`
}

func (m *EventType_ClearProxy) Reset()         { *m = EventType_ClearProxy{} }
func (m *EventType_ClearProxy) String() string { return proto.CompactTextString(m) }
func (*EventType_ClearProxy) ProtoMessage()    {}
func (*EventType_ClearProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ff137f95ca18e30, []int{0, 3}
}
func (m *EventType_ClearProxy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventType_ClearProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventType_ClearProxy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventType_ClearProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventType_ClearProxy.Merge(m, src)
}
func (m *EventType_ClearProxy) XXX_Size() int {
	return m.Size()
}
func (m *EventType_ClearProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_EventType_ClearProxy.DiscardUnknown(m)
}

var xxx_messageInfo_EventType_ClearProxy proto.InternalMessageInfo

func (m *EventType_ClearProxy) GetExecutor() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *EventType_ClearProxy) GetProxyCleared() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ProxyCleared
	}
	return nil
}

// EventType_RegisterChain is the event type of [MsgRegisterChain]
type EventType_RegisterChain struct {
	Executor     github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=executor,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"executor,omitempty"`
	ProxyAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=proxy_account,json=proxyAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proxy_account,omitempty"`
	Chain        string                                        `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	ChainPrefix  []byte                                        `protobuf:"bytes,4,opt,name=chain_prefix,json=chainPrefix,proto3" json:"chain_prefix,omitempty"`
}

func (m *EventType_RegisterChain) Reset()         { *m = EventType_RegisterChain{} }
func (m *EventType_RegisterChain) String() string { return proto.CompactTextString(m) }
func (*EventType_RegisterChain) ProtoMessage()    {}
func (*EventType_RegisterChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ff137f95ca18e30, []int{0, 4}
}
func (m *EventType_RegisterChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventType_RegisterChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventType_RegisterChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventType_RegisterChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventType_RegisterChain.Merge(m, src)
}
func (m *EventType_RegisterChain) XXX_Size() int {
	return m.Size()
}
func (m *EventType_RegisterChain) XXX_DiscardUnknown() {
	xxx_messageInfo_EventType_RegisterChain.DiscardUnknown(m)
}

var xxx_messageInfo_EventType_RegisterChain proto.InternalMessageInfo

func (m *EventType_RegisterChain) GetExecutor() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *EventType_RegisterChain) GetProxyAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ProxyAccount
	}
	return nil
}

func (m *EventType_RegisterChain) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *EventType_RegisterChain) GetChainPrefix() []byte {
	if m != nil {
		return m.ChainPrefix
	}
	return nil
}

// EventType_UnregisterChain is the event type of [MsgUnregisterChain]
type EventType_UnregisterChain struct {
	Executor     github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=executor,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"executor,omitempty"`
	ProxyAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=proxy_account,json=proxyAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proxy_account,omitempty"`
	Chain        string                                        `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	ChainPrefix  []byte                                        `protobuf:"bytes,4,opt,name=chain_prefix,json=chainPrefix,proto3" json:"chain_prefix,omitempty"`
}

func (m *EventType_UnregisterChain) Reset()         { *m = EventType_UnregisterChain{} }
func (m *EventType_UnregisterChain) String() string { return proto.CompactTextString(m) }
func (*EventType_UnregisterChain) ProtoMessage()    {}
func (*EventType_UnregisterChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ff137f95ca18e30, []int{0, 5}
}
func (m *EventType_UnregisterChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventType_UnregisterChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventType_UnregisterChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventType_UnregisterChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventType_UnregisterChain.Merge(m, src)
}
func (m *EventType_UnregisterChain) XXX_Size() int {
	return m.Size()
}
func (m *EventType_UnregisterChain) XXX_DiscardUnknown() {
	xxx_messageInfo_EventType_UnregisterChain.DiscardUnknown(m)
}

var xxx_messageInfo_EventType_UnregisterChain proto.InternalMessageInfo

func (m *EventType_UnregisterChain) GetExecutor() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *EventType_UnregisterChain) GetProxyAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ProxyAccount
	}
	return nil
}

func (m *EventType_UnregisterChain) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *EventType_UnregisterChain) GetChainPrefix() []byte {
	if m != nil {
		return m.ChainPrefix
	}
	return nil
}

func init() {
	proto.RegisterType((*EventType)(nil), "manythings.mitosis.v1beta1.event.EventType")
	proto.RegisterType((*EventType_SubmitEvent)(nil), "manythings.mitosis.v1beta1.event.EventType.SubmitEvent")
	proto.RegisterType((*EventType_VoteEvent)(nil), "manythings.mitosis.v1beta1.event.EventType.VoteEvent")
	proto.RegisterType((*EventType_RegisterProxy)(nil), "manythings.mitosis.v1beta1.event.EventType.RegisterProxy")
	proto.RegisterType((*EventType_ClearProxy)(nil), "manythings.mitosis.v1beta1.event.EventType.ClearProxy")
	proto.RegisterType((*EventType_RegisterChain)(nil), "manythings.mitosis.v1beta1.event.EventType.RegisterChain")
	proto.RegisterType((*EventType_UnregisterChain)(nil), "manythings.mitosis.v1beta1.event.EventType.UnregisterChain")
}

func init() { proto.RegisterFile("mitosis/event/v1beta1/event.proto", fileDescriptor_1ff137f95ca18e30) }

var fileDescriptor_1ff137f95ca18e30 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x94, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0x5c, 0x80, 0xcb, 0x5c, 0x4e, 0x87, 0xac, 0x2b, 0x8c, 0x25, 0x8c, 0x8f, 0x2a,
	0x05, 0xb1, 0x15, 0xf1, 0x04, 0xb9, 0x08, 0x04, 0x05, 0xd2, 0xc9, 0x40, 0x0a, 0x84, 0x64, 0xad,
	0xd7, 0x8b, 0xbd, 0xc2, 0xf6, 0x5a, 0xbb, 0xeb, 0x93, 0xfd, 0x16, 0xbc, 0x0b, 0x0d, 0x05, 0x0f,
	0x40, 0x79, 0x25, 0x15, 0x42, 0x71, 0x45, 0x85, 0x68, 0xa9, 0x90, 0x77, 0x7d, 0x51, 0x5a, 0xfe,
	0x15, 0x40, 0xe5, 0x9d, 0xf1, 0xf8, 0x37, 0xf3, 0x79, 0x56, 0x1f, 0x9c, 0x14, 0x4c, 0x71, 0xc9,
	0x64, 0x40, 0xcf, 0x69, 0xa9, 0x82, 0xf3, 0x45, 0x4c, 0x15, 0x5e, 0x98, 0xc8, 0xaf, 0x04, 0x57,
	0xdc, 0xf2, 0x0a, 0x5c, 0xb6, 0x2a, 0x63, 0x65, 0x2a, 0xfd, 0xa1, 0xda, 0x1f, 0xea, 0x7c, 0x5d,
	0xe7, 0x1c, 0xa7, 0x3c, 0xe5, 0xba, 0x38, 0xe8, 0x4f, 0xe6, 0xbb, 0x3b, 0x6f, 0x01, 0x26, 0xf7,
	0xfb, 0xf7, 0x4f, 0xdb, 0x8a, 0x3a, 0x9f, 0x11, 0x1c, 0x3c, 0xa9, 0xe3, 0x82, 0x29, 0x9d, 0xb3,
	0x1e, 0xc3, 0x3e, 0x6d, 0x28, 0xa9, 0x15, 0x17, 0x36, 0xf2, 0xd0, 0x6c, 0x7a, 0xba, 0xf8, 0xf6,
	0xf1, 0xf6, 0x3c, 0x65, 0x2a, 0xab, 0x63, 0x9f, 0xf0, 0x22, 0x20, 0x5c, 0x16, 0x5c, 0x0e, 0x8f,
	0xb9, 0x4c, 0x5e, 0x05, 0xaa, 0xad, 0xa8, 0xf4, 0xd7, 0x38, 0x5f, 0x26, 0x89, 0xa0, 0x52, 0x86,
	0x5b, 0x84, 0xb5, 0x86, 0xc3, 0x4a, 0xf0, 0xa6, 0x8d, 0x30, 0x21, 0xbc, 0x2e, 0x95, 0x7d, 0xe5,
	0x87, 0x98, 0x4b, 0x42, 0x2e, 0x99, 0x53, 0xcd, 0x59, 0x1a, 0x8c, 0x75, 0x0c, 0x57, 0x49, 0x86,
	0x59, 0x69, 0xef, 0x79, 0x68, 0x36, 0x09, 0x4d, 0x60, 0xdd, 0x02, 0xd0, 0xca, 0xa3, 0x0c, 0xcb,
	0xcc, 0x1e, 0x7b, 0x7b, 0xb3, 0x69, 0x38, 0xd1, 0x99, 0x87, 0x58, 0x66, 0x4e, 0x87, 0x60, 0xb2,
	0xe6, 0x8a, 0xfe, 0x03, 0x4a, 0x6f, 0xc2, 0x7e, 0xc5, 0xf3, 0x3c, 0x62, 0x89, 0xd4, 0x3a, 0xc7,
	0xe1, 0xf5, 0x3e, 0x7e, 0x94, 0x48, 0xe7, 0x1d, 0x82, 0xc3, 0x90, 0xa6, 0x4c, 0x2a, 0x2a, 0xce,
	0x7a, 0xd2, 0xef, 0x56, 0xfa, 0x02, 0x6e, 0x18, 0xa5, 0x62, 0xe8, 0x42, 0x93, 0x9f, 0x17, 0x7b,
	0xa4, 0x51, 0xe1, 0x96, 0xe4, 0xbc, 0x41, 0x00, 0xab, 0x9c, 0xe2, 0x3f, 0x33, 0xfb, 0x76, 0x4b,
	0xa4, 0x6f, 0xf1, 0x2b, 0x83, 0x9b, 0x2d, 0xad, 0x0c, 0xc6, 0xf9, 0xb2, 0xf3, 0xd3, 0x57, 0x7a,
	0x43, 0x7f, 0xf5, 0xf5, 0x3a, 0x81, 0xa9, 0x3e, 0x44, 0x95, 0xa0, 0x2f, 0x59, 0x63, 0x8f, 0xfb,
	0x66, 0xe1, 0x81, 0xce, 0x9d, 0xe9, 0x94, 0xf3, 0x15, 0xc1, 0xd1, 0xb3, 0x52, 0xfc, 0x4f, 0x9a,
	0x4f, 0x1f, 0xbc, 0xdf, 0xb8, 0xe8, 0x62, 0xe3, 0xa2, 0x4f, 0x1b, 0x17, 0xbd, 0xee, 0xdc, 0xd1,
	0x45, 0xe7, 0x8e, 0x3e, 0x74, 0xee, 0xe8, 0xf9, 0xdd, 0x9d, 0x79, 0x7a, 0x5f, 0x9e, 0x1b, 0x63,
	0x0e, 0x2e, 0x6d, 0xbc, 0x19, 0x8c, 0x5c, 0x4f, 0x16, 0x5f, 0xd3, 0x4e, 0x7c, 0xef, 0x7b, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x49, 0x2e, 0xe8, 0x58, 0xe6, 0x05, 0x00, 0x00,
}

func (m *EventType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventType_SubmitEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventType_SubmitEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventType_SubmitEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventHash) > 0 {
		for iNdEx := len(m.EventHash) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EventHash[iNdEx])
			copy(dAtA[i:], m.EventHash[iNdEx])
			i = encodeVarintEvent(dAtA, i, uint64(len(m.EventHash[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProxyAccount) > 0 {
		i -= len(m.ProxyAccount)
		copy(dAtA[i:], m.ProxyAccount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ProxyAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventType_VoteEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventType_VoteEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventType_VoteEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PollIds) > 0 {
		dAtA2 := make([]byte, len(m.PollIds)*10)
		var j1 int
		for _, num := range m.PollIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEvent(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProxyAccount) > 0 {
		i -= len(m.ProxyAccount)
		copy(dAtA[i:], m.ProxyAccount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ProxyAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventType_RegisterProxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventType_RegisterProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventType_RegisterProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProxyRegistered) > 0 {
		i -= len(m.ProxyRegistered)
		copy(dAtA[i:], m.ProxyRegistered)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ProxyRegistered)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventType_ClearProxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventType_ClearProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventType_ClearProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProxyCleared) > 0 {
		i -= len(m.ProxyCleared)
		copy(dAtA[i:], m.ProxyCleared)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ProxyCleared)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventType_RegisterChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventType_RegisterChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventType_RegisterChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainPrefix) > 0 {
		i -= len(m.ChainPrefix)
		copy(dAtA[i:], m.ChainPrefix)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainPrefix)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProxyAccount) > 0 {
		i -= len(m.ProxyAccount)
		copy(dAtA[i:], m.ProxyAccount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ProxyAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventType_UnregisterChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventType_UnregisterChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventType_UnregisterChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainPrefix) > 0 {
		i -= len(m.ChainPrefix)
		copy(dAtA[i:], m.ChainPrefix)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainPrefix)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProxyAccount) > 0 {
		i -= len(m.ProxyAccount)
		copy(dAtA[i:], m.ProxyAccount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ProxyAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventType_SubmitEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ProxyAccount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.EventHash) > 0 {
		for _, b := range m.EventHash {
			l = len(b)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *EventType_VoteEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ProxyAccount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.PollIds) > 0 {
		l = 0
		for _, e := range m.PollIds {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	return n
}

func (m *EventType_RegisterProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ProxyRegistered)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventType_ClearProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ProxyCleared)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventType_RegisterChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ProxyAccount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChainPrefix)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventType_UnregisterChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ProxyAccount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChainPrefix)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventType_SubmitEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = append(m.Executor[:0], dAtA[iNdEx:postIndex]...)
			if m.Executor == nil {
				m.Executor = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAccount = append(m.ProxyAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.ProxyAccount == nil {
				m.ProxyAccount = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventHash = append(m.EventHash, make([]byte, postIndex-iNdEx))
			copy(m.EventHash[len(m.EventHash)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventType_VoteEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = append(m.Executor[:0], dAtA[iNdEx:postIndex]...)
			if m.Executor == nil {
				m.Executor = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAccount = append(m.ProxyAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.ProxyAccount == nil {
				m.ProxyAccount = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PollIds = append(m.PollIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PollIds) == 0 {
					m.PollIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PollIds = append(m.PollIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PollIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventType_RegisterProxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterProxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterProxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = append(m.Executor[:0], dAtA[iNdEx:postIndex]...)
			if m.Executor == nil {
				m.Executor = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyRegistered", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyRegistered = append(m.ProxyRegistered[:0], dAtA[iNdEx:postIndex]...)
			if m.ProxyRegistered == nil {
				m.ProxyRegistered = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventType_ClearProxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearProxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearProxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = append(m.Executor[:0], dAtA[iNdEx:postIndex]...)
			if m.Executor == nil {
				m.Executor = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyCleared", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyCleared = append(m.ProxyCleared[:0], dAtA[iNdEx:postIndex]...)
			if m.ProxyCleared == nil {
				m.ProxyCleared = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventType_RegisterChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = append(m.Executor[:0], dAtA[iNdEx:postIndex]...)
			if m.Executor == nil {
				m.Executor = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAccount = append(m.ProxyAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.ProxyAccount == nil {
				m.ProxyAccount = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainPrefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainPrefix = append(m.ChainPrefix[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainPrefix == nil {
				m.ChainPrefix = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventType_UnregisterChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnregisterChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnregisterChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = append(m.Executor[:0], dAtA[iNdEx:postIndex]...)
			if m.Executor == nil {
				m.Executor = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAccount = append(m.ProxyAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.ProxyAccount == nil {
				m.ProxyAccount = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainPrefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainPrefix = append(m.ChainPrefix[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainPrefix == nil {
				m.ChainPrefix = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
