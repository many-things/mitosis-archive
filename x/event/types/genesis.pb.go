// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/event/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Genesis state of poll repository
type GenesisPoll struct {
	LatestId uint64                 `protobuf:"varint,1,opt,name=latest_id,json=latestId,proto3" json:"latest_id,omitempty"`
	ItemSet  []*GenesisPoll_ItemSet `protobuf:"bytes,2,rep,name=item_set,json=itemSet,proto3" json:"item_set,omitempty"`
	HashSet  []*GenesisPoll_HashSet `protobuf:"bytes,3,rep,name=hash_set,json=hashSet,proto3" json:"hash_set,omitempty"`
}

func (m *GenesisPoll) Reset()         { *m = GenesisPoll{} }
func (m *GenesisPoll) String() string { return proto.CompactTextString(m) }
func (*GenesisPoll) ProtoMessage()    {}
func (*GenesisPoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_806d73e3d675e6c3, []int{0}
}
func (m *GenesisPoll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisPoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisPoll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisPoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisPoll.Merge(m, src)
}
func (m *GenesisPoll) XXX_Size() int {
	return m.Size()
}
func (m *GenesisPoll) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisPoll.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisPoll proto.InternalMessageInfo

func (m *GenesisPoll) GetLatestId() uint64 {
	if m != nil {
		return m.LatestId
	}
	return 0
}

func (m *GenesisPoll) GetItemSet() []*GenesisPoll_ItemSet {
	if m != nil {
		return m.ItemSet
	}
	return nil
}

func (m *GenesisPoll) GetHashSet() []*GenesisPoll_HashSet {
	if m != nil {
		return m.HashSet
	}
	return nil
}

// Key-Value set of item
type GenesisPoll_ItemSet struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Poll *Poll  `protobuf:"bytes,2,opt,name=poll,proto3" json:"poll,omitempty"`
}

func (m *GenesisPoll_ItemSet) Reset()         { *m = GenesisPoll_ItemSet{} }
func (m *GenesisPoll_ItemSet) String() string { return proto.CompactTextString(m) }
func (*GenesisPoll_ItemSet) ProtoMessage()    {}
func (*GenesisPoll_ItemSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_806d73e3d675e6c3, []int{0, 0}
}
func (m *GenesisPoll_ItemSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisPoll_ItemSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisPoll_ItemSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisPoll_ItemSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisPoll_ItemSet.Merge(m, src)
}
func (m *GenesisPoll_ItemSet) XXX_Size() int {
	return m.Size()
}
func (m *GenesisPoll_ItemSet) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisPoll_ItemSet.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisPoll_ItemSet proto.InternalMessageInfo

func (m *GenesisPoll_ItemSet) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GenesisPoll_ItemSet) GetPoll() *Poll {
	if m != nil {
		return m.Poll
	}
	return nil
}

// Key-Value set of hash
type GenesisPoll_HashSet struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Id   uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GenesisPoll_HashSet) Reset()         { *m = GenesisPoll_HashSet{} }
func (m *GenesisPoll_HashSet) String() string { return proto.CompactTextString(m) }
func (*GenesisPoll_HashSet) ProtoMessage()    {}
func (*GenesisPoll_HashSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_806d73e3d675e6c3, []int{0, 1}
}
func (m *GenesisPoll_HashSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisPoll_HashSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisPoll_HashSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisPoll_HashSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisPoll_HashSet.Merge(m, src)
}
func (m *GenesisPoll_HashSet) XXX_Size() int {
	return m.Size()
}
func (m *GenesisPoll_HashSet) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisPoll_HashSet.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisPoll_HashSet proto.InternalMessageInfo

func (m *GenesisPoll_HashSet) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *GenesisPoll_HashSet) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Genesis state of proxy repository
type GenesisProxy struct {
	ItemSet []*GenesisProxy_ItemSet `protobuf:"bytes,1,rep,name=item_set,json=itemSet,proto3" json:"item_set,omitempty"`
}

func (m *GenesisProxy) Reset()         { *m = GenesisProxy{} }
func (m *GenesisProxy) String() string { return proto.CompactTextString(m) }
func (*GenesisProxy) ProtoMessage()    {}
func (*GenesisProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_806d73e3d675e6c3, []int{1}
}
func (m *GenesisProxy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisProxy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisProxy.Merge(m, src)
}
func (m *GenesisProxy) XXX_Size() int {
	return m.Size()
}
func (m *GenesisProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisProxy.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisProxy proto.InternalMessageInfo

func (m *GenesisProxy) GetItemSet() []*GenesisProxy_ItemSet {
	if m != nil {
		return m.ItemSet
	}
	return nil
}

// Key-Value set of item
type GenesisProxy_ItemSet struct {
	Validator    github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=validator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"validator,omitempty"`
	ProxyAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=proxy_account,json=proxyAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proxy_account,omitempty"`
}

func (m *GenesisProxy_ItemSet) Reset()         { *m = GenesisProxy_ItemSet{} }
func (m *GenesisProxy_ItemSet) String() string { return proto.CompactTextString(m) }
func (*GenesisProxy_ItemSet) ProtoMessage()    {}
func (*GenesisProxy_ItemSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_806d73e3d675e6c3, []int{1, 0}
}
func (m *GenesisProxy_ItemSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisProxy_ItemSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisProxy_ItemSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisProxy_ItemSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisProxy_ItemSet.Merge(m, src)
}
func (m *GenesisProxy_ItemSet) XXX_Size() int {
	return m.Size()
}
func (m *GenesisProxy_ItemSet) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisProxy_ItemSet.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisProxy_ItemSet proto.InternalMessageInfo

func (m *GenesisProxy_ItemSet) GetValidator() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *GenesisProxy_ItemSet) GetProxyAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ProxyAccount
	}
	return nil
}

// Genesis state of chain registry
type GenesisChain struct {
	LatestId []byte                  `protobuf:"bytes,1,opt,name=latest_id,json=latestId,proto3" json:"latest_id,omitempty"`
	ItemSet  []*GenesisChain_ItemSet `protobuf:"bytes,2,rep,name=item_set,json=itemSet,proto3" json:"item_set,omitempty"`
}

func (m *GenesisChain) Reset()         { *m = GenesisChain{} }
func (m *GenesisChain) String() string { return proto.CompactTextString(m) }
func (*GenesisChain) ProtoMessage()    {}
func (*GenesisChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_806d73e3d675e6c3, []int{2}
}
func (m *GenesisChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisChain.Merge(m, src)
}
func (m *GenesisChain) XXX_Size() int {
	return m.Size()
}
func (m *GenesisChain) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisChain.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisChain proto.InternalMessageInfo

func (m *GenesisChain) GetLatestId() []byte {
	if m != nil {
		return m.LatestId
	}
	return nil
}

func (m *GenesisChain) GetItemSet() []*GenesisChain_ItemSet {
	if m != nil {
		return m.ItemSet
	}
	return nil
}

// Key-Value set of item
type GenesisChain_ItemSet struct {
	Chain  string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Prefix []byte `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *GenesisChain_ItemSet) Reset()         { *m = GenesisChain_ItemSet{} }
func (m *GenesisChain_ItemSet) String() string { return proto.CompactTextString(m) }
func (*GenesisChain_ItemSet) ProtoMessage()    {}
func (*GenesisChain_ItemSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_806d73e3d675e6c3, []int{2, 0}
}
func (m *GenesisChain_ItemSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisChain_ItemSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisChain_ItemSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisChain_ItemSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisChain_ItemSet.Merge(m, src)
}
func (m *GenesisChain_ItemSet) XXX_Size() int {
	return m.Size()
}
func (m *GenesisChain_ItemSet) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisChain_ItemSet.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisChain_ItemSet proto.InternalMessageInfo

func (m *GenesisChain_ItemSet) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *GenesisChain_ItemSet) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

// GenesisState defines the event module's genesis state.
type GenesisState struct {
	Params Params        `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	Poll   *GenesisPoll  `protobuf:"bytes,2,opt,name=poll,proto3" json:"poll,omitempty"`
	Proxy  *GenesisProxy `protobuf:"bytes,3,opt,name=proxy,proto3" json:"proxy,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_806d73e3d675e6c3, []int{3}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetPoll() *GenesisPoll {
	if m != nil {
		return m.Poll
	}
	return nil
}

func (m *GenesisState) GetProxy() *GenesisProxy {
	if m != nil {
		return m.Proxy
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisPoll)(nil), "manythings.mitosis.v1beta1.event.GenesisPoll")
	proto.RegisterType((*GenesisPoll_ItemSet)(nil), "manythings.mitosis.v1beta1.event.GenesisPoll.ItemSet")
	proto.RegisterType((*GenesisPoll_HashSet)(nil), "manythings.mitosis.v1beta1.event.GenesisPoll.HashSet")
	proto.RegisterType((*GenesisProxy)(nil), "manythings.mitosis.v1beta1.event.GenesisProxy")
	proto.RegisterType((*GenesisProxy_ItemSet)(nil), "manythings.mitosis.v1beta1.event.GenesisProxy.ItemSet")
	proto.RegisterType((*GenesisChain)(nil), "manythings.mitosis.v1beta1.event.GenesisChain")
	proto.RegisterType((*GenesisChain_ItemSet)(nil), "manythings.mitosis.v1beta1.event.GenesisChain.ItemSet")
	proto.RegisterType((*GenesisState)(nil), "manythings.mitosis.v1beta1.event.GenesisState")
}

func init() {
	proto.RegisterFile("mitosis/event/v1beta1/genesis.proto", fileDescriptor_806d73e3d675e6c3)
}

var fileDescriptor_806d73e3d675e6c3 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0xac, 0x6b, 0x57, 0xb7, 0x70, 0xb0, 0x26, 0x54, 0x05, 0x29, 0x2b, 0x41, 0x42,
	0x3d, 0x90, 0x44, 0x2d, 0x02, 0x24, 0x6e, 0x2d, 0x68, 0xb0, 0x13, 0x9b, 0x27, 0x76, 0xe0, 0x52,
	0xb9, 0x89, 0x49, 0x2c, 0x92, 0x38, 0x8a, 0xbd, 0xaa, 0xfd, 0x16, 0x9c, 0xf8, 0x20, 0x5c, 0xf8,
	0x0a, 0x3b, 0xee, 0xc0, 0x81, 0xd3, 0x40, 0xed, 0xb7, 0xe0, 0x84, 0x62, 0xbb, 0x6b, 0x51, 0x27,
	0xad, 0xe3, 0xd4, 0xe7, 0xea, 0xbd, 0xdf, 0xff, 0xbd, 0xe7, 0x7f, 0x0c, 0x1e, 0xa7, 0x54, 0x30,
	0x4e, 0xb9, 0x4f, 0x26, 0x24, 0x13, 0xfe, 0xa4, 0x37, 0x26, 0x02, 0xf7, 0xfc, 0x88, 0x64, 0x84,
	0x53, 0xee, 0xe5, 0x05, 0x13, 0x0c, 0x76, 0x52, 0x9c, 0xcd, 0x44, 0x4c, 0xb3, 0x88, 0x7b, 0x3a,
	0xdf, 0xd3, 0x99, 0x9e, 0xac, 0xb3, 0xf6, 0x23, 0x16, 0x31, 0x99, 0xec, 0x97, 0x91, 0xaa, 0xb3,
	0x9c, 0x9b, 0xe1, 0x39, 0x2e, 0x70, 0xaa, 0xd9, 0xd6, 0xa3, 0x9b, 0x73, 0xc4, 0x2c, 0x27, 0x3a,
	0xc5, 0xf9, 0x61, 0x82, 0xe6, 0x5b, 0xd5, 0xd0, 0x31, 0x4b, 0x12, 0xf8, 0x10, 0x34, 0x12, 0x2c,
	0x08, 0x17, 0x23, 0x1a, 0xb6, 0x8d, 0x8e, 0xd1, 0xad, 0xa2, 0x3d, 0xf5, 0xc7, 0x51, 0x08, 0x8f,
	0xc1, 0x1e, 0x15, 0x24, 0x1d, 0x71, 0x22, 0xda, 0x66, 0x67, 0xa7, 0xdb, 0xec, 0x3f, 0xf7, 0x6e,
	0x6b, 0xdf, 0x5b, 0xa3, 0x7b, 0x47, 0x82, 0xa4, 0xa7, 0x44, 0xa0, 0x3a, 0x55, 0x41, 0x49, 0x8c,
	0x31, 0x8f, 0x25, 0x71, 0xe7, 0x7f, 0x88, 0xef, 0x30, 0x8f, 0x25, 0x31, 0x56, 0x81, 0xf5, 0x01,
	0xd4, 0xb5, 0x0a, 0xbc, 0x0f, 0xcc, 0xeb, 0x21, 0x4c, 0x1a, 0xc2, 0x57, 0xa0, 0x9a, 0xb3, 0x24,
	0x69, 0x9b, 0x1d, 0xa3, 0xdb, 0xec, 0x3f, 0xb9, 0x5d, 0xa8, 0x54, 0x40, 0xb2, 0xc6, 0x72, 0x41,
	0x5d, 0x4b, 0x41, 0x08, 0xaa, 0xa5, 0x98, 0x04, 0xb7, 0x90, 0x8c, 0xb5, 0x94, 0xb9, 0x94, 0x72,
	0xbe, 0x9a, 0xa0, 0xb5, 0x6c, 0xb3, 0x60, 0xd3, 0x19, 0x3c, 0x59, 0x5b, 0x9d, 0x21, 0x07, 0x7d,
	0xb1, 0xfd, 0xa0, 0x25, 0x61, 0x63, 0x77, 0xd6, 0x37, 0x63, 0x35, 0xea, 0x7b, 0xd0, 0x98, 0xe0,
	0x84, 0x86, 0x58, 0xb0, 0x42, 0x35, 0x36, 0xec, 0xfd, 0xb9, 0x3a, 0x70, 0x23, 0x2a, 0xe2, 0xf3,
	0xb1, 0x17, 0xb0, 0xd4, 0x0f, 0x18, 0x4f, 0x19, 0xd7, 0x3f, 0x2e, 0x0f, 0x3f, 0x6b, 0x1f, 0x9c,
	0xe1, 0x64, 0x10, 0x86, 0x05, 0xe1, 0x1c, 0xad, 0x18, 0xf0, 0x0c, 0xdc, 0xcb, 0x4b, 0xd9, 0x11,
	0x0e, 0x02, 0x76, 0x9e, 0x09, 0x39, 0xdb, 0xf6, 0xd0, 0x41, 0x10, 0x2c, 0xa1, 0x2d, 0xc9, 0x19,
	0x28, 0x8c, 0xf3, 0xdd, 0xb8, 0x5e, 0xcc, 0xeb, 0x18, 0xd3, 0x6c, 0xd3, 0x70, 0xad, 0x35, 0xc3,
	0x9d, 0x6c, 0x18, 0x6e, 0xfb, 0xad, 0x49, 0xfc, 0xe6, 0xd6, 0x5e, 0xae, 0x96, 0xb6, 0x0f, 0x76,
	0x83, 0x32, 0x49, 0xca, 0x36, 0x90, 0x3a, 0xc0, 0x07, 0xa0, 0x96, 0x17, 0xe4, 0x13, 0x9d, 0xaa,
	0x91, 0x91, 0x3e, 0x39, 0xbf, 0x56, 0x9d, 0x9f, 0x0a, 0x2c, 0x08, 0x3c, 0x04, 0x35, 0xf5, 0xb5,
	0xc9, 0xfa, 0x66, 0xbf, 0xbb, 0x85, 0xa1, 0x64, 0xfe, 0xb0, 0x7a, 0x71, 0x75, 0x50, 0x41, 0xba,
	0x1a, 0x0e, 0xfe, 0xb1, 0xa5, 0x7b, 0x27, 0xff, 0x2b, 0x77, 0xc2, 0x37, 0x60, 0x57, 0x6e, 0xb9,
	0xbd, 0x23, 0x19, 0xde, 0xdd, 0xac, 0x85, 0x54, 0xf1, 0xf0, 0xf0, 0x62, 0x6e, 0x1b, 0x97, 0x73,
	0xdb, 0xf8, 0x3d, 0xb7, 0x8d, 0x2f, 0x0b, 0xbb, 0x72, 0xb9, 0xb0, 0x2b, 0x3f, 0x17, 0x76, 0xe5,
	0xe3, 0xd3, 0xb5, 0x2b, 0x2f, 0xd1, 0xae, 0x62, 0xfb, 0xcb, 0xf7, 0x65, 0xaa, 0x5f, 0x18, 0x79,
	0xf9, 0xe3, 0x9a, 0x7c, 0x5a, 0x9e, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xd3, 0xb2, 0x3f,
	0x00, 0x05, 0x00, 0x00,
}

func (m *GenesisPoll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisPoll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisPoll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HashSet) > 0 {
		for iNdEx := len(m.HashSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HashSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ItemSet) > 0 {
		for iNdEx := len(m.ItemSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.LatestId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LatestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisPoll_ItemSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisPoll_ItemSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisPoll_ItemSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Poll != nil {
		{
			size, err := m.Poll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisPoll_HashSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisPoll_HashSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisPoll_HashSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisProxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemSet) > 0 {
		for iNdEx := len(m.ItemSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisProxy_ItemSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisProxy_ItemSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisProxy_ItemSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProxyAccount) > 0 {
		i -= len(m.ProxyAccount)
		copy(dAtA[i:], m.ProxyAccount)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ProxyAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemSet) > 0 {
		for iNdEx := len(m.ItemSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.LatestId) > 0 {
		i -= len(m.LatestId)
		copy(dAtA[i:], m.LatestId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.LatestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisChain_ItemSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisChain_ItemSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisChain_ItemSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proxy != nil {
		{
			size, err := m.Proxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Poll != nil {
		{
			size, err := m.Poll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisPoll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestId != 0 {
		n += 1 + sovGenesis(uint64(m.LatestId))
	}
	if len(m.ItemSet) > 0 {
		for _, e := range m.ItemSet {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.HashSet) > 0 {
		for _, e := range m.HashSet {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisPoll_ItemSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGenesis(uint64(m.Id))
	}
	if m.Poll != nil {
		l = m.Poll.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisPoll_HashSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovGenesis(uint64(m.Id))
	}
	return n
}

func (m *GenesisProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ItemSet) > 0 {
		for _, e := range m.ItemSet {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisProxy_ItemSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ProxyAccount)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LatestId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.ItemSet) > 0 {
		for _, e := range m.ItemSet {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisChain_ItemSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.Poll != nil {
		l = m.Poll.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Proxy != nil {
		l = m.Proxy.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisPoll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisPoll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisPoll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestId", wireType)
			}
			m.LatestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemSet = append(m.ItemSet, &GenesisPoll_ItemSet{})
			if err := m.ItemSet[len(m.ItemSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashSet = append(m.HashSet, &GenesisPoll_HashSet{})
			if err := m.HashSet[len(m.HashSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisPoll_ItemSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Poll == nil {
				m.Poll = &Poll{}
			}
			if err := m.Poll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisPoll_HashSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisProxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisProxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisProxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemSet = append(m.ItemSet, &GenesisProxy_ItemSet{})
			if err := m.ItemSet[len(m.ItemSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisProxy_ItemSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = append(m.Validator[:0], dAtA[iNdEx:postIndex]...)
			if m.Validator == nil {
				m.Validator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAccount = append(m.ProxyAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.ProxyAccount == nil {
				m.ProxyAccount = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestId = append(m.LatestId[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestId == nil {
				m.LatestId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemSet = append(m.ItemSet, &GenesisChain_ItemSet{})
			if err := m.ItemSet[len(m.ItemSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisChain_ItemSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = append(m.Prefix[:0], dAtA[iNdEx:postIndex]...)
			if m.Prefix == nil {
				m.Prefix = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Poll == nil {
				m.Poll = &GenesisPoll{}
			}
			if err := m.Poll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proxy == nil {
				m.Proxy = &GenesisProxy{}
			}
			if err := m.Proxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
