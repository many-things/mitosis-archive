// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/event/v1beta1/types_poll.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Poll Status
type Poll_Status int32

const (
	// Unspecified status
	Poll_StatusUnspecified Poll_Status = 0
	// Pending status
	Poll_StatusPending Poll_Status = 1
	// Confirmed status
	Poll_StatusConfirmed Poll_Status = 2
	// Rejected status
	Poll_StatusRejected Poll_Status = 3
)

var Poll_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_PENDING",
	2: "STATUS_CONFIRMED",
	3: "STATUS_REJECTED",
}

var Poll_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_PENDING":     1,
	"STATUS_CONFIRMED":   2,
	"STATUS_REJECTED":    3,
}

func (x Poll_Status) String() string {
	return proto.EnumName(Poll_Status_name, int32(x))
}

func (Poll_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_25a46ca46bfd3bf3, []int{1, 0}
}

// Tally Message
type Tally struct {
	TotalPower *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=total_power,json=totalPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_power,omitempty"`
	Confirmed  *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=confirmed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"confirmed,omitempty"`
}

func (m *Tally) Reset()         { *m = Tally{} }
func (m *Tally) String() string { return proto.CompactTextString(m) }
func (*Tally) ProtoMessage()    {}
func (*Tally) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a46ca46bfd3bf3, []int{0}
}
func (m *Tally) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tally) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tally.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tally) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tally.Merge(m, src)
}
func (m *Tally) XXX_Size() int {
	return m.Size()
}
func (m *Tally) XXX_DiscardUnknown() {
	xxx_messageInfo_Tally.DiscardUnknown(m)
}

var xxx_messageInfo_Tally proto.InternalMessageInfo

// Poll Message
type Poll struct {
	// Chain identifier
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// Poll id
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Operation id - will be filled
	OpId uint64 `protobuf:"varint,3,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
	// Poll proposer
	Proposer github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,4,opt,name=proposer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"proposer,omitempty"`
	// Poll status
	Status Poll_Status `protobuf:"varint,5,opt,name=status,proto3,enum=manythings.mitosis.v1beta1.event.Poll_Status" json:"status,omitempty"`
	// Vote tally
	Tally *Tally `protobuf:"bytes,6,opt,name=tally,proto3" json:"tally,omitempty"`
	// Event payload
	Payload *Event `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Poll) Reset()         { *m = Poll{} }
func (m *Poll) String() string { return proto.CompactTextString(m) }
func (*Poll) ProtoMessage()    {}
func (*Poll) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a46ca46bfd3bf3, []int{1}
}
func (m *Poll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Poll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Poll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Poll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Poll.Merge(m, src)
}
func (m *Poll) XXX_Size() int {
	return m.Size()
}
func (m *Poll) XXX_DiscardUnknown() {
	xxx_messageInfo_Poll.DiscardUnknown(m)
}

var xxx_messageInfo_Poll proto.InternalMessageInfo

func (m *Poll) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Poll) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Poll) GetOpId() uint64 {
	if m != nil {
		return m.OpId
	}
	return 0
}

func (m *Poll) GetProposer() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Proposer
	}
	return nil
}

func (m *Poll) GetStatus() Poll_Status {
	if m != nil {
		return m.Status
	}
	return Poll_StatusUnspecified
}

func (m *Poll) GetTally() *Tally {
	if m != nil {
		return m.Tally
	}
	return nil
}

func (m *Poll) GetPayload() *Event {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterEnum("manythings.mitosis.v1beta1.event.Poll_Status", Poll_Status_name, Poll_Status_value)
	proto.RegisterType((*Tally)(nil), "manythings.mitosis.v1beta1.event.Tally")
	proto.RegisterType((*Poll)(nil), "manythings.mitosis.v1beta1.event.Poll")
}

func init() {
	proto.RegisterFile("mitosis/event/v1beta1/types_poll.proto", fileDescriptor_25a46ca46bfd3bf3)
}

var fileDescriptor_25a46ca46bfd3bf3 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0xc7, 0x33, 0x69, 0x92, 0xd2, 0x29, 0xa4, 0xe9, 0xb4, 0x48, 0x96, 0x17, 0xae, 0x55, 0x89,
	0x26, 0x20, 0x62, 0x2b, 0x65, 0xcd, 0x22, 0x1f, 0x0e, 0x18, 0xd4, 0x10, 0x39, 0x09, 0x0b, 0x36,
	0x91, 0xe3, 0x99, 0x26, 0x03, 0xb6, 0xc7, 0xf2, 0x4c, 0x0b, 0xb9, 0x42, 0x16, 0x88, 0x0b, 0x84,
	0x43, 0x70, 0x0a, 0x96, 0x5d, 0x22, 0x16, 0x15, 0x4a, 0x6e, 0xc1, 0x0a, 0xd9, 0xe3, 0x00, 0x2b,
	0x5a, 0x36, 0xfe, 0x18, 0xfd, 0x7e, 0x7f, 0x3f, 0xbf, 0xa7, 0x07, 0x4f, 0x02, 0x2a, 0x18, 0xa7,
	0xdc, 0x24, 0x97, 0x24, 0x14, 0xe6, 0x65, 0x63, 0x42, 0x84, 0xdb, 0x30, 0xc5, 0x3c, 0x22, 0x7c,
	0x1c, 0x31, 0xdf, 0x37, 0xa2, 0x98, 0x09, 0x86, 0xf4, 0xc0, 0x0d, 0xe7, 0x62, 0x46, 0xc3, 0x29,
	0x37, 0x32, 0xc5, 0xc8, 0x60, 0x23, 0x55, 0xd5, 0xc3, 0x29, 0x9b, 0xb2, 0x14, 0x36, 0x93, 0x27,
	0xe9, 0xa9, 0xd5, 0x7f, 0xe5, 0xa7, 0x67, 0x12, 0x3c, 0xfe, 0x0c, 0x60, 0x71, 0xe8, 0xfa, 0xfe,
	0x1c, 0xbd, 0x84, 0xbb, 0x82, 0x09, 0xd7, 0x1f, 0x47, 0xec, 0x3d, 0x89, 0x15, 0xa0, 0x83, 0xda,
	0x4e, 0xeb, 0xd1, 0xf7, 0xeb, 0xa3, 0x93, 0x29, 0x15, 0xb3, 0x8b, 0x89, 0xe1, 0xb1, 0xc0, 0xf4,
	0x18, 0x0f, 0x18, 0xcf, 0x6e, 0x75, 0x8e, 0xdf, 0xc9, 0x48, 0xc3, 0x0e, 0x85, 0x03, 0x53, 0xbd,
	0x9f, 0xd8, 0xe8, 0x39, 0xdc, 0xf1, 0x58, 0x78, 0x4e, 0xe3, 0x80, 0x60, 0x25, 0xff, 0xdf, 0x51,
	0x7f, 0xe4, 0xe3, 0x8f, 0x05, 0x58, 0xe8, 0x33, 0xdf, 0x47, 0x87, 0xb0, 0xe8, 0xcd, 0x5c, 0x1a,
	0xca, 0xca, 0x1c, 0xf9, 0x82, 0xca, 0x30, 0x4f, 0xe5, 0x17, 0x0a, 0x4e, 0x9e, 0x62, 0x74, 0x00,
	0x8b, 0x2c, 0x1a, 0x53, 0xac, 0x6c, 0xa5, 0x47, 0x05, 0x16, 0xd9, 0x18, 0x9d, 0xc1, 0x3b, 0x51,
	0xcc, 0x22, 0xc6, 0x49, 0xac, 0x14, 0x74, 0x50, 0xbb, 0xdb, 0x6a, 0xfc, 0xbc, 0x3e, 0xaa, 0xdf,
	0xa2, 0x98, 0xd7, 0xae, 0xdf, 0xc4, 0x38, 0x26, 0x9c, 0x3b, 0xbf, 0x23, 0x90, 0x05, 0x4b, 0x5c,
	0xb8, 0xe2, 0x82, 0x2b, 0x45, 0x1d, 0xd4, 0xca, 0xa7, 0x75, 0xe3, 0xa6, 0x29, 0x19, 0xc9, 0x1f,
	0x18, 0x83, 0x54, 0x72, 0x32, 0x19, 0x3d, 0x85, 0x45, 0x91, 0x74, 0x5e, 0x29, 0xe9, 0xa0, 0xb6,
	0x7b, 0x5a, 0xbd, 0x39, 0x25, 0x1d, 0x94, 0x23, 0x2d, 0xd4, 0x84, 0xdb, 0x91, 0x3b, 0xf7, 0x99,
	0x8b, 0x95, 0xed, 0xdb, 0x06, 0x58, 0xc9, 0xd5, 0xd9, 0x78, 0xc7, 0x5f, 0x00, 0x2c, 0xc9, 0xa2,
	0x50, 0x1d, 0xa2, 0xc1, 0xb0, 0x39, 0x1c, 0x0d, 0xc6, 0xa3, 0xde, 0xa0, 0x6f, 0xb5, 0xed, 0xae,
	0x6d, 0x75, 0x2a, 0x39, 0xf5, 0xfe, 0x62, 0xa9, 0xef, 0x4b, 0x66, 0x14, 0xf2, 0x88, 0x78, 0xf4,
	0x9c, 0x12, 0x8c, 0x1e, 0xc0, 0x72, 0x86, 0xf7, 0xad, 0x5e, 0xc7, 0xee, 0x3d, 0xab, 0x00, 0x75,
	0x7f, 0xb1, 0xd4, 0xef, 0x49, 0xb4, 0x4f, 0x42, 0x4c, 0xc3, 0x29, 0x7a, 0x08, 0x2b, 0x19, 0xd6,
	0x7e, 0xd5, 0xeb, 0xda, 0xce, 0x99, 0xd5, 0xa9, 0xe4, 0xd5, 0x83, 0xc5, 0x52, 0xdf, 0x93, 0x60,
	0x7b, 0x33, 0x67, 0x54, 0x85, 0x7b, 0x19, 0xea, 0x58, 0x2f, 0xac, 0xf6, 0xd0, 0xea, 0x54, 0xb6,
	0x54, 0xb4, 0x58, 0xea, 0xe5, 0xac, 0x6d, 0xe4, 0x2d, 0xf1, 0x04, 0xc1, 0xad, 0xee, 0xd7, 0x95,
	0x06, 0xae, 0x56, 0x1a, 0xf8, 0xb1, 0xd2, 0xc0, 0xa7, 0xb5, 0x96, 0xbb, 0x5a, 0x6b, 0xb9, 0x6f,
	0x6b, 0x2d, 0xf7, 0xe6, 0xf1, 0x5f, 0x03, 0x4d, 0x5a, 0x51, 0x97, 0xbd, 0x30, 0x37, 0xbb, 0xf0,
	0x21, 0xdb, 0x86, 0x74, 0xb4, 0x93, 0x52, 0xba, 0x00, 0x4f, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x2b, 0x81, 0x10, 0x57, 0x8b, 0x03, 0x00, 0x00,
}

func (m *Tally) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tally) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tally) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confirmed != nil {
		{
			size := m.Confirmed.Size()
			i -= size
			if _, err := m.Confirmed.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTypesPoll(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TotalPower != nil {
		{
			size := m.TotalPower.Size()
			i -= size
			if _, err := m.TotalPower.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTypesPoll(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Poll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Poll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Poll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesPoll(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Tally != nil {
		{
			size, err := m.Tally.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesPoll(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintTypesPoll(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTypesPoll(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x22
	}
	if m.OpId != 0 {
		i = encodeVarintTypesPoll(dAtA, i, uint64(m.OpId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTypesPoll(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypesPoll(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypesPoll(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesPoll(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tally) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalPower != nil {
		l = m.TotalPower.Size()
		n += 1 + l + sovTypesPoll(uint64(l))
	}
	if m.Confirmed != nil {
		l = m.Confirmed.Size()
		n += 1 + l + sovTypesPoll(uint64(l))
	}
	return n
}

func (m *Poll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypesPoll(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTypesPoll(uint64(m.Id))
	}
	if m.OpId != 0 {
		n += 1 + sovTypesPoll(uint64(m.OpId))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTypesPoll(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypesPoll(uint64(m.Status))
	}
	if m.Tally != nil {
		l = m.Tally.Size()
		n += 1 + l + sovTypesPoll(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovTypesPoll(uint64(l))
	}
	return n
}

func sovTypesPoll(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesPoll(x uint64) (n int) {
	return sovTypesPoll(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tally) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesPoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tally: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tally: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.TotalPower = &v
			if err := m.TotalPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Confirmed = &v
			if err := m.Confirmed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesPoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesPoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Poll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesPoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Poll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Poll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			m.OpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesPoll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Poll_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tally", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesPoll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tally == nil {
				m.Tally = &Tally{}
			}
			if err := m.Tally.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesPoll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &Event{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesPoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesPoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesPoll(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesPoll
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesPoll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesPoll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesPoll
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesPoll
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesPoll
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesPoll        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesPoll          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesPoll = fmt.Errorf("proto: unexpected end of group")
)
