// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/event/v1beta1/server/server.proto

package server

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("mitosis/event/v1beta1/server/server.proto", fileDescriptor_8493cefcc4fba2c7)
}

var fileDescriptor_8493cefcc4fba2c7 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x3f, 0x4b, 0xc3, 0x40,
	0x18, 0xc6, 0x1b, 0x8b, 0x05, 0x23, 0x2e, 0x37, 0x06, 0x09, 0xa8, 0x83, 0x14, 0xec, 0xc5, 0xd6,
	0xc5, 0x7f, 0x8b, 0x82, 0x38, 0x15, 0x6a, 0x05, 0x07, 0x17, 0xb9, 0xc8, 0xcb, 0xf5, 0xc0, 0xdc,
	0xa5, 0xf7, 0x5e, 0x6a, 0x33, 0xb8, 0xb8, 0x17, 0x04, 0xbf, 0x87, 0xb3, 0x1f, 0xc1, 0xb1, 0xe0,
	0xe2, 0x28, 0xad, 0x1f, 0x44, 0x92, 0x8b, 0x42, 0x41, 0xa4, 0xe9, 0x74, 0xcb, 0xf3, 0xfb, 0x3d,
	0x0f, 0xdc, 0xeb, 0xd6, 0x23, 0x61, 0x14, 0x0a, 0x0c, 0x60, 0x00, 0xd2, 0x04, 0x83, 0x66, 0x08,
	0x86, 0x35, 0x03, 0x04, 0x3d, 0x00, 0x5d, 0x3c, 0x34, 0xd6, 0xca, 0x28, 0xb2, 0x1d, 0x31, 0x99,
	0x9a, 0x9e, 0x90, 0x1c, 0x69, 0x41, 0xd1, 0x22, 0x4f, 0x73, 0x9a, 0xda, 0xb8, 0xb7, 0xce, 0x95,
	0xe2, 0x77, 0x10, 0xb0, 0x58, 0x04, 0x4c, 0x4a, 0x65, 0x98, 0x11, 0x4a, 0xa2, 0xd5, 0x78, 0x3b,
	0xff, 0x36, 0x9a, 0x34, 0x06, 0xbc, 0x89, 0x90, 0x17, 0x69, 0x3a, 0x47, 0xba, 0x9f, 0x80, 0x4e,
	0x6d, 0xbe, 0x35, 0xaa, 0xba, 0xd5, 0x36, 0x72, 0xf2, 0xe0, 0xae, 0x5e, 0x26, 0x61, 0x24, 0xcc,
	0x59, 0xc6, 0x91, 0x16, 0x9d, 0x73, 0x3c, 0x6d, 0x23, 0xb7, 0xa0, 0x77, 0x58, 0x9e, 0xe9, 0x02,
	0xc6, 0x4a, 0x22, 0x90, 0x7b, 0x77, 0xe5, 0x4a, 0x19, 0xb0, 0xe5, 0xbb, 0x65, 0x44, 0x19, 0xe6,
	0xed, 0x97, 0x25, 0x7e, 0x8b, 0x47, 0x8e, 0xbb, 0xd6, 0x05, 0x2e, 0xd0, 0x80, 0xee, 0x68, 0x35,
	0x4c, 0xc9, 0x41, 0x19, 0xd7, 0x0c, 0xea, 0x9d, 0x2c, 0x8c, 0xfe, 0xec, 0x69, 0xbd, 0x3a, 0xee,
	0xf2, 0x45, 0xf6, 0x3f, 0xe4, 0xc5, 0x71, 0x6b, 0x1d, 0xa6, 0x59, 0x84, 0xe4, 0x68, 0x6e, 0x6f,
	0x8e, 0x5a, 0xaa, 0x0b, 0xfd, 0x04, 0xd0, 0x78, 0xc7, 0x8b, 0xc1, 0x76, 0xcf, 0x66, 0xfd, 0xf1,
	0xfd, 0xeb, 0x79, 0x69, 0x8b, 0x6c, 0x04, 0x99, 0xa5, 0x61, 0x35, 0xc1, 0xec, 0x91, 0xc5, 0x39,
	0x72, 0x7a, 0xfe, 0x36, 0xf1, 0x9d, 0xf1, 0xc4, 0x77, 0x3e, 0x27, 0xbe, 0xf3, 0x34, 0xf5, 0x2b,
	0xe3, 0xa9, 0x5f, 0xf9, 0x98, 0xfa, 0x95, 0xeb, 0x06, 0x17, 0xa6, 0x97, 0x84, 0xf4, 0x56, 0x45,
	0x7f, 0x6a, 0x86, 0x85, 0xc8, 0xee, 0x08, 0x6b, 0xf9, 0x69, 0xee, 0x7d, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x39, 0xd6, 0x51, 0x7a, 0x6c, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Submits / Initiates vote for external event.
	SubmitEvent(ctx context.Context, in *MsgSubmit, opts ...grpc.CallOption) (*MsgSubmitResponse, error)
	// Votes to submitted external event.
	VoteEvent(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error)
	// Registers an address of proxy account to submit / vote external event rather than execute with validator account itself.
	RegisterProxy(ctx context.Context, in *MsgRegisterProxy, opts ...grpc.CallOption) (*MsgRegisterProxyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SubmitEvent(ctx context.Context, in *MsgSubmit, opts ...grpc.CallOption) (*MsgSubmitResponse, error) {
	out := new(MsgSubmitResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Msg/SubmitEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteEvent(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error) {
	out := new(MsgVoteResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Msg/VoteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterProxy(ctx context.Context, in *MsgRegisterProxy, opts ...grpc.CallOption) (*MsgRegisterProxyResponse, error) {
	out := new(MsgRegisterProxyResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Msg/RegisterProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Submits / Initiates vote for external event.
	SubmitEvent(context.Context, *MsgSubmit) (*MsgSubmitResponse, error)
	// Votes to submitted external event.
	VoteEvent(context.Context, *MsgVote) (*MsgVoteResponse, error)
	// Registers an address of proxy account to submit / vote external event rather than execute with validator account itself.
	RegisterProxy(context.Context, *MsgRegisterProxy) (*MsgRegisterProxyResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SubmitEvent(ctx context.Context, req *MsgSubmit) (*MsgSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitEvent not implemented")
}
func (*UnimplementedMsgServer) VoteEvent(ctx context.Context, req *MsgVote) (*MsgVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteEvent not implemented")
}
func (*UnimplementedMsgServer) RegisterProxy(ctx context.Context, req *MsgRegisterProxy) (*MsgRegisterProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProxy not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SubmitEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Msg/SubmitEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitEvent(ctx, req.(*MsgSubmit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Msg/VoteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteEvent(ctx, req.(*MsgVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Msg/RegisterProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterProxy(ctx, req.(*MsgRegisterProxy))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manythings.mitosis.v1beta1.event.server.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitEvent",
			Handler:    _Msg_SubmitEvent_Handler,
		},
		{
			MethodName: "VoteEvent",
			Handler:    _Msg_VoteEvent_Handler,
		},
		{
			MethodName: "RegisterProxy",
			Handler:    _Msg_RegisterProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mitosis/event/v1beta1/server/server.proto",
}

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manythings.mitosis.v1beta1.event.server.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mitosis/event/v1beta1/server/server.proto",
}
