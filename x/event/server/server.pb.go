// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/event/v1beta1/server/server.proto

package server

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("mitosis/event/v1beta1/server/server.proto", fileDescriptor_8493cefcc4fba2c7)
}

var fileDescriptor_8493cefcc4fba2c7 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0xb3, 0x9a, 0x46, 0x18, 0xf0, 0x32, 0xc7, 0x45, 0x57, 0x11, 0xad, 0x7f, 0x68, 0x67,
	0xda, 0x54, 0x45, 0xad, 0x0a, 0xea, 0xc1, 0x53, 0x21, 0x56, 0xf0, 0xe0, 0x45, 0x26, 0xed, 0xcb,
	0x66, 0x60, 0x76, 0x67, 0x9d, 0x77, 0x12, 0x12, 0x42, 0x2f, 0xe2, 0x49, 0x10, 0x04, 0x3f, 0x82,
	0x07, 0x05, 0xbf, 0x88, 0xc7, 0x82, 0x17, 0xf1, 0x24, 0x89, 0x1f, 0x44, 0x76, 0x66, 0xb3, 0x22,
	0xd8, 0x90, 0xd9, 0xd3, 0x5e, 0x9e, 0xdf, 0xf3, 0xfe, 0x18, 0x1e, 0x96, 0x5c, 0xcf, 0xa4, 0xd5,
	0x28, 0x91, 0xc3, 0x08, 0x72, 0xcb, 0x47, 0xdb, 0x7d, 0xb0, 0x62, 0x9b, 0x23, 0x98, 0x11, 0x98,
	0xea, 0xc3, 0x0a, 0xa3, 0xad, 0xa6, 0x57, 0x33, 0x91, 0x4f, 0xec, 0x40, 0xe6, 0x29, 0xb2, 0x8a,
	0x62, 0x55, 0x9e, 0x39, 0x9a, 0xf9, 0x78, 0x7c, 0x2e, 0xd5, 0x3a, 0x55, 0xc0, 0x45, 0x21, 0xb9,
	0xc8, 0x73, 0x6d, 0x85, 0x95, 0x3a, 0x47, 0x5f, 0x13, 0x6f, 0x2c, 0xbd, 0x68, 0x27, 0x05, 0xe0,
	0xab, 0x0c, 0xd3, 0x2a, 0xcd, 0x56, 0x48, 0xbf, 0x1e, 0x82, 0x99, 0xf8, 0x7c, 0xf7, 0x5d, 0x9b,
	0x9c, 0xde, 0xc3, 0x94, 0x8e, 0x49, 0xe7, 0xf9, 0xb0, 0x9f, 0x49, 0x4b, 0xbb, 0x6c, 0x45, 0x6f,
	0xb6, 0x87, 0xa9, 0x67, 0xe2, 0x7b, 0xe1, 0xcc, 0x3e, 0x60, 0xa1, 0x73, 0x04, 0x6a, 0x48, 0xfb,
	0x85, 0xb6, 0x40, 0xb7, 0x42, 0x3a, 0x4a, 0x22, 0xbe, 0x13, 0x4a, 0xd4, 0x37, 0xdf, 0x47, 0xe4,
	0xec, 0x3e, 0xa4, 0x12, 0x2d, 0x98, 0x9e, 0xd1, 0xe3, 0x09, 0xbd, 0x1b, 0xd2, 0xf5, 0x0f, 0x1a,
	0x3f, 0x6a, 0x8c, 0xd6, 0x3e, 0x6f, 0x23, 0x42, 0x9e, 0x28, 0x10, 0x95, 0xcc, 0xed, 0x90, 0xc6,
	0xbf, 0x5c, 0xfc, 0xb0, 0x19, 0xb7, 0xd0, 0xe8, 0xfe, 0xec, 0x90, 0xb5, 0x67, 0xe5, 0x38, 0xe8,
	0xa7, 0x88, 0x74, 0x7a, 0xc2, 0x88, 0x0c, 0xe9, 0xcd, 0x95, 0x4b, 0x1d, 0xea, 0xa9, 0xf8, 0x7e,
	0x13, 0x6a, 0x21, 0x72, 0xe9, 0xca, 0x9b, 0xef, 0xbf, 0x3f, 0x9e, 0xba, 0x40, 0xcf, 0xf3, 0xff,
	0xcf, 0xb9, 0xf0, 0x6a, 0x5f, 0x22, 0xd2, 0xee, 0x69, 0xa5, 0x02, 0x36, 0xeb, 0xaf, 0x69, 0xa5,
	0x02, 0x36, 0x5b, 0x33, 0xb5, 0xdf, 0x96, 0xf3, 0xbb, 0x41, 0xaf, 0x9d, 0xe4, 0xa7, 0x95, 0xe2,
	0xd3, 0x83, 0x81, 0x90, 0xf9, 0x11, 0x9f, 0xca, 0xc3, 0x23, 0xfa, 0x39, 0x22, 0x6b, 0x65, 0x05,
	0xd2, 0x9d, 0xf0, 0xbb, 0x18, 0xef, 0x36, 0x80, 0x6a, 0xdb, 0x0d, 0x67, 0xbb, 0x4e, 0x2f, 0x2f,
	0xb1, 0xc5, 0x85, 0x2e, 0xfd, 0x5a, 0x9a, 0xba, 0x19, 0x86, 0x9a, 0xba, 0x0d, 0xee, 0x36, 0x80,
	0x56, 0x7f, 0xd7, 0x32, 0xcd, 0xa7, 0x23, 0xa1, 0xe4, 0xa1, 0xb0, 0xda, 0xb8, 0x77, 0x3d, 0x53,
	0x76, 0x48, 0x40, 0x7a, 0x2b, 0xfc, 0xb4, 0x04, 0x8c, 0x1f, 0x34, 0xc2, 0x6a, 0xe7, 0x75, 0xe7,
	0x7c, 0x91, 0x26, 0x4b, 0x9c, 0x25, 0xe0, 0xe3, 0xa7, 0xdf, 0x66, 0x49, 0x74, 0x3c, 0x4b, 0xa2,
	0x5f, 0xb3, 0x24, 0xfa, 0x30, 0x4f, 0x5a, 0xc7, 0xf3, 0xa4, 0xf5, 0x63, 0x9e, 0xb4, 0x5e, 0x6e,
	0xa6, 0xd2, 0x0e, 0x86, 0x7d, 0x76, 0xa0, 0x33, 0x5e, 0xaa, 0x6c, 0x7a, 0x97, 0xba, 0x6f, 0x5c,
	0x35, 0x7a, 0x8b, 0x7e, 0xc7, 0xfd, 0xb9, 0x77, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x05, 0x40,
	0x61, 0x80, 0x8b, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Submits / Initiates vote for external event.
	Submit(ctx context.Context, in *MsgSubmit, opts ...grpc.CallOption) (*MsgSubmitResponse, error)
	// Votes to submitted external event.
	Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error)
	// Registers an address of proxy account to submit / vote external event rather than execute with validator account itself.
	RegisterProxy(ctx context.Context, in *MsgRegisterProxy, opts ...grpc.CallOption) (*MsgRegisterProxyResponse, error)
	// Clears proxy account info from a validator
	ClearProxy(ctx context.Context, in *MsgClearProxy, opts ...grpc.CallOption) (*MsgClearProxyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Submit(ctx context.Context, in *MsgSubmit, opts ...grpc.CallOption) (*MsgSubmitResponse, error) {
	out := new(MsgSubmitResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Msg/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error) {
	out := new(MsgVoteResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Msg/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterProxy(ctx context.Context, in *MsgRegisterProxy, opts ...grpc.CallOption) (*MsgRegisterProxyResponse, error) {
	out := new(MsgRegisterProxyResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Msg/RegisterProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClearProxy(ctx context.Context, in *MsgClearProxy, opts ...grpc.CallOption) (*MsgClearProxyResponse, error) {
	out := new(MsgClearProxyResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Msg/ClearProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Submits / Initiates vote for external event.
	Submit(context.Context, *MsgSubmit) (*MsgSubmitResponse, error)
	// Votes to submitted external event.
	Vote(context.Context, *MsgVote) (*MsgVoteResponse, error)
	// Registers an address of proxy account to submit / vote external event rather than execute with validator account itself.
	RegisterProxy(context.Context, *MsgRegisterProxy) (*MsgRegisterProxyResponse, error)
	// Clears proxy account info from a validator
	ClearProxy(context.Context, *MsgClearProxy) (*MsgClearProxyResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Submit(ctx context.Context, req *MsgSubmit) (*MsgSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (*UnimplementedMsgServer) Vote(ctx context.Context, req *MsgVote) (*MsgVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedMsgServer) RegisterProxy(ctx context.Context, req *MsgRegisterProxy) (*MsgRegisterProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProxy not implemented")
}
func (*UnimplementedMsgServer) ClearProxy(ctx context.Context, req *MsgClearProxy) (*MsgClearProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearProxy not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Msg/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Submit(ctx, req.(*MsgSubmit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Msg/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Vote(ctx, req.(*MsgVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Msg/RegisterProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterProxy(ctx, req.(*MsgRegisterProxy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClearProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClearProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClearProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Msg/ClearProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClearProxy(ctx, req.(*MsgClearProxy))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manythings.mitosis.v1beta1.event.server.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _Msg_Submit_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Msg_Vote_Handler,
		},
		{
			MethodName: "RegisterProxy",
			Handler:    _Msg_RegisterProxy_Handler,
		},
		{
			MethodName: "ClearProxy",
			Handler:    _Msg_ClearProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mitosis/event/v1beta1/server/server.proto",
}

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries the parameters of the module.
	Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Get poll
	Poll(ctx context.Context, in *QueryPoll, opts ...grpc.CallOption) (*QueryPollResponse, error)
	// List polls
	Polls(ctx context.Context, in *QueryPolls, opts ...grpc.CallOption) (*QueryPollsResponse, error)
	// Get proxy
	Proxy(ctx context.Context, in *QueryProxy, opts ...grpc.CallOption) (*QueryProxyResponse, error)
	// List proxies
	Proxies(ctx context.Context, in *QueryProxies, opts ...grpc.CallOption) (*QueryProxiesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Poll(ctx context.Context, in *QueryPoll, opts ...grpc.CallOption) (*QueryPollResponse, error) {
	out := new(QueryPollResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Query/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Polls(ctx context.Context, in *QueryPolls, opts ...grpc.CallOption) (*QueryPollsResponse, error) {
	out := new(QueryPollsResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Query/Polls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proxy(ctx context.Context, in *QueryProxy, opts ...grpc.CallOption) (*QueryProxyResponse, error) {
	out := new(QueryProxyResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Query/Proxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proxies(ctx context.Context, in *QueryProxies, opts ...grpc.CallOption) (*QueryProxiesResponse, error) {
	out := new(QueryProxiesResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.event.server.Query/Proxies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries the parameters of the module.
	Params(context.Context, *QueryParams) (*QueryParamsResponse, error)
	// Get poll
	Poll(context.Context, *QueryPoll) (*QueryPollResponse, error)
	// List polls
	Polls(context.Context, *QueryPolls) (*QueryPollsResponse, error)
	// Get proxy
	Proxy(context.Context, *QueryProxy) (*QueryProxyResponse, error)
	// List proxies
	Proxies(context.Context, *QueryProxies) (*QueryProxiesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParams) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Poll(ctx context.Context, req *QueryPoll) (*QueryPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedQueryServer) Polls(ctx context.Context, req *QueryPolls) (*QueryPollsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Polls not implemented")
}
func (*UnimplementedQueryServer) Proxy(ctx context.Context, req *QueryProxy) (*QueryProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}
func (*UnimplementedQueryServer) Proxies(ctx context.Context, req *QueryProxies) (*QueryProxiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proxies not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Query/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Poll(ctx, req.(*QueryPoll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Polls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPolls)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Polls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Query/Polls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Polls(ctx, req.(*QueryPolls))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Query/Proxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proxy(ctx, req.(*QueryProxy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proxies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProxies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proxies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.event.server.Query/Proxies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proxies(ctx, req.(*QueryProxies))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manythings.mitosis.v1beta1.event.server.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Query_Poll_Handler,
		},
		{
			MethodName: "Polls",
			Handler:    _Query_Polls_Handler,
		},
		{
			MethodName: "Proxy",
			Handler:    _Query_Proxy_Handler,
		},
		{
			MethodName: "Proxies",
			Handler:    _Query_Proxies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mitosis/event/v1beta1/server/server.proto",
}
