// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/event/v1beta1/server/types_msg.proto

package server

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/many-things/mitosis/x/event/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Submit messages to vote
type MsgSubmitEvent struct {
	// Sender address
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	// Chain identifier
	Chain string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	// Events
	Events []*types.Event `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *MsgSubmitEvent) Reset()         { *m = MsgSubmitEvent{} }
func (m *MsgSubmitEvent) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitEvent) ProtoMessage()    {}
func (*MsgSubmitEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a71494531fa4d26, []int{0}
}
func (m *MsgSubmitEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitEvent.Merge(m, src)
}
func (m *MsgSubmitEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitEvent proto.InternalMessageInfo

func (m *MsgSubmitEvent) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *MsgSubmitEvent) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgSubmitEvent) GetEvents() []*types.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

// Response of [MsgSubmit]
type MsgSubmitResponse struct {
	News  []uint64 `protobuf:"varint,1,rep,packed,name=news,proto3" json:"news,omitempty"`
	Voted []uint64 `protobuf:"varint,2,rep,packed,name=voted,proto3" json:"voted,omitempty"`
}

func (m *MsgSubmitResponse) Reset()         { *m = MsgSubmitResponse{} }
func (m *MsgSubmitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitResponse) ProtoMessage()    {}
func (*MsgSubmitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a71494531fa4d26, []int{1}
}
func (m *MsgSubmitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitResponse.Merge(m, src)
}
func (m *MsgSubmitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitResponse proto.InternalMessageInfo

func (m *MsgSubmitResponse) GetNews() []uint64 {
	if m != nil {
		return m.News
	}
	return nil
}

func (m *MsgSubmitResponse) GetVoted() []uint64 {
	if m != nil {
		return m.Voted
	}
	return nil
}

// Set proxy message
type MsgRegisterProxy struct {
	// Validator address
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=validator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"validator,omitempty"`
	// Proxy account address
	ProxyAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=proxy_account,json=proxyAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proxy_account,omitempty"`
}

func (m *MsgRegisterProxy) Reset()         { *m = MsgRegisterProxy{} }
func (m *MsgRegisterProxy) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterProxy) ProtoMessage()    {}
func (*MsgRegisterProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a71494531fa4d26, []int{2}
}
func (m *MsgRegisterProxy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterProxy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterProxy.Merge(m, src)
}
func (m *MsgRegisterProxy) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterProxy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterProxy proto.InternalMessageInfo

func (m *MsgRegisterProxy) GetValidator() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *MsgRegisterProxy) GetProxyAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ProxyAccount
	}
	return nil
}

// Response of [MsgRegisterProxy]
type MsgRegisterProxyResponse struct {
}

func (m *MsgRegisterProxyResponse) Reset()         { *m = MsgRegisterProxyResponse{} }
func (m *MsgRegisterProxyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterProxyResponse) ProtoMessage()    {}
func (*MsgRegisterProxyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a71494531fa4d26, []int{3}
}
func (m *MsgRegisterProxyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterProxyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterProxyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterProxyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterProxyResponse.Merge(m, src)
}
func (m *MsgRegisterProxyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterProxyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterProxyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterProxyResponse proto.InternalMessageInfo

// Clear proxy message
type MsgClearProxy struct {
	// Validator address
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=validator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"validator,omitempty"`
}

func (m *MsgClearProxy) Reset()         { *m = MsgClearProxy{} }
func (m *MsgClearProxy) String() string { return proto.CompactTextString(m) }
func (*MsgClearProxy) ProtoMessage()    {}
func (*MsgClearProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a71494531fa4d26, []int{4}
}
func (m *MsgClearProxy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClearProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClearProxy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClearProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClearProxy.Merge(m, src)
}
func (m *MsgClearProxy) XXX_Size() int {
	return m.Size()
}
func (m *MsgClearProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClearProxy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClearProxy proto.InternalMessageInfo

func (m *MsgClearProxy) GetValidator() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Validator
	}
	return nil
}

// Response of [MsgClearProxy]
type MsgClearProxyResponse struct {
}

func (m *MsgClearProxyResponse) Reset()         { *m = MsgClearProxyResponse{} }
func (m *MsgClearProxyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClearProxyResponse) ProtoMessage()    {}
func (*MsgClearProxyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a71494531fa4d26, []int{5}
}
func (m *MsgClearProxyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClearProxyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClearProxyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClearProxyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClearProxyResponse.Merge(m, src)
}
func (m *MsgClearProxyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClearProxyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClearProxyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClearProxyResponse proto.InternalMessageInfo

// Register chain info
type MsgRegisterChain struct {
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	Chain  string                                        `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *MsgRegisterChain) Reset()         { *m = MsgRegisterChain{} }
func (m *MsgRegisterChain) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterChain) ProtoMessage()    {}
func (*MsgRegisterChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a71494531fa4d26, []int{6}
}
func (m *MsgRegisterChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterChain.Merge(m, src)
}
func (m *MsgRegisterChain) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterChain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterChain proto.InternalMessageInfo

func (m *MsgRegisterChain) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *MsgRegisterChain) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

// Response of [MsgRegisterChain]
type MsgRegisterChainResponse struct {
	ChainPrefix []byte `protobuf:"bytes,1,opt,name=chain_prefix,json=chainPrefix,proto3" json:"chain_prefix,omitempty"`
}

func (m *MsgRegisterChainResponse) Reset()         { *m = MsgRegisterChainResponse{} }
func (m *MsgRegisterChainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterChainResponse) ProtoMessage()    {}
func (*MsgRegisterChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a71494531fa4d26, []int{7}
}
func (m *MsgRegisterChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterChainResponse.Merge(m, src)
}
func (m *MsgRegisterChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterChainResponse proto.InternalMessageInfo

func (m *MsgRegisterChainResponse) GetChainPrefix() []byte {
	if m != nil {
		return m.ChainPrefix
	}
	return nil
}

// Unregisters chain info
type MsgUnregisterChain struct {
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	Chain  string                                        `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *MsgUnregisterChain) Reset()         { *m = MsgUnregisterChain{} }
func (m *MsgUnregisterChain) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterChain) ProtoMessage()    {}
func (*MsgUnregisterChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a71494531fa4d26, []int{8}
}
func (m *MsgUnregisterChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterChain.Merge(m, src)
}
func (m *MsgUnregisterChain) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterChain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterChain proto.InternalMessageInfo

func (m *MsgUnregisterChain) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *MsgUnregisterChain) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

// Response of [MsgUnregisterChain]
type MsgUnregisterChainResponse struct {
}

func (m *MsgUnregisterChainResponse) Reset()         { *m = MsgUnregisterChainResponse{} }
func (m *MsgUnregisterChainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterChainResponse) ProtoMessage()    {}
func (*MsgUnregisterChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a71494531fa4d26, []int{9}
}
func (m *MsgUnregisterChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterChainResponse.Merge(m, src)
}
func (m *MsgUnregisterChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterChainResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSubmitEvent)(nil), "manythings.mitosis.v1beta1.event.server.MsgSubmitEvent")
	proto.RegisterType((*MsgSubmitResponse)(nil), "manythings.mitosis.v1beta1.event.server.MsgSubmitResponse")
	proto.RegisterType((*MsgRegisterProxy)(nil), "manythings.mitosis.v1beta1.event.server.MsgRegisterProxy")
	proto.RegisterType((*MsgRegisterProxyResponse)(nil), "manythings.mitosis.v1beta1.event.server.MsgRegisterProxyResponse")
	proto.RegisterType((*MsgClearProxy)(nil), "manythings.mitosis.v1beta1.event.server.MsgClearProxy")
	proto.RegisterType((*MsgClearProxyResponse)(nil), "manythings.mitosis.v1beta1.event.server.MsgClearProxyResponse")
	proto.RegisterType((*MsgRegisterChain)(nil), "manythings.mitosis.v1beta1.event.server.MsgRegisterChain")
	proto.RegisterType((*MsgRegisterChainResponse)(nil), "manythings.mitosis.v1beta1.event.server.MsgRegisterChainResponse")
	proto.RegisterType((*MsgUnregisterChain)(nil), "manythings.mitosis.v1beta1.event.server.MsgUnregisterChain")
	proto.RegisterType((*MsgUnregisterChainResponse)(nil), "manythings.mitosis.v1beta1.event.server.MsgUnregisterChainResponse")
}

func init() {
	proto.RegisterFile("mitosis/event/v1beta1/server/types_msg.proto", fileDescriptor_4a71494531fa4d26)
}

var fileDescriptor_4a71494531fa4d26 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0xaf, 0xd7, 0x51, 0x69, 0x5e, 0x87, 0xc0, 0x1a, 0x22, 0xaa, 0x50, 0x28, 0xb9, 0xb4, 0x07,
	0x9a, 0xa8, 0x70, 0x9e, 0x50, 0x37, 0x21, 0xc4, 0xa1, 0x62, 0x0a, 0x62, 0x07, 0x2e, 0x25, 0x4d,
	0x1e, 0xae, 0x45, 0x63, 0x57, 0x7e, 0x6e, 0x68, 0xbf, 0x05, 0x9f, 0x85, 0x2b, 0x5f, 0x80, 0xe3,
	0x8e, 0x9c, 0x10, 0x6a, 0xbf, 0x05, 0x27, 0x14, 0x3b, 0x2d, 0x14, 0x90, 0x10, 0x48, 0xe3, 0x14,
	0xfb, 0xc5, 0xbf, 0x3f, 0xef, 0xc5, 0xbf, 0xd0, 0xfb, 0xb9, 0x30, 0x0a, 0x05, 0x46, 0x50, 0x80,
	0x34, 0x51, 0xd1, 0x1f, 0x83, 0x49, 0xfa, 0x11, 0x82, 0x2e, 0x40, 0x47, 0x66, 0x39, 0x03, 0x1c,
	0xe5, 0xc8, 0xc3, 0x99, 0x56, 0x46, 0xb1, 0x4e, 0x9e, 0xc8, 0xa5, 0x99, 0x08, 0xc9, 0x31, 0xac,
	0x80, 0x61, 0x05, 0x09, 0x2d, 0x41, 0xe8, 0x80, 0xad, 0x63, 0xae, 0xb8, 0xb2, 0x98, 0xa8, 0x5c,
	0x39, 0x78, 0xab, 0xf3, 0x7b, 0x31, 0xa7, 0xe2, 0xf0, 0xf6, 0x60, 0xf0, 0x9e, 0xd0, 0xeb, 0x43,
	0xe4, 0xcf, 0xe7, 0xe3, 0x5c, 0x98, 0xc7, 0xe5, 0x0b, 0xf6, 0x94, 0x36, 0x10, 0x64, 0x06, 0xda,
	0x23, 0x6d, 0xd2, 0x6d, 0x9e, 0xf6, 0xbf, 0x7e, 0xbe, 0xdb, 0xe3, 0xc2, 0x4c, 0xe6, 0xe3, 0x30,
	0x55, 0x79, 0x94, 0x2a, 0xcc, 0x15, 0x56, 0x8f, 0x1e, 0x66, 0x6f, 0x1c, 0x6d, 0x38, 0x48, 0xd3,
	0x41, 0x96, 0x69, 0x40, 0x8c, 0x2b, 0x02, 0x76, 0x4c, 0xaf, 0xa5, 0x93, 0x44, 0x48, 0x6f, 0xaf,
	0x4d, 0xba, 0x07, 0xb1, 0xdb, 0xb0, 0x47, 0xb4, 0x61, 0x2d, 0xa0, 0x57, 0x6f, 0xd7, 0xbb, 0x87,
	0x0f, 0x3a, 0xe1, 0x1f, 0x9b, 0xb5, 0xce, 0xe2, 0x0a, 0x16, 0x9c, 0xd0, 0x9b, 0x5b, 0xcf, 0x31,
	0xe0, 0x4c, 0x49, 0x04, 0xc6, 0xe8, 0xbe, 0x84, 0xb7, 0xe8, 0x91, 0x76, 0xbd, 0xbb, 0x1f, 0xdb,
	0x75, 0xa9, 0x5f, 0x28, 0x03, 0x99, 0xb7, 0x67, 0x8b, 0x6e, 0x13, 0x7c, 0x20, 0xf4, 0xc6, 0x10,
	0x79, 0x0c, 0x5c, 0xa0, 0x01, 0x7d, 0xae, 0xd5, 0x62, 0xc9, 0x9e, 0xd1, 0x83, 0x22, 0x99, 0x8a,
	0x2c, 0x31, 0xea, 0x6f, 0x1b, 0xbf, 0x48, 0xa6, 0x9b, 0xc6, 0xbf, 0x73, 0xb0, 0x0b, 0x7a, 0x34,
	0x2b, 0x99, 0x47, 0x49, 0x9a, 0xaa, 0xb9, 0x34, 0x76, 0x06, 0xff, 0x34, 0xcd, 0xa6, 0xe5, 0x19,
	0x38, 0x9a, 0xa0, 0x45, 0xbd, 0x9f, 0xcd, 0x6f, 0x66, 0x10, 0xbc, 0xa2, 0x47, 0x43, 0xe4, 0x67,
	0x53, 0x48, 0xae, 0xa8, 0xab, 0xe0, 0x36, 0xbd, 0xb5, 0xa3, 0xb0, 0x95, 0xc6, 0x9d, 0x99, 0x9e,
	0xd9, 0x0f, 0x7d, 0xd5, 0x37, 0x29, 0x38, 0xd9, 0x99, 0x85, 0x15, 0xdd, 0xde, 0x87, 0x7b, 0xb4,
	0x69, 0x0f, 0x8d, 0x66, 0x1a, 0x5e, 0x8b, 0x85, 0xb3, 0x10, 0x1f, 0xda, 0xda, 0xb9, 0x2d, 0x05,
	0x73, 0xca, 0x86, 0xc8, 0x5f, 0x48, 0xfd, 0x7f, 0x5d, 0xdf, 0xa1, 0xad, 0x5f, 0x65, 0x37, 0xbe,
	0x4f, 0x9f, 0x7c, 0x5c, 0xf9, 0xe4, 0x72, 0xe5, 0x93, 0x2f, 0x2b, 0x9f, 0xbc, 0x5b, 0xfb, 0xb5,
	0xcb, 0xb5, 0x5f, 0xfb, 0xb4, 0xf6, 0x6b, 0x2f, 0x7f, 0x34, 0x51, 0x26, 0xa6, 0xe7, 0x22, 0x13,
	0x6d, 0xb2, 0xbe, 0xa8, 0xd2, 0xee, 0xfe, 0x0c, 0xe3, 0x86, 0x4d, 0xf8, 0xc3, 0x6f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xe3, 0x69, 0x4d, 0xb0, 0x79, 0x04, 0x00, 0x00,
}

func (m *MsgSubmitEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Voted) > 0 {
		dAtA2 := make([]byte, len(m.Voted)*10)
		var j1 int
		for _, num := range m.Voted {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypesMsg(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.News) > 0 {
		dAtA4 := make([]byte, len(m.News)*10)
		var j3 int
		for _, num := range m.News {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTypesMsg(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterProxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProxyAccount) > 0 {
		i -= len(m.ProxyAccount)
		copy(dAtA[i:], m.ProxyAccount)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.ProxyAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterProxyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterProxyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterProxyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClearProxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClearProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClearProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClearProxyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClearProxyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClearProxyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainPrefix) > 0 {
		i -= len(m.ChainPrefix)
		copy(dAtA[i:], m.ChainPrefix)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.ChainPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTypesMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSubmitEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovTypesMsg(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.News) > 0 {
		l = 0
		for _, e := range m.News {
			l += sovTypesMsg(uint64(e))
		}
		n += 1 + sovTypesMsg(uint64(l)) + l
	}
	if len(m.Voted) > 0 {
		l = 0
		for _, e := range m.Voted {
			l += sovTypesMsg(uint64(e))
		}
		n += 1 + sovTypesMsg(uint64(l)) + l
	}
	return n
}

func (m *MsgRegisterProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.ProxyAccount)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	return n
}

func (m *MsgRegisterProxyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClearProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	return n
}

func (m *MsgClearProxyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	return n
}

func (m *MsgRegisterChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainPrefix)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	return n
}

func (m *MsgUnregisterChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	return n
}

func (m *MsgUnregisterChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTypesMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesMsg(x uint64) (n int) {
	return sovTypesMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSubmitEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &types.Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypesMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.News = append(m.News, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypesMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypesMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypesMsg
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.News) == 0 {
					m.News = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypesMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.News = append(m.News, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field News", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypesMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Voted = append(m.Voted, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypesMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypesMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypesMsg
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Voted) == 0 {
					m.Voted = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypesMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Voted = append(m.Voted, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Voted", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterProxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterProxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterProxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = append(m.Validator[:0], dAtA[iNdEx:postIndex]...)
			if m.Validator == nil {
				m.Validator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAccount = append(m.ProxyAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.ProxyAccount == nil {
				m.ProxyAccount = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterProxyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterProxyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterProxyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClearProxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClearProxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClearProxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = append(m.Validator[:0], dAtA[iNdEx:postIndex]...)
			if m.Validator == nil {
				m.Validator = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClearProxyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClearProxyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClearProxyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainPrefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainPrefix = append(m.ChainPrefix[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainPrefix == nil {
				m.ChainPrefix = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesMsg = fmt.Errorf("proto: unexpected end of group")
)
