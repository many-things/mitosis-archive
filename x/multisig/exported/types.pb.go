// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/multisig/v1beta1/exported/types.proto

package exported

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Sign Status
type Sign_Status int32

const (
	// Unspecified Status
	Sign_StatusUnspeicified Sign_Status = 0
	// Sign event Assigned ( Not executed )
	Sign_StatusAssign Sign_Status = 1
	// Sign event executed
	Sign_StatusExecute Sign_Status = 2
	// Sign event Completed
	Sign_StatusComplete Sign_Status = 3
	// Sign event Success
	Sign_StatusSuccess Sign_Status = 4
	// Sign event Failed
	Sign_StatusFailed Sign_Status = 5
)

var Sign_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_ASSIGN",
	2: "STATUS_EXECUTE",
	3: "STATUS_COMPLETE",
	4: "STATUS_SUCCESS",
	5: "STATUS_FAILED",
}

var Sign_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_ASSIGN":      1,
	"STATUS_EXECUTE":     2,
	"STATUS_COMPLETE":    3,
	"STATUS_SUCCESS":     4,
	"STATUS_FAILED":      5,
}

func (x Sign_Status) String() string {
	return proto.EnumName(Sign_Status_name, int32(x))
}

func (Sign_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_678ce0504116f33b, []int{0, 0}
}

// Sign Message
type Sign struct {
	// sign target chain id
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// signature id
	SigID uint64 `protobuf:"varint,2,opt,name=sig_id,json=sigId,proto3" json:"sig_id,omitempty"`
	// try-to-sign key id
	KeyID string `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// participant_ids
	Participants []github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,4,rep,name=participants,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"participants,omitempty"`
	// Message to sign
	MessageToSign Hash        `protobuf:"bytes,5,opt,name=message_to_sign,json=messageToSign,proto3,casttype=Hash" json:"message_to_sign,omitempty"`
	Status        Sign_Status `protobuf:"varint,6,opt,name=status,proto3,enum=manythings.mitosis.v1beta1.multisig.Sign_Status" json:"status,omitempty"`
}

func (m *Sign) Reset()         { *m = Sign{} }
func (m *Sign) String() string { return proto.CompactTextString(m) }
func (*Sign) ProtoMessage()    {}
func (*Sign) Descriptor() ([]byte, []int) {
	return fileDescriptor_678ce0504116f33b, []int{0}
}
func (m *Sign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sign.Merge(m, src)
}
func (m *Sign) XXX_Size() int {
	return m.Size()
}
func (m *Sign) XXX_DiscardUnknown() {
	xxx_messageInfo_Sign.DiscardUnknown(m)
}

var xxx_messageInfo_Sign proto.InternalMessageInfo

func (m *Sign) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Sign) GetSigID() uint64 {
	if m != nil {
		return m.SigID
	}
	return 0
}

func (m *Sign) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *Sign) GetParticipants() []github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Sign) GetMessageToSign() Hash {
	if m != nil {
		return m.MessageToSign
	}
	return nil
}

func (m *Sign) GetStatus() Sign_Status {
	if m != nil {
		return m.Status
	}
	return Sign_StatusUnspeicified
}

func init() {
	proto.RegisterEnum("manythings.mitosis.v1beta1.multisig.Sign_Status", Sign_Status_name, Sign_Status_value)
	proto.RegisterType((*Sign)(nil), "manythings.mitosis.v1beta1.multisig.Sign")
}

func init() {
	proto.RegisterFile("mitosis/multisig/v1beta1/exported/types.proto", fileDescriptor_678ce0504116f33b)
}

var fileDescriptor_678ce0504116f33b = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6e, 0xda, 0x4c,
	0x18, 0xc6, 0x71, 0x30, 0xe8, 0x63, 0x04, 0xc4, 0xdf, 0x28, 0xaa, 0x10, 0x0b, 0x63, 0x25, 0xaa,
	0xca, 0x06, 0x3b, 0xa4, 0x27, 0x00, 0x63, 0x1a, 0xab, 0x34, 0x8d, 0x18, 0x5c, 0x55, 0xdd, 0x20,
	0x63, 0x4f, 0xcd, 0x08, 0xec, 0xb1, 0x78, 0x87, 0x0a, 0xae, 0xc0, 0xaa, 0x17, 0xe0, 0x0c, 0xbd,
	0x46, 0x97, 0x59, 0x76, 0x85, 0x2a, 0x38, 0x45, 0xb3, 0xaa, 0x8c, 0x8d, 0x4a, 0x77, 0x5d, 0xf9,
	0x8f, 0x7e, 0xbf, 0x47, 0xf3, 0xbe, 0xf3, 0xa0, 0x56, 0xc8, 0x04, 0x07, 0x06, 0x46, 0xb8, 0x9c,
	0x0b, 0x06, 0x2c, 0x30, 0xbe, 0xb4, 0x27, 0x54, 0xb8, 0x6d, 0x83, 0xae, 0x62, 0xbe, 0x10, 0xd4,
	0x37, 0xc4, 0x3a, 0xa6, 0xa0, 0xc7, 0x0b, 0x2e, 0x38, 0xbe, 0x09, 0xdd, 0x68, 0x2d, 0xa6, 0x2c,
	0x0a, 0x40, 0xcf, 0x4c, 0x3d, 0x13, 0xf4, 0x53, 0x42, 0xfd, 0x2a, 0xe0, 0x01, 0x3f, 0xf2, 0x46,
	0xf2, 0x96, 0xaa, 0xd7, 0xdf, 0x64, 0x24, 0x13, 0x16, 0x44, 0xf8, 0x0a, 0x15, 0xbc, 0xa9, 0xcb,
	0xa2, 0x9a, 0xa4, 0x49, 0xcd, 0xd2, 0x30, 0xfd, 0xc0, 0x1a, 0x2a, 0x02, 0x0b, 0xc6, 0xcc, 0xaf,
	0x5d, 0x68, 0x52, 0x53, 0xee, 0x96, 0xf6, 0xbb, 0x46, 0x81, 0xb0, 0xc0, 0xee, 0x0d, 0x0b, 0xc0,
	0x02, 0xdb, 0x4f, 0x88, 0x19, 0x5d, 0x27, 0x44, 0x3e, 0x11, 0x53, 0xe2, 0x2d, 0x5d, 0x27, 0xc4,
	0x8c, 0xae, 0x6d, 0x1f, 0x3b, 0xa8, 0x1c, 0xbb, 0x0b, 0xc1, 0x3c, 0x16, 0xbb, 0x91, 0x80, 0x9a,
	0xac, 0xe5, 0x9b, 0xa5, 0x6e, 0xfb, 0x79, 0xd7, 0x68, 0x05, 0x4c, 0x4c, 0x97, 0x13, 0xdd, 0xe3,
	0xa1, 0xe1, 0x71, 0x08, 0x39, 0x64, 0x8f, 0x16, 0xf8, 0xb3, 0x6c, 0xc2, 0x0f, 0xee, 0xbc, 0xe3,
	0xfb, 0x0b, 0x0a, 0x30, 0xfc, 0x2b, 0x06, 0xdf, 0xa2, 0xcb, 0x90, 0x02, 0xb8, 0x01, 0x1d, 0x0b,
	0x3e, 0x06, 0x16, 0x44, 0xb5, 0x82, 0x26, 0x35, 0xcb, 0xdd, 0xff, 0x9e, 0x77, 0x0d, 0xf9, 0xde,
	0x85, 0xe9, 0xb0, 0x92, 0x01, 0x23, 0x7e, 0x1c, 0xf1, 0x1e, 0x15, 0x41, 0xb8, 0x62, 0x09, 0xb5,
	0xa2, 0x26, 0x35, 0xab, 0x77, 0xb7, 0xfa, 0x3f, 0xec, 0x4d, 0x4f, 0x54, 0x9d, 0x1c, 0xbd, 0x61,
	0xe6, 0x5f, 0xff, 0x92, 0x50, 0x31, 0xfd, 0x85, 0x75, 0x84, 0xc9, 0xa8, 0x33, 0x72, 0xc8, 0xd8,
	0x79, 0x20, 0x8f, 0x96, 0x69, 0xf7, 0x6d, 0xab, 0xa7, 0xe4, 0xea, 0x2f, 0x36, 0x5b, 0x0d, 0xa7,
	0x8c, 0x13, 0x41, 0x4c, 0x99, 0xc7, 0x3e, 0x33, 0xea, 0xe3, 0x1b, 0x54, 0xc9, 0xf8, 0x0e, 0x21,
	0xf6, 0x9b, 0x07, 0x45, 0xaa, 0x2b, 0x9b, 0xad, 0x56, 0x4e, 0xd1, 0x0e, 0x24, 0x83, 0xe0, 0x97,
	0xa8, 0x9a, 0x41, 0xd6, 0x47, 0xcb, 0x74, 0x46, 0x96, 0x72, 0x51, 0xff, 0x7f, 0xb3, 0xd5, 0x2a,
	0x29, 0x65, 0xad, 0xa8, 0xb7, 0x14, 0x14, 0xbf, 0x42, 0x97, 0x19, 0x66, 0xbe, 0x7f, 0xf7, 0x38,
	0xb0, 0x46, 0x96, 0x92, 0xaf, 0xe3, 0xcd, 0x56, 0xab, 0xa6, 0x9c, 0xc9, 0xc3, 0x78, 0x4e, 0x05,
	0x3d, 0xcb, 0x23, 0x8e, 0x69, 0x5a, 0x84, 0x28, 0xf2, 0x79, 0x1e, 0x59, 0x7a, 0x1e, 0x05, 0x38,
	0x3b, 0x5b, 0xbf, 0x63, 0x0f, 0xac, 0x9e, 0x52, 0x38, 0x3f, 0x5b, 0xdf, 0x65, 0x73, 0xea, 0x77,
	0x07, 0xdf, 0xf7, 0xaa, 0xf4, 0xb4, 0x57, 0xa5, 0x9f, 0x7b, 0x55, 0xfa, 0x7a, 0x50, 0x73, 0x4f,
	0x07, 0x35, 0xf7, 0xe3, 0xa0, 0xe6, 0x3e, 0xdd, 0x9d, 0x5d, 0x67, 0xb2, 0xd9, 0x56, 0xba, 0x5a,
	0xe3, 0x54, 0xe6, 0xd5, 0x9f, 0x3a, 0x9f, 0x6a, 0x3c, 0x29, 0x1e, 0x6b, 0xf8, 0xfa, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xef, 0xd3, 0xa7, 0x97, 0xf2, 0x02, 0x00, 0x00,
}

func (m *Sign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MessageToSign) > 0 {
		i -= len(m.MessageToSign)
		copy(dAtA[i:], m.MessageToSign)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MessageToSign)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Participants[iNdEx])
			copy(dAtA[i:], m.Participants[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Participants[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SigID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SigID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Sign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SigID != 0 {
		n += 1 + sovTypes(uint64(m.SigID))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Participants) > 0 {
		for _, s := range m.Participants {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.MessageToSign)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Sign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigID", wireType)
			}
			m.SigID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, github_com_cosmos_cosmos_sdk_types.ValAddress(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageToSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageToSign = append(m.MessageToSign[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageToSign == nil {
				m.MessageToSign = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Sign_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
