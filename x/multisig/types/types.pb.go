// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/multisig/v1beta1/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_many_things_mitosis_x_multisig_exported "github.com/many-things/mitosis/x/multisig/exported"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Keygen Status
type Keygen_Status int32

const (
	// Unspecified Status
	Keygen_StatusUnspecified Keygen_Status = 0
	// Keygen Assigned Status ( Not executed )
	Keygen_StatusAssign Keygen_Status = 1
	// Keygen Started
	Keygen_StatusExecute Keygen_Status = 2
	// Keygen Completed
	Keygen_StatusComplete Keygen_Status = 3
	// Keygen Failed
	Keygen_StatusFailed Keygen_Status = 4
)

var Keygen_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_ASSIGN",
	2: "STATUS_EXECUTE",
	3: "STATUS_COMPLETED",
	4: "STATUS_FAILED",
}

var Keygen_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_ASSIGN":      1,
	"STATUS_EXECUTE":     2,
	"STATUS_COMPLETED":   3,
	"STATUS_FAILED":      4,
}

func (x Keygen_Status) String() string {
	return proto.EnumName(Keygen_Status_name, int32(x))
}

func (Keygen_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1f5869ea852ab5d9, []int{0, 0}
}

// Keygen Message
type Keygen struct {
	// key target chain id
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// key id
	KeyID uint64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// keygen participants
	Participants []*Keygen_Participant `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	// keygen event status
	Status Keygen_Status `protobuf:"varint,4,opt,name=status,proto3,enum=manythings.mitosis.v1beta1.multisig.Keygen_Status" json:"status,omitempty"`
}

func (m *Keygen) Reset()         { *m = Keygen{} }
func (m *Keygen) String() string { return proto.CompactTextString(m) }
func (*Keygen) ProtoMessage()    {}
func (*Keygen) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f5869ea852ab5d9, []int{0}
}
func (m *Keygen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keygen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Keygen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Keygen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keygen.Merge(m, src)
}
func (m *Keygen) XXX_Size() int {
	return m.Size()
}
func (m *Keygen) XXX_DiscardUnknown() {
	xxx_messageInfo_Keygen.DiscardUnknown(m)
}

var xxx_messageInfo_Keygen proto.InternalMessageInfo

func (m *Keygen) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Keygen) GetKeyID() uint64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *Keygen) GetParticipants() []*Keygen_Participant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Keygen) GetStatus() Keygen_Status {
	if m != nil {
		return m.Status
	}
	return Keygen_StatusUnspecified
}

// Participant Message
type Keygen_Participant struct {
	Address github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"address,omitempty"`
	Share   uint32                                        `protobuf:"varint,2,opt,name=share,proto3" json:"share,omitempty"`
}

func (m *Keygen_Participant) Reset()         { *m = Keygen_Participant{} }
func (m *Keygen_Participant) String() string { return proto.CompactTextString(m) }
func (*Keygen_Participant) ProtoMessage()    {}
func (*Keygen_Participant) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f5869ea852ab5d9, []int{0, 0}
}
func (m *Keygen_Participant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keygen_Participant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Keygen_Participant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Keygen_Participant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keygen_Participant.Merge(m, src)
}
func (m *Keygen_Participant) XXX_Size() int {
	return m.Size()
}
func (m *Keygen_Participant) XXX_DiscardUnknown() {
	xxx_messageInfo_Keygen_Participant.DiscardUnknown(m)
}

var xxx_messageInfo_Keygen_Participant proto.InternalMessageInfo

func (m *Keygen_Participant) GetAddress() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Keygen_Participant) GetShare() uint32 {
	if m != nil {
		return m.Share
	}
	return 0
}

// Pubkey Message
type KeygenResult struct {
	// key target chain id
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// key id
	KeyID uint64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// participant id
	Items []*KeygenResult_Item `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *KeygenResult) Reset()         { *m = KeygenResult{} }
func (m *KeygenResult) String() string { return proto.CompactTextString(m) }
func (*KeygenResult) ProtoMessage()    {}
func (*KeygenResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f5869ea852ab5d9, []int{1}
}
func (m *KeygenResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenResult.Merge(m, src)
}
func (m *KeygenResult) XXX_Size() int {
	return m.Size()
}
func (m *KeygenResult) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenResult.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenResult proto.InternalMessageInfo

func (m *KeygenResult) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *KeygenResult) GetKeyID() uint64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *KeygenResult) GetItems() []*KeygenResult_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

// Item returns
type KeygenResult_Item struct {
	Participant github_com_cosmos_cosmos_sdk_types.ValAddress                `protobuf:"bytes,1,opt,name=participant,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"participant,omitempty"`
	PubKey      github_com_many_things_mitosis_x_multisig_exported.PublicKey `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3,casttype=github.com/many-things/mitosis/x/multisig/exported.PublicKey" json:"pub_key,omitempty"`
}

func (m *KeygenResult_Item) Reset()         { *m = KeygenResult_Item{} }
func (m *KeygenResult_Item) String() string { return proto.CompactTextString(m) }
func (*KeygenResult_Item) ProtoMessage()    {}
func (*KeygenResult_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f5869ea852ab5d9, []int{1, 0}
}
func (m *KeygenResult_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenResult_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenResult_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenResult_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenResult_Item.Merge(m, src)
}
func (m *KeygenResult_Item) XXX_Size() int {
	return m.Size()
}
func (m *KeygenResult_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenResult_Item.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenResult_Item proto.InternalMessageInfo

func (m *KeygenResult_Item) GetParticipant() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Participant
	}
	return nil
}

func (m *KeygenResult_Item) GetPubKey() github_com_many_things_mitosis_x_multisig_exported.PublicKey {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type MsgSignComplete struct {
	SigID     github_com_many_things_mitosis_x_multisig_exported.SigID     `protobuf:"bytes,1,opt,name=sig_id,json=sigId,proto3,casttype=github.com/many-things/mitosis/x/multisig/exported.SigID" json:"sig_id,omitempty"`
	Signature github_com_many_things_mitosis_x_multisig_exported.Signature `protobuf:"bytes,2,opt,name=signature,proto3,casttype=github.com/many-things/mitosis/x/multisig/exported.Signature" json:"signature,omitempty"`
}

func (m *MsgSignComplete) Reset()         { *m = MsgSignComplete{} }
func (m *MsgSignComplete) String() string { return proto.CompactTextString(m) }
func (*MsgSignComplete) ProtoMessage()    {}
func (*MsgSignComplete) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f5869ea852ab5d9, []int{2}
}
func (m *MsgSignComplete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignComplete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignComplete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignComplete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignComplete.Merge(m, src)
}
func (m *MsgSignComplete) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignComplete) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignComplete.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignComplete proto.InternalMessageInfo

func (m *MsgSignComplete) GetSigID() github_com_many_things_mitosis_x_multisig_exported.SigID {
	if m != nil {
		return m.SigID
	}
	return ""
}

func (m *MsgSignComplete) GetSignature() github_com_many_things_mitosis_x_multisig_exported.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterEnum("manythings.mitosis.v1beta1.multisig.Keygen_Status", Keygen_Status_name, Keygen_Status_value)
	proto.RegisterType((*Keygen)(nil), "manythings.mitosis.v1beta1.multisig.Keygen")
	proto.RegisterType((*Keygen_Participant)(nil), "manythings.mitosis.v1beta1.multisig.Keygen.Participant")
	proto.RegisterType((*KeygenResult)(nil), "manythings.mitosis.v1beta1.multisig.KeygenResult")
	proto.RegisterType((*KeygenResult_Item)(nil), "manythings.mitosis.v1beta1.multisig.KeygenResult.Item")
	proto.RegisterType((*MsgSignComplete)(nil), "manythings.mitosis.v1beta1.multisig.MsgSignComplete")
}

func init() {
	proto.RegisterFile("mitosis/multisig/v1beta1/types.proto", fileDescriptor_1f5869ea852ab5d9)
}

var fileDescriptor_1f5869ea852ab5d9 = []byte{
	// 646 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x8d, 0xdb, 0xc4, 0x55, 0xa7, 0x69, 0x71, 0x47, 0x45, 0x8a, 0xbc, 0x48, 0xac, 0x14, 0xa4,
	0x6c, 0x62, 0xab, 0x45, 0x02, 0x16, 0x2c, 0xc8, 0xc3, 0x45, 0x26, 0x6d, 0x89, 0xec, 0x04, 0xf1,
	0x12, 0x95, 0x63, 0x0f, 0xce, 0x28, 0xf1, 0x43, 0x99, 0x31, 0xaa, 0x7f, 0x21, 0x2b, 0x7e, 0x20,
	0xff, 0xc0, 0x8a, 0x6f, 0x60, 0x83, 0xa8, 0x58, 0xb1, 0x8a, 0x50, 0xfa, 0x17, 0x5d, 0x21, 0x7b,
	0x1c, 0x62, 0x76, 0x6d, 0x56, 0xc9, 0x95, 0xce, 0xe3, 0xde, 0x73, 0xef, 0x18, 0x3c, 0x70, 0x31,
	0xf5, 0x09, 0x26, 0x8a, 0x1b, 0x8e, 0x29, 0x26, 0xd8, 0x51, 0x3e, 0x1f, 0x0d, 0x10, 0x35, 0x8f,
	0x14, 0x1a, 0x05, 0x88, 0xc8, 0xc1, 0xc4, 0xa7, 0x3e, 0x3c, 0x74, 0x4d, 0x2f, 0xa2, 0x43, 0xec,
	0x39, 0x44, 0x4e, 0x09, 0x72, 0x8a, 0x93, 0x97, 0x44, 0xf1, 0xc0, 0xf1, 0x1d, 0x3f, 0xc1, 0x2b,
	0xf1, 0x3f, 0x46, 0xad, 0x7e, 0xcd, 0x03, 0xbe, 0x83, 0x22, 0x07, 0x79, 0xf0, 0x00, 0x14, 0xac,
	0xa1, 0x89, 0xbd, 0x12, 0x27, 0x71, 0xb5, 0x6d, 0x9d, 0x15, 0x50, 0x02, 0xfc, 0x08, 0x45, 0x17,
	0xd8, 0x2e, 0x6d, 0x48, 0x5c, 0x2d, 0xdf, 0xdc, 0x5e, 0xcc, 0x2b, 0x85, 0x0e, 0x8a, 0xb4, 0xb6,
	0x5e, 0x18, 0xa1, 0x48, 0xb3, 0xe1, 0x7b, 0x50, 0x0c, 0xcc, 0x09, 0xc5, 0x16, 0x0e, 0x4c, 0x8f,
	0x92, 0xd2, 0xa6, 0xb4, 0x59, 0xdb, 0x39, 0x7e, 0x22, 0xdf, 0xa2, 0x29, 0x99, 0x59, 0xcb, 0xdd,
	0x15, 0x5f, 0xff, 0x4f, 0x0c, 0xbe, 0x04, 0x3c, 0xa1, 0x26, 0x0d, 0x49, 0x29, 0x2f, 0x71, 0xb5,
	0xbd, 0xe3, 0xe3, 0xbb, 0xc8, 0x1a, 0x09, 0x53, 0x4f, 0x15, 0xc4, 0x00, 0xec, 0x64, 0x8c, 0x60,
	0x07, 0x6c, 0x99, 0xb6, 0x3d, 0x41, 0x84, 0x24, 0x13, 0x17, 0x9b, 0x47, 0x37, 0xf3, 0x4a, 0xdd,
	0xc1, 0x74, 0x18, 0x0e, 0x64, 0xcb, 0x77, 0x15, 0xcb, 0x27, 0xae, 0x4f, 0xd2, 0x9f, 0x3a, 0xb1,
	0x47, 0x69, 0xe8, 0xaf, 0xcd, 0x71, 0x83, 0x11, 0xf5, 0xa5, 0x42, 0x1c, 0x1e, 0x19, 0x9a, 0x13,
	0x94, 0xa4, 0xb4, 0xab, 0xb3, 0xa2, 0xfa, 0x8b, 0x03, 0x3c, 0x6b, 0x02, 0xd6, 0x01, 0x34, 0x7a,
	0x8d, 0x5e, 0xdf, 0xb8, 0xe8, 0x9f, 0x1b, 0x5d, 0xb5, 0xa5, 0x9d, 0x68, 0x6a, 0x5b, 0xc8, 0x89,
	0xf7, 0xa7, 0x33, 0x69, 0x9f, 0x61, 0xfa, 0x1e, 0x09, 0x90, 0x85, 0x3f, 0x61, 0x64, 0xc3, 0x43,
	0xb0, 0x9b, 0xc2, 0x1b, 0x86, 0xa1, 0xbd, 0x38, 0x17, 0x38, 0x51, 0x98, 0xce, 0xa4, 0x22, 0x43,
	0x36, 0x08, 0xc1, 0x8e, 0x07, 0x1f, 0x82, 0xbd, 0x14, 0xa4, 0xbe, 0x51, 0x5b, 0xfd, 0x9e, 0x2a,
	0x6c, 0x88, 0xfb, 0xd3, 0x99, 0xb4, 0xcb, 0x50, 0xea, 0x25, 0xb2, 0x42, 0x8a, 0x60, 0x0d, 0x08,
	0x29, 0xac, 0xf5, 0xea, 0xac, 0x7b, 0xaa, 0xf6, 0xd4, 0xb6, 0xb0, 0x29, 0xc2, 0xe9, 0x4c, 0xda,
	0x63, 0xc0, 0x96, 0xef, 0x06, 0x63, 0x44, 0x51, 0xc6, 0xf5, 0xa4, 0xa1, 0x9d, 0xaa, 0x6d, 0x21,
	0x9f, 0x75, 0x3d, 0x31, 0xf1, 0x18, 0xd9, 0xd5, 0x1f, 0x1b, 0xa0, 0xc8, 0x02, 0xd6, 0x11, 0x09,
	0xc7, 0x74, 0xed, 0xc3, 0x39, 0x05, 0x05, 0x4c, 0x91, 0xbb, 0xbc, 0x98, 0xc7, 0x77, 0x58, 0x2d,
	0x73, 0x96, 0x35, 0x8a, 0x5c, 0x9d, 0x89, 0x88, 0xdf, 0x38, 0x90, 0x8f, 0x6b, 0x68, 0x80, 0x9d,
	0xcc, 0x09, 0xad, 0xbf, 0xdb, 0xac, 0x0a, 0x7c, 0x0b, 0xb6, 0x82, 0x70, 0x70, 0x31, 0x42, 0x51,
	0x32, 0x4e, 0xb1, 0xf9, 0xfc, 0x66, 0x5e, 0x79, 0x96, 0x11, 0x8c, 0x7b, 0xaf, 0xb3, 0xe6, 0x95,
	0xe5, 0xa3, 0xbd, 0x5c, 0x3d, 0x5b, 0x74, 0x19, 0xf8, 0x13, 0x8a, 0x6c, 0xb9, 0x1b, 0x0e, 0xc6,
	0xd8, 0xea, 0xa0, 0x48, 0xe7, 0x83, 0x70, 0xd0, 0x41, 0x51, 0xf5, 0x27, 0x07, 0xee, 0x9d, 0x11,
	0xc7, 0xc0, 0x8e, 0xf7, 0x6f, 0x11, 0x1f, 0x00, 0x4f, 0xb0, 0x13, 0x87, 0x97, 0x64, 0xda, 0x54,
	0xe3, 0xf0, 0x0c, 0xec, 0x68, 0xed, 0x9b, 0x79, 0xe5, 0xe9, 0x1a, 0xb6, 0x09, 0x57, 0x2f, 0x10,
	0xec, 0x68, 0x36, 0xfc, 0x08, 0xb6, 0xe3, 0xfb, 0x31, 0x69, 0x98, 0x1e, 0xec, 0xfa, 0xe3, 0x18,
	0x4b, 0x1d, 0x7d, 0x25, 0xd9, 0xd4, 0xbe, 0x2f, 0xca, 0xdc, 0xd5, 0xa2, 0xcc, 0xfd, 0x59, 0x94,
	0xb9, 0x2f, 0xd7, 0xe5, 0xdc, 0xd5, 0x75, 0x39, 0xf7, 0xfb, 0xba, 0x9c, 0x7b, 0xa7, 0xdc, 0xde,
	0x22, 0xd9, 0xc7, 0x80, 0x4f, 0x3e, 0x53, 0x8f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x79, 0xe2,
	0x1f, 0x72, 0x09, 0x05, 0x00, 0x00,
}

func (m *Keygen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keygen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keygen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.KeyID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.KeyID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Keygen_Participant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keygen_Participant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keygen_Participant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Share != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Share))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeygenResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.KeyID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.KeyID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeygenResult_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenResult_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenResult_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignComplete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignComplete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignComplete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SigID) > 0 {
		i -= len(m.SigID)
		copy(dAtA[i:], m.SigID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SigID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Keygen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.KeyID != 0 {
		n += 1 + sovTypes(uint64(m.KeyID))
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func (m *Keygen_Participant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Share != 0 {
		n += 1 + sovTypes(uint64(m.Share))
	}
	return n
}

func (m *KeygenResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.KeyID != 0 {
		n += 1 + sovTypes(uint64(m.KeyID))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *KeygenResult_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MsgSignComplete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SigID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Keygen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keygen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keygen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Keygen_Participant{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Keygen_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Keygen_Participant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Participant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Participant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			m.Share = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Share |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeygenResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &KeygenResult_Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeygenResult_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = append(m.Participant[:0], dAtA[iNdEx:postIndex]...)
			if m.Participant == nil {
				m.Participant = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignComplete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignComplete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignComplete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigID = github_com_many_things_mitosis_x_multisig_exported.SigID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
