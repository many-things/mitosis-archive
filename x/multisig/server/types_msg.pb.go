// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/multisig/v1beta1/server/types_msg.proto

package server

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/many-things/mitosis/x/multisig/exported"
	github_com_many_things_mitosis_x_multisig_exported "github.com/many-things/mitosis/x/multisig/exported"
	_ "github.com/many-things/mitosis/x/multisig/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgStartKeygen is message for startkeygen event
type MsgStartKeygen struct {
	Module       string                                                   `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	KeyID        github_com_many_things_mitosis_x_multisig_exported.KeyID `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3,casttype=github.com/many-things/mitosis/x/multisig/exported.KeyID" json:"key_id,omitempty"`
	Participants []github_com_cosmos_cosmos_sdk_types.ValAddress          `protobuf:"bytes,3,rep,name=participants,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"participants,omitempty"`
}

func (m *MsgStartKeygen) Reset()         { *m = MsgStartKeygen{} }
func (m *MsgStartKeygen) String() string { return proto.CompactTextString(m) }
func (*MsgStartKeygen) ProtoMessage()    {}
func (*MsgStartKeygen) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d7fa7963eb62b7, []int{0}
}
func (m *MsgStartKeygen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartKeygen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartKeygen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartKeygen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartKeygen.Merge(m, src)
}
func (m *MsgStartKeygen) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartKeygen) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartKeygen.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartKeygen proto.InternalMessageInfo

func (m *MsgStartKeygen) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *MsgStartKeygen) GetKeyID() github_com_many_things_mitosis_x_multisig_exported.KeyID {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *MsgStartKeygen) GetParticipants() []github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Participants
	}
	return nil
}

// MsgSubmitPubkey is message for submitMessage event
type MsgSubmitPubkey struct {
	Module      string                                                       `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	KeyID       github_com_many_things_mitosis_x_multisig_exported.KeyID     `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3,casttype=github.com/many-things/mitosis/x/multisig/exported.KeyID" json:"key_id,omitempty"`
	Participant github_com_cosmos_cosmos_sdk_types.ValAddress                `protobuf:"bytes,3,opt,name=participant,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"participant,omitempty"`
	PubKey      github_com_many_things_mitosis_x_multisig_exported.PublicKey `protobuf:"bytes,4,opt,name=pub_key,json=pubKey,proto3,casttype=github.com/many-things/mitosis/x/multisig/exported.PublicKey" json:"pub_key,omitempty"`
}

func (m *MsgSubmitPubkey) Reset()         { *m = MsgSubmitPubkey{} }
func (m *MsgSubmitPubkey) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPubkey) ProtoMessage()    {}
func (*MsgSubmitPubkey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d7fa7963eb62b7, []int{1}
}
func (m *MsgSubmitPubkey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPubkey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPubkey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPubkey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPubkey.Merge(m, src)
}
func (m *MsgSubmitPubkey) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPubkey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPubkey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPubkey proto.InternalMessageInfo

func (m *MsgSubmitPubkey) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *MsgSubmitPubkey) GetKeyID() github_com_many_things_mitosis_x_multisig_exported.KeyID {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *MsgSubmitPubkey) GetParticipant() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Participant
	}
	return nil
}

func (m *MsgSubmitPubkey) GetPubKey() github_com_many_things_mitosis_x_multisig_exported.PublicKey {
	if m != nil {
		return m.PubKey
	}
	return nil
}

// MsgStartKeygenResponse is message for StartKeygen Response
type MsgStartKeygenResponse struct {
}

func (m *MsgStartKeygenResponse) Reset()         { *m = MsgStartKeygenResponse{} }
func (m *MsgStartKeygenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartKeygenResponse) ProtoMessage()    {}
func (*MsgStartKeygenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d7fa7963eb62b7, []int{2}
}
func (m *MsgStartKeygenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartKeygenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartKeygenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartKeygenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartKeygenResponse.Merge(m, src)
}
func (m *MsgStartKeygenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartKeygenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartKeygenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartKeygenResponse proto.InternalMessageInfo

// MsgSubmitPubkeyResponse is message for SubmitPubkey Response
type MsgSubmitPubkeyResponse struct {
}

func (m *MsgSubmitPubkeyResponse) Reset()         { *m = MsgSubmitPubkeyResponse{} }
func (m *MsgSubmitPubkeyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPubkeyResponse) ProtoMessage()    {}
func (*MsgSubmitPubkeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d7fa7963eb62b7, []int{3}
}
func (m *MsgSubmitPubkeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPubkeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPubkeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPubkeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPubkeyResponse.Merge(m, src)
}
func (m *MsgSubmitPubkeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPubkeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPubkeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPubkeyResponse proto.InternalMessageInfo

// MsgSubmitSignature is message for SubmitSignature event
type MsgSubmitSignature struct {
	Module      string                                                       `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	SigID       github_com_many_things_mitosis_x_multisig_exported.SigID     `protobuf:"bytes,2,opt,name=sig_id,json=sigId,proto3,casttype=github.com/many-things/mitosis/x/multisig/exported.SigID" json:"sig_id,omitempty"`
	Participant github_com_cosmos_cosmos_sdk_types.ValAddress                `protobuf:"bytes,3,opt,name=participant,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"participant,omitempty"`
	Signature   github_com_many_things_mitosis_x_multisig_exported.Signature `protobuf:"bytes,4,opt,name=signature,proto3,casttype=github.com/many-things/mitosis/x/multisig/exported.Signature" json:"signature,omitempty"`
}

func (m *MsgSubmitSignature) Reset()         { *m = MsgSubmitSignature{} }
func (m *MsgSubmitSignature) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitSignature) ProtoMessage()    {}
func (*MsgSubmitSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d7fa7963eb62b7, []int{4}
}
func (m *MsgSubmitSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitSignature.Merge(m, src)
}
func (m *MsgSubmitSignature) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitSignature proto.InternalMessageInfo

func (m *MsgSubmitSignature) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *MsgSubmitSignature) GetSigID() github_com_many_things_mitosis_x_multisig_exported.SigID {
	if m != nil {
		return m.SigID
	}
	return ""
}

func (m *MsgSubmitSignature) GetParticipant() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Participant
	}
	return nil
}

func (m *MsgSubmitSignature) GetSignature() github_com_many_things_mitosis_x_multisig_exported.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// MsgSubmitSignatureResponse is message for SubmitSignature Response
type MsgSubmitSignatureResponse struct {
}

func (m *MsgSubmitSignatureResponse) Reset()         { *m = MsgSubmitSignatureResponse{} }
func (m *MsgSubmitSignatureResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitSignatureResponse) ProtoMessage()    {}
func (*MsgSubmitSignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d7fa7963eb62b7, []int{5}
}
func (m *MsgSubmitSignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitSignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitSignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitSignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitSignatureResponse.Merge(m, src)
}
func (m *MsgSubmitSignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitSignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitSignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitSignatureResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgStartKeygen)(nil), "manythings.mitosis.v1beta1.multisig.server.MsgStartKeygen")
	proto.RegisterType((*MsgSubmitPubkey)(nil), "manythings.mitosis.v1beta1.multisig.server.MsgSubmitPubkey")
	proto.RegisterType((*MsgStartKeygenResponse)(nil), "manythings.mitosis.v1beta1.multisig.server.MsgStartKeygenResponse")
	proto.RegisterType((*MsgSubmitPubkeyResponse)(nil), "manythings.mitosis.v1beta1.multisig.server.MsgSubmitPubkeyResponse")
	proto.RegisterType((*MsgSubmitSignature)(nil), "manythings.mitosis.v1beta1.multisig.server.MsgSubmitSignature")
	proto.RegisterType((*MsgSubmitSignatureResponse)(nil), "manythings.mitosis.v1beta1.multisig.server.MsgSubmitSignatureResponse")
}

func init() {
	proto.RegisterFile("mitosis/multisig/v1beta1/server/types_msg.proto", fileDescriptor_b9d7fa7963eb62b7)
}

var fileDescriptor_b9d7fa7963eb62b7 = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xc1, 0x8b, 0xd3, 0x40,
	0x14, 0xc6, 0x9b, 0xd6, 0x56, 0x76, 0x5c, 0x14, 0x82, 0xac, 0xb1, 0x2c, 0x69, 0x29, 0x08, 0xcb,
	0x42, 0x33, 0x16, 0x2f, 0x1e, 0x3c, 0x68, 0xd1, 0xc3, 0x5a, 0x84, 0x25, 0x45, 0x41, 0x11, 0xcb,
	0xa4, 0x79, 0xcc, 0x0e, 0x6d, 0x32, 0x63, 0xde, 0x64, 0xd9, 0xf9, 0x2f, 0xfc, 0x6f, 0x3c, 0x7a,
	0xf5, 0xb8, 0x47, 0x2f, 0x16, 0x69, 0xff, 0x8b, 0x9e, 0xa4, 0x49, 0x9a, 0xed, 0xae, 0xac, 0x48,
	0x45, 0x3c, 0x75, 0x3a, 0xef, 0x7d, 0x1f, 0xdf, 0xf7, 0x23, 0x0c, 0xa1, 0x91, 0xd0, 0x12, 0x05,
	0xd2, 0x28, 0x9d, 0x6a, 0x81, 0x82, 0xd3, 0xd3, 0x5e, 0x00, 0x9a, 0xf5, 0x28, 0x42, 0x72, 0x0a,
	0x09, 0xd5, 0x46, 0x01, 0x8e, 0x22, 0xe4, 0x9e, 0x4a, 0xa4, 0x96, 0xf6, 0x61, 0xc4, 0x62, 0xa3,
	0x4f, 0x44, 0xcc, 0xd1, 0x2b, 0xb4, 0x5e, 0x21, 0xf1, 0xd6, 0x1e, 0x5e, 0xae, 0x6d, 0x1e, 0x8e,
	0x25, 0x46, 0x12, 0x69, 0xc0, 0x10, 0xe8, 0xc7, 0x14, 0x12, 0x53, 0xba, 0x2b, 0xc6, 0x45, 0xcc,
	0xb4, 0x90, 0x71, 0xee, 0xdb, 0xbc, 0xcb, 0x25, 0x97, 0xd9, 0x91, 0xae, 0x4e, 0xc5, 0xed, 0x3e,
	0x97, 0x92, 0x4f, 0x81, 0x32, 0x25, 0x28, 0x8b, 0x63, 0xa9, 0x33, 0x09, 0x16, 0xd3, 0xee, 0xb5,
	0xe1, 0xe1, 0x4c, 0xc9, 0x44, 0x43, 0x98, 0xc7, 0x2f, 0xd6, 0x1f, 0x5c, 0xbb, 0xae, 0x58, 0xc2,
	0xa2, 0x62, 0xad, 0xf3, 0xdd, 0x22, 0xb7, 0x5f, 0x21, 0x1f, 0x6a, 0x96, 0xe8, 0x01, 0x18, 0x0e,
	0xb1, 0xbd, 0x47, 0x1a, 0x91, 0x0c, 0xd3, 0x29, 0x38, 0x56, 0xdb, 0x3a, 0xd8, 0xf1, 0x8b, 0x7f,
	0xf6, 0x7b, 0xd2, 0x98, 0x80, 0x19, 0x89, 0xd0, 0xa9, 0xae, 0xee, 0xfb, 0x2f, 0xe6, 0xb3, 0x56,
	0x7d, 0x00, 0xe6, 0xe8, 0xf9, 0x72, 0xd6, 0x7a, 0xcc, 0x85, 0x3e, 0x49, 0x03, 0x6f, 0x2c, 0x23,
	0xba, 0x82, 0xd6, 0xcd, 0xa9, 0x95, 0xc4, 0xcf, 0x2e, 0x72, 0xac, 0xe3, 0x7a, 0x99, 0xd6, 0xaf,
	0x4f, 0xc0, 0x1c, 0x85, 0xf6, 0x6b, 0xb2, 0xab, 0x58, 0xa2, 0xc5, 0x58, 0x28, 0x16, 0x6b, 0x74,
	0x6a, 0xed, 0xda, 0xc1, 0x6e, 0xbf, 0xb7, 0x9c, 0xb5, 0xba, 0x1b, 0xd6, 0x05, 0xe3, 0xfc, 0xa7,
	0x8b, 0xe1, 0xa4, 0xe8, 0xfc, 0x86, 0x4d, 0x9f, 0x85, 0x61, 0x02, 0x88, 0xfe, 0x25, 0x9b, 0xce,
	0xe7, 0x2a, 0xb9, 0xb3, 0xea, 0x97, 0x06, 0x91, 0xd0, 0xc7, 0x69, 0x30, 0x01, 0xf3, 0x9f, 0x0a,
	0x0e, 0xc9, 0xad, 0x8d, 0x64, 0x4e, 0xad, 0x6d, 0x6d, 0xd7, 0x6f, 0xd3, 0xc5, 0x7e, 0x4b, 0x6e,
	0xaa, 0x34, 0x18, 0x4d, 0xc0, 0x38, 0x37, 0x32, 0xc3, 0xa7, 0xcb, 0x59, 0xeb, 0xc9, 0x16, 0x51,
	0x8f, 0xd3, 0x60, 0x2a, 0xc6, 0x03, 0x30, 0x7e, 0x43, 0xa5, 0xc1, 0x00, 0x4c, 0xc7, 0x21, 0x7b,
	0x97, 0x3f, 0x0c, 0x1f, 0x50, 0xc9, 0x18, 0xa1, 0x73, 0x9f, 0xdc, 0xbb, 0x82, 0xb4, 0x1c, 0x7d,
	0xa9, 0x12, 0xbb, 0x9c, 0x0d, 0x05, 0x8f, 0x99, 0x4e, 0x13, 0xf8, 0x1d, 0x71, 0x14, 0xfc, 0x0a,
	0xf1, 0xa1, 0xe0, 0x5b, 0x13, 0xcf, 0xb4, 0x7e, 0x1d, 0x05, 0xff, 0x57, 0xc4, 0x3f, 0x90, 0x1d,
	0x5c, 0xf7, 0xfa, 0x4b, 0xe6, 0x25, 0x1f, 0xff, 0xc2, 0xb2, 0xb3, 0x4f, 0x9a, 0xbf, 0x02, 0x5c,
	0xf3, 0xed, 0xbf, 0xfc, 0x3a, 0x77, 0xad, 0xf3, 0xb9, 0x6b, 0xfd, 0x98, 0xbb, 0xd6, 0xa7, 0x85,
	0x5b, 0x39, 0x5f, 0xb8, 0x95, 0x6f, 0x0b, 0xb7, 0xf2, 0xee, 0xe1, 0x9f, 0x07, 0xc8, 0x1f, 0xac,
	0xa0, 0x91, 0xbd, 0x00, 0x8f, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x99, 0x49, 0x84, 0x26, 0x16,
	0x05, 0x00, 0x00,
}

func (m *MsgStartKeygen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartKeygen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartKeygen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Participants[iNdEx])
			copy(dAtA[i:], m.Participants[iNdEx])
			i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Participants[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPubkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPubkey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPubkey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartKeygenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartKeygenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartKeygenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPubkeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPubkeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPubkeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SigID) > 0 {
		i -= len(m.SigID)
		copy(dAtA[i:], m.SigID)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.SigID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitSignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitSignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitSignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTypesMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgStartKeygen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	if len(m.Participants) > 0 {
		for _, b := range m.Participants {
			l = len(b)
			n += 1 + l + sovTypesMsg(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitPubkey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	return n
}

func (m *MsgStartKeygenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitPubkeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.SigID)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	return n
}

func (m *MsgSubmitSignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTypesMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesMsg(x uint64) (n int) {
	return sovTypesMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgStartKeygen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartKeygen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartKeygen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_many_things_mitosis_x_multisig_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, make([]byte, postIndex-iNdEx))
			copy(m.Participants[len(m.Participants)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPubkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPubkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPubkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_many_things_mitosis_x_multisig_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = append(m.Participant[:0], dAtA[iNdEx:postIndex]...)
			if m.Participant == nil {
				m.Participant = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartKeygenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartKeygenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartKeygenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPubkeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPubkeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPubkeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigID = github_com_many_things_mitosis_x_multisig_exported.SigID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = append(m.Participant[:0], dAtA[iNdEx:postIndex]...)
			if m.Participant == nil {
				m.Participant = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitSignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesMsg = fmt.Errorf("proto: unexpected end of group")
)
