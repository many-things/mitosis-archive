// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/context/v1beta1/server/types_msg.proto

package server

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSignerReady notifies mitosis chain that the initialized signer is ready to use
type MsgSignerReady struct {
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	Chain  string                                        `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *MsgSignerReady) Reset()         { *m = MsgSignerReady{} }
func (m *MsgSignerReady) String() string { return proto.CompactTextString(m) }
func (*MsgSignerReady) ProtoMessage()    {}
func (*MsgSignerReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3dc66b8b1d363cb, []int{0}
}
func (m *MsgSignerReady) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignerReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignerReady.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignerReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignerReady.Merge(m, src)
}
func (m *MsgSignerReady) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignerReady) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignerReady.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignerReady proto.InternalMessageInfo

func (m *MsgSignerReady) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *MsgSignerReady) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

// Response of [MsgSignerReady]
type MsgSignerReadyResponse struct {
}

func (m *MsgSignerReadyResponse) Reset()         { *m = MsgSignerReadyResponse{} }
func (m *MsgSignerReadyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignerReadyResponse) ProtoMessage()    {}
func (*MsgSignerReadyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3dc66b8b1d363cb, []int{1}
}
func (m *MsgSignerReadyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignerReadyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignerReadyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignerReadyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignerReadyResponse.Merge(m, src)
}
func (m *MsgSignerReadyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignerReadyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignerReadyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignerReadyResponse proto.InternalMessageInfo

// MsgRegisterCosmosSigner initializes signer for a cosmos sdk based chains
type MsgRegisterCosmosSigner struct {
	Sender        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	Chain         string                                        `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	PubKey        []byte                                        `protobuf:"bytes,3,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	AccountNumber uint64                                        `protobuf:"varint,4,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Sequence      uint64                                        `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *MsgRegisterCosmosSigner) Reset()         { *m = MsgRegisterCosmosSigner{} }
func (m *MsgRegisterCosmosSigner) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCosmosSigner) ProtoMessage()    {}
func (*MsgRegisterCosmosSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3dc66b8b1d363cb, []int{2}
}
func (m *MsgRegisterCosmosSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCosmosSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCosmosSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCosmosSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCosmosSigner.Merge(m, src)
}
func (m *MsgRegisterCosmosSigner) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCosmosSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCosmosSigner.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCosmosSigner proto.InternalMessageInfo

func (m *MsgRegisterCosmosSigner) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *MsgRegisterCosmosSigner) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgRegisterCosmosSigner) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *MsgRegisterCosmosSigner) GetAccountNumber() uint64 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *MsgRegisterCosmosSigner) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// Response of [MsgRegisterCosmosSigner]
type MsgRegisterCosmosSignerResponse struct {
}

func (m *MsgRegisterCosmosSignerResponse) Reset()         { *m = MsgRegisterCosmosSignerResponse{} }
func (m *MsgRegisterCosmosSignerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCosmosSignerResponse) ProtoMessage()    {}
func (*MsgRegisterCosmosSignerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3dc66b8b1d363cb, []int{3}
}
func (m *MsgRegisterCosmosSignerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCosmosSignerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCosmosSignerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCosmosSignerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCosmosSignerResponse.Merge(m, src)
}
func (m *MsgRegisterCosmosSignerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCosmosSignerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCosmosSignerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCosmosSignerResponse proto.InternalMessageInfo

// MsgRegisterEVMSigner initializes signer for a evm based chains
type MsgRegisterEVMSigner struct {
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	Chain  string                                        `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	PubKey []byte                                        `protobuf:"bytes,3,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Nonce  uint64                                        `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgRegisterEVMSigner) Reset()         { *m = MsgRegisterEVMSigner{} }
func (m *MsgRegisterEVMSigner) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterEVMSigner) ProtoMessage()    {}
func (*MsgRegisterEVMSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3dc66b8b1d363cb, []int{4}
}
func (m *MsgRegisterEVMSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterEVMSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterEVMSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterEVMSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterEVMSigner.Merge(m, src)
}
func (m *MsgRegisterEVMSigner) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterEVMSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterEVMSigner.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterEVMSigner proto.InternalMessageInfo

func (m *MsgRegisterEVMSigner) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *MsgRegisterEVMSigner) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgRegisterEVMSigner) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *MsgRegisterEVMSigner) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// Response of [MsgRegisterEVMSigner]
type MsgRegisterEVMSignerResponse struct {
}

func (m *MsgRegisterEVMSignerResponse) Reset()         { *m = MsgRegisterEVMSignerResponse{} }
func (m *MsgRegisterEVMSignerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterEVMSignerResponse) ProtoMessage()    {}
func (*MsgRegisterEVMSignerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3dc66b8b1d363cb, []int{5}
}
func (m *MsgRegisterEVMSignerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterEVMSignerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterEVMSignerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterEVMSignerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterEVMSignerResponse.Merge(m, src)
}
func (m *MsgRegisterEVMSignerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterEVMSignerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterEVMSignerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterEVMSignerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSignerReady)(nil), "manythings.mitosis.v1beta1.context.server.MsgSignerReady")
	proto.RegisterType((*MsgSignerReadyResponse)(nil), "manythings.mitosis.v1beta1.context.server.MsgSignerReadyResponse")
	proto.RegisterType((*MsgRegisterCosmosSigner)(nil), "manythings.mitosis.v1beta1.context.server.MsgRegisterCosmosSigner")
	proto.RegisterType((*MsgRegisterCosmosSignerResponse)(nil), "manythings.mitosis.v1beta1.context.server.MsgRegisterCosmosSignerResponse")
	proto.RegisterType((*MsgRegisterEVMSigner)(nil), "manythings.mitosis.v1beta1.context.server.MsgRegisterEVMSigner")
	proto.RegisterType((*MsgRegisterEVMSignerResponse)(nil), "manythings.mitosis.v1beta1.context.server.MsgRegisterEVMSignerResponse")
}

func init() {
	proto.RegisterFile("mitosis/context/v1beta1/server/types_msg.proto", fileDescriptor_d3dc66b8b1d363cb)
}

var fileDescriptor_d3dc66b8b1d363cb = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0xc1, 0xea, 0xd3, 0x40,
	0x10, 0xc6, 0xbb, 0xda, 0x56, 0x5d, 0xb4, 0x87, 0x10, 0x6c, 0x28, 0x92, 0xd6, 0x80, 0x50, 0x0f,
	0xcd, 0x52, 0x7c, 0x82, 0x56, 0x3c, 0x14, 0xa9, 0x87, 0x08, 0x1e, 0xbc, 0x94, 0x64, 0x33, 0x6c,
	0x43, 0xc9, 0x6e, 0xba, 0xb3, 0x29, 0xcd, 0x5b, 0xf8, 0x14, 0x3e, 0x8b, 0xc7, 0x9e, 0xc4, 0x93,
	0x48, 0xfb, 0x16, 0x9e, 0xa4, 0xd9, 0xb4, 0x56, 0xd0, 0xa3, 0xfc, 0x4f, 0xbb, 0x33, 0xcc, 0x37,
	0xf3, 0x7d, 0xf0, 0xa3, 0x61, 0x9e, 0x19, 0x85, 0x19, 0x32, 0xae, 0xa4, 0x81, 0xbd, 0x61, 0xbb,
	0x69, 0x02, 0x26, 0x9e, 0x32, 0x04, 0xbd, 0x03, 0xcd, 0x4c, 0x55, 0x00, 0xae, 0x72, 0x14, 0x61,
	0xa1, 0x95, 0x51, 0xce, 0xcb, 0x3c, 0x96, 0x95, 0x59, 0x67, 0x52, 0xe0, 0x45, 0x1a, 0x36, 0x92,
	0xb0, 0x59, 0x11, 0x5a, 0xe9, 0xc0, 0x15, 0x4a, 0xa8, 0x5a, 0xc5, 0xce, 0x3f, 0xbb, 0x20, 0xd8,
	0xd2, 0xde, 0x12, 0xc5, 0xfb, 0x4c, 0x48, 0xd0, 0x11, 0xc4, 0x69, 0xe5, 0x2c, 0x68, 0x17, 0x41,
	0xa6, 0xa0, 0x3d, 0x32, 0x22, 0xe3, 0xc7, 0xf3, 0xe9, 0xcf, 0xef, 0xc3, 0x89, 0xc8, 0xcc, 0xba,
	0x4c, 0x42, 0xae, 0x72, 0xc6, 0x15, 0xe6, 0x0a, 0x9b, 0x67, 0x82, 0xe9, 0xc6, 0x9a, 0x0a, 0x67,
	0x9c, 0xcf, 0xd2, 0x54, 0x03, 0x62, 0xd4, 0x2c, 0x70, 0x5c, 0xda, 0xe1, 0xeb, 0x38, 0x93, 0xde,
	0xbd, 0x11, 0x19, 0x3f, 0x8a, 0x6c, 0x11, 0x78, 0xf4, 0xe9, 0x9f, 0x27, 0x23, 0xc0, 0x42, 0x49,
	0x84, 0xe0, 0x2b, 0xa1, 0xfd, 0x25, 0x8a, 0x08, 0x44, 0x86, 0x06, 0xf4, 0xeb, 0xfa, 0x84, 0x1d,
	0xfc, 0xef, 0xb6, 0x9c, 0x3e, 0x7d, 0x50, 0x94, 0xc9, 0x6a, 0x03, 0x95, 0x77, 0xff, 0x7c, 0x21,
	0xea, 0x16, 0x65, 0xf2, 0x16, 0x2a, 0xe7, 0x05, 0xed, 0xc5, 0x9c, 0xab, 0x52, 0x9a, 0x95, 0x2c,
	0xf3, 0x04, 0xb4, 0xd7, 0x1e, 0x91, 0x71, 0x3b, 0x7a, 0xd2, 0x74, 0xdf, 0xd5, 0x4d, 0x67, 0x40,
	0x1f, 0x22, 0x6c, 0x4b, 0x90, 0x1c, 0xbc, 0x4e, 0x3d, 0x70, 0xad, 0x83, 0xe7, 0x74, 0xf8, 0x8f,
	0x5c, 0xd7, 0xec, 0x9f, 0x09, 0x75, 0x6f, 0x66, 0xde, 0x7c, 0x58, 0xde, 0x79, 0x70, 0x97, 0x76,
	0xa4, 0xfa, 0x1d, 0xc7, 0x16, 0x81, 0x4f, 0x9f, 0xfd, 0xcd, 0xe7, 0x25, 0xc8, 0x7c, 0xf1, 0xe5,
	0xe8, 0x93, 0xc3, 0xd1, 0x27, 0x3f, 0x8e, 0x3e, 0xf9, 0x74, 0xf2, 0x5b, 0x87, 0x93, 0xdf, 0xfa,
	0x76, 0xf2, 0x5b, 0x1f, 0xd9, 0x8d, 0xeb, 0x33, 0xb7, 0x13, 0x0b, 0x2e, 0xbb, 0x30, 0xbf, 0xbf,
	0x52, 0x6f, 0x91, 0x4d, 0xba, 0x35, 0xa3, 0xaf, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xcc,
	0xa6, 0x7a, 0x16, 0x03, 0x00, 0x00,
}

func (m *MsgSignerReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignerReady) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignerReady) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignerReadyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignerReadyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignerReadyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterCosmosSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCosmosSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCosmosSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintTypesMsg(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x28
	}
	if m.AccountNumber != 0 {
		i = encodeVarintTypesMsg(dAtA, i, uint64(m.AccountNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterCosmosSignerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCosmosSignerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCosmosSignerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterEVMSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterEVMSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterEVMSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTypesMsg(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypesMsg(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterEVMSignerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterEVMSignerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterEVMSignerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTypesMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSignerReady) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	return n
}

func (m *MsgSignerReadyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterCosmosSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	if m.AccountNumber != 0 {
		n += 1 + sovTypesMsg(uint64(m.AccountNumber))
	}
	if m.Sequence != 0 {
		n += 1 + sovTypesMsg(uint64(m.Sequence))
	}
	return n
}

func (m *MsgRegisterCosmosSignerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterEVMSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTypesMsg(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTypesMsg(uint64(m.Nonce))
	}
	return n
}

func (m *MsgRegisterEVMSignerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTypesMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesMsg(x uint64) (n int) {
	return sovTypesMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSignerReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignerReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignerReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignerReadyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignerReadyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignerReadyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterCosmosSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCosmosSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCosmosSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			m.AccountNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterCosmosSignerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCosmosSignerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCosmosSignerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterEVMSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterEVMSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterEVMSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterEVMSignerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterEVMSignerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterEVMSignerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypesMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesMsg = fmt.Errorf("proto: unexpected end of group")
)
