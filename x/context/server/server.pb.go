// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/context/v1beta1/server/server.proto

package server

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("mitosis/context/v1beta1/server/server.proto", fileDescriptor_dedfb9d857bae9e1)
}

var fileDescriptor_dedfb9d857bae9e1 = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4f, 0x6b, 0x14, 0x31,
	0x18, 0xc6, 0x37, 0x16, 0x17, 0x8c, 0x07, 0x31, 0x78, 0x0a, 0x32, 0x62, 0x11, 0x4a, 0x15, 0x13,
	0x5b, 0x41, 0xa8, 0xa2, 0xd2, 0x95, 0xe2, 0x1f, 0x58, 0xd4, 0x15, 0x3c, 0x78, 0x29, 0xd9, 0x6d,
	0xc8, 0x04, 0x9c, 0x64, 0xcc, 0x9b, 0x96, 0x1d, 0xca, 0x5e, 0x3c, 0x09, 0x5e, 0x04, 0xcf, 0x5e,
	0x05, 0xbf, 0x81, 0xf8, 0x09, 0x3c, 0x16, 0xbc, 0x88, 0x78, 0x90, 0x5d, 0x3f, 0x88, 0xec, 0x64,
	0x36, 0x28, 0x58, 0x76, 0x67, 0xf6, 0x34, 0x73, 0x78, 0x7f, 0xcf, 0xf3, 0x0b, 0x79, 0x67, 0xf0,
	0x95, 0x4c, 0x7b, 0x0b, 0x1a, 0xf8, 0xc0, 0x1a, 0x2f, 0x87, 0x9e, 0x1f, 0x6c, 0xf4, 0xa5, 0x17,
	0x1b, 0x1c, 0xa4, 0x3b, 0x90, 0xae, 0x7a, 0xb0, 0xdc, 0x59, 0x6f, 0xc9, 0x7a, 0x26, 0x4c, 0xe1,
	0x53, 0x6d, 0x14, 0xb0, 0x8a, 0x63, 0xd5, 0x3c, 0xab, 0x78, 0x16, 0x00, 0x7a, 0x5e, 0x59, 0xab,
	0x5e, 0x4a, 0x2e, 0x72, 0xcd, 0x85, 0x31, 0xd6, 0x0b, 0xaf, 0xad, 0x81, 0x10, 0x44, 0xd9, 0x9c,
	0x56, 0x5f, 0xe4, 0x12, 0x76, 0x33, 0x50, 0xd5, 0xfc, 0xb5, 0x85, 0xe6, 0x5f, 0xed, 0x4b, 0x57,
	0x04, 0x62, 0xf3, 0xe7, 0x0a, 0x5e, 0xe9, 0x82, 0x22, 0x6f, 0x11, 0x3e, 0xfd, 0x4c, 0x2b, 0x23,
	0x5d, 0x4f, 0x8a, 0xbd, 0x82, 0x6c, 0xb1, 0x85, 0xcf, 0xc0, 0xba, 0xa0, 0xfe, 0x42, 0xe9, 0x76,
	0x63, 0xb4, 0x27, 0x21, 0xb7, 0x06, 0x24, 0xf9, 0x88, 0xf0, 0xb9, 0x9e, 0x54, 0x1a, 0xbc, 0x74,
	0xf7, 0x2c, 0x64, 0x16, 0xc2, 0x14, 0xe9, 0xd4, 0xcb, 0xfe, 0x5f, 0x06, 0x7d, 0xb4, 0x7c, 0x46,
	0x14, 0xfd, 0x80, 0xf0, 0xd9, 0xd9, 0xc0, 0xce, 0xf3, 0x6e, 0x65, 0x79, 0xb7, 0x59, 0x43, 0x0c,
	0xa0, 0xf7, 0x97, 0x0c, 0x98, 0xf9, 0x6d, 0xbe, 0x69, 0xe3, 0x93, 0x4f, 0xa7, 0xd7, 0x4d, 0x3e,
	0x21, 0xdc, 0x7e, 0x22, 0x9c, 0xc8, 0x80, 0xdc, 0xa8, 0x91, 0x5e, 0xc2, 0x81, 0xa3, 0x77, 0x9a,
	0x71, 0x33, 0x99, 0xd5, 0xb5, 0xd7, 0xdf, 0x7e, 0xbf, 0x3f, 0x71, 0x91, 0x5c, 0xe0, 0xc7, 0xad,
	0x69, 0x1e, 0x04, 0xbf, 0x20, 0x7c, 0xea, 0x71, 0x2e, 0x5d, 0xf9, 0x2d, 0xd4, 0x5a, 0xc5, 0xb2,
	0x36, 0xa2, 0xb5, 0x56, 0xf1, 0x5f, 0x34, 0x4a, 0xf3, 0x52, 0x7a, 0x9d, 0xac, 0x1d, 0x2b, 0x6d,
	0x67, 0x0c, 0x3f, 0xd4, 0x7b, 0x23, 0xf2, 0x19, 0x61, 0x1c, 0x63, 0x80, 0xdc, 0x6c, 0xac, 0x00,
	0xb4, 0xd3, 0x9c, 0x8d, 0xfe, 0x97, 0x4b, 0xff, 0x4b, 0x64, 0x75, 0xbe, 0x3f, 0xf9, 0x81, 0xf0,
	0x99, 0x18, 0xd1, 0x29, 0x1e, 0x08, 0x48, 0xc9, 0xed, 0xc6, 0x0e, 0x53, 0x9c, 0xee, 0x2c, 0x85,
	0xc7, 0x53, 0x6c, 0x97, 0xa7, 0xb8, 0x45, 0xb6, 0x16, 0xb9, 0x85, 0x41, 0x2a, 0xb4, 0x19, 0xf1,
	0x54, 0x40, 0xca, 0x0f, 0xfd, 0x70, 0x77, 0xfa, 0x32, 0xea, 0x3c, 0xfc, 0x3a, 0x4e, 0xd0, 0xd1,
	0x38, 0x41, 0xbf, 0xc6, 0x09, 0x7a, 0x37, 0x49, 0x5a, 0x47, 0x93, 0xa4, 0xf5, 0x7d, 0x92, 0xb4,
	0x5e, 0x70, 0xa5, 0x7d, 0xba, 0xdf, 0x67, 0x03, 0x9b, 0xf1, 0xa9, 0xed, 0xd5, 0xa0, 0x1b, 0xab,
	0x86, 0xb1, 0x2c, 0x88, 0xf6, 0xdb, 0xe5, 0xbf, 0xf3, 0xfa, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa3, 0x55, 0x00, 0x9d, 0x15, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// notify the server that a new signer is ready
	SignerReady(ctx context.Context, in *MsgSignerReady, opts ...grpc.CallOption) (*MsgSignerReadyResponse, error)
	// registers a new Cosmos signer
	RegisterCosmosSigner(ctx context.Context, in *MsgRegisterCosmosSigner, opts ...grpc.CallOption) (*MsgRegisterCosmosSignerResponse, error)
	// registers a new EVM signer
	RegisterEVMSigner(ctx context.Context, in *MsgRegisterEVMSigner, opts ...grpc.CallOption) (*MsgRegisterEVMSignerResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SignerReady(ctx context.Context, in *MsgSignerReady, opts ...grpc.CallOption) (*MsgSignerReadyResponse, error) {
	out := new(MsgSignerReadyResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.context.server.Msg/SignerReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterCosmosSigner(ctx context.Context, in *MsgRegisterCosmosSigner, opts ...grpc.CallOption) (*MsgRegisterCosmosSignerResponse, error) {
	out := new(MsgRegisterCosmosSignerResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.context.server.Msg/RegisterCosmosSigner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterEVMSigner(ctx context.Context, in *MsgRegisterEVMSigner, opts ...grpc.CallOption) (*MsgRegisterEVMSignerResponse, error) {
	out := new(MsgRegisterEVMSignerResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.context.server.Msg/RegisterEVMSigner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// notify the server that a new signer is ready
	SignerReady(context.Context, *MsgSignerReady) (*MsgSignerReadyResponse, error)
	// registers a new Cosmos signer
	RegisterCosmosSigner(context.Context, *MsgRegisterCosmosSigner) (*MsgRegisterCosmosSignerResponse, error)
	// registers a new EVM signer
	RegisterEVMSigner(context.Context, *MsgRegisterEVMSigner) (*MsgRegisterEVMSignerResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SignerReady(ctx context.Context, req *MsgSignerReady) (*MsgSignerReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignerReady not implemented")
}
func (*UnimplementedMsgServer) RegisterCosmosSigner(ctx context.Context, req *MsgRegisterCosmosSigner) (*MsgRegisterCosmosSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCosmosSigner not implemented")
}
func (*UnimplementedMsgServer) RegisterEVMSigner(ctx context.Context, req *MsgRegisterEVMSigner) (*MsgRegisterEVMSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEVMSigner not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SignerReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignerReady)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignerReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.context.server.Msg/SignerReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignerReady(ctx, req.(*MsgSignerReady))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterCosmosSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterCosmosSigner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterCosmosSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.context.server.Msg/RegisterCosmosSigner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterCosmosSigner(ctx, req.(*MsgRegisterCosmosSigner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterEVMSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterEVMSigner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterEVMSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.context.server.Msg/RegisterEVMSigner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterEVMSigner(ctx, req.(*MsgRegisterEVMSigner))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manythings.mitosis.v1beta1.context.server.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignerReady",
			Handler:    _Msg_SignerReady_Handler,
		},
		{
			MethodName: "RegisterCosmosSigner",
			Handler:    _Msg_RegisterCosmosSigner_Handler,
		},
		{
			MethodName: "RegisterEVMSigner",
			Handler:    _Msg_RegisterEVMSigner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mitosis/context/v1beta1/server/server.proto",
}

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Get single operation
	Operation(ctx context.Context, in *QueryOperation, opts ...grpc.CallOption) (*QueryOperationResponse, error)
	// List multiple operations
	Operations(ctx context.Context, in *QueryOperations, opts ...grpc.CallOption) (*QueryOperationsResponse, error)
	// Get Operation by TxHash
	OperationByHash(ctx context.Context, in *QueryOperationHash, opts ...grpc.CallOption) (*QueryOperationHashResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.context.server.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Operation(ctx context.Context, in *QueryOperation, opts ...grpc.CallOption) (*QueryOperationResponse, error) {
	out := new(QueryOperationResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.context.server.Query/Operation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Operations(ctx context.Context, in *QueryOperations, opts ...grpc.CallOption) (*QueryOperationsResponse, error) {
	out := new(QueryOperationsResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.context.server.Query/Operations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperationByHash(ctx context.Context, in *QueryOperationHash, opts ...grpc.CallOption) (*QueryOperationHashResponse, error) {
	out := new(QueryOperationHashResponse)
	err := c.cc.Invoke(ctx, "/manythings.mitosis.v1beta1.context.server.Query/OperationByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParams) (*QueryParamsResponse, error)
	// Get single operation
	Operation(context.Context, *QueryOperation) (*QueryOperationResponse, error)
	// List multiple operations
	Operations(context.Context, *QueryOperations) (*QueryOperationsResponse, error)
	// Get Operation by TxHash
	OperationByHash(context.Context, *QueryOperationHash) (*QueryOperationHashResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParams) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Operation(ctx context.Context, req *QueryOperation) (*QueryOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Operation not implemented")
}
func (*UnimplementedQueryServer) Operations(ctx context.Context, req *QueryOperations) (*QueryOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Operations not implemented")
}
func (*UnimplementedQueryServer) OperationByHash(ctx context.Context, req *QueryOperationHash) (*QueryOperationHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperationByHash not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.context.server.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Operation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Operation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.context.server.Query/Operation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Operation(ctx, req.(*QueryOperation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Operations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Operations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.context.server.Query/Operations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Operations(ctx, req.(*QueryOperations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperationByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperationHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperationByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manythings.mitosis.v1beta1.context.server.Query/OperationByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperationByHash(ctx, req.(*QueryOperationHash))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manythings.mitosis.v1beta1.context.server.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Operation",
			Handler:    _Query_Operation_Handler,
		},
		{
			MethodName: "Operations",
			Handler:    _Query_Operations_Handler,
		},
		{
			MethodName: "OperationByHash",
			Handler:    _Query_OperationByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mitosis/context/v1beta1/server/server.proto",
}
