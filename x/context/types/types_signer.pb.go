// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/context/v1beta1/types_signer.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/many-things/mitosis/pkg/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SignerStatus
type Signer_Status int32

const (
	// Unspecified operation status
	Signer_StatusUnspecified Signer_Status = 0
	// Signer is initializing
	Signer_StatusInit Signer_Status = 1
	// Signer is ready
	Signer_StatusReady Signer_Status = 2
)

var Signer_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_INIT",
	2: "STATUS_READY",
}

var Signer_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_INIT":        1,
	"STATUS_READY":       2,
}

func (x Signer_Status) String() string {
	return proto.EnumName(Signer_Status_name, int32(x))
}

func (Signer_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b2db616ddebc0fb9, []int{2, 0}
}

// Signer payload for Cosmos chains
type CosmosSigner struct {
	Prefix         string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	AccountNumber  uint64 `protobuf:"varint,2,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	SequenceNumber uint64 `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (m *CosmosSigner) Reset()         { *m = CosmosSigner{} }
func (m *CosmosSigner) String() string { return proto.CompactTextString(m) }
func (*CosmosSigner) ProtoMessage()    {}
func (*CosmosSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2db616ddebc0fb9, []int{0}
}
func (m *CosmosSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosmosSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosmosSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosmosSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosmosSigner.Merge(m, src)
}
func (m *CosmosSigner) XXX_Size() int {
	return m.Size()
}
func (m *CosmosSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_CosmosSigner.DiscardUnknown(m)
}

var xxx_messageInfo_CosmosSigner proto.InternalMessageInfo

func (m *CosmosSigner) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *CosmosSigner) GetAccountNumber() uint64 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *CosmosSigner) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

// Signer payload for EVM based chains
type EvmSigner struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *EvmSigner) Reset()         { *m = EvmSigner{} }
func (m *EvmSigner) String() string { return proto.CompactTextString(m) }
func (*EvmSigner) ProtoMessage()    {}
func (*EvmSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2db616ddebc0fb9, []int{1}
}
func (m *EvmSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvmSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvmSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvmSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvmSigner.Merge(m, src)
}
func (m *EvmSigner) XXX_Size() int {
	return m.Size()
}
func (m *EvmSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_EvmSigner.DiscardUnknown(m)
}

var xxx_messageInfo_EvmSigner proto.InternalMessageInfo

func (m *EvmSigner) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// Signer message
type Signer struct {
	// Signer chain
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// Signer public key
	PubKey []byte `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// Signer status
	Status Signer_Status   `protobuf:"varint,3,opt,name=status,proto3,enum=manythings.mitosis.v1beta1.context.Signer_Status" json:"status,omitempty"`
	Type   types.ChainType `protobuf:"varint,4,opt,name=type,proto3,enum=manythings.mitosis.v1beta1.common.ChainType" json:"type,omitempty"`
	// Signer payload
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*Signer_Cosmos
	//	*Signer_Evm
	Payload isSigner_Payload `protobuf_oneof:"payload"`
}

func (m *Signer) Reset()         { *m = Signer{} }
func (m *Signer) String() string { return proto.CompactTextString(m) }
func (*Signer) ProtoMessage()    {}
func (*Signer) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2db616ddebc0fb9, []int{2}
}
func (m *Signer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signer.Merge(m, src)
}
func (m *Signer) XXX_Size() int {
	return m.Size()
}
func (m *Signer) XXX_DiscardUnknown() {
	xxx_messageInfo_Signer.DiscardUnknown(m)
}

var xxx_messageInfo_Signer proto.InternalMessageInfo

type isSigner_Payload interface {
	isSigner_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Signer_Cosmos struct {
	Cosmos *CosmosSigner `protobuf:"bytes,5,opt,name=cosmos,proto3,oneof" json:"cosmos,omitempty"`
}
type Signer_Evm struct {
	Evm *EvmSigner `protobuf:"bytes,6,opt,name=evm,proto3,oneof" json:"evm,omitempty"`
}

func (*Signer_Cosmos) isSigner_Payload() {}
func (*Signer_Evm) isSigner_Payload()    {}

func (m *Signer) GetPayload() isSigner_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Signer) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Signer) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Signer) GetStatus() Signer_Status {
	if m != nil {
		return m.Status
	}
	return Signer_StatusUnspecified
}

func (m *Signer) GetType() types.ChainType {
	if m != nil {
		return m.Type
	}
	return types.ChainType_TypeUnspecified
}

func (m *Signer) GetCosmos() *CosmosSigner {
	if x, ok := m.GetPayload().(*Signer_Cosmos); ok {
		return x.Cosmos
	}
	return nil
}

func (m *Signer) GetEvm() *EvmSigner {
	if x, ok := m.GetPayload().(*Signer_Evm); ok {
		return x.Evm
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Signer) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Signer_Cosmos)(nil),
		(*Signer_Evm)(nil),
	}
}

func init() {
	proto.RegisterEnum("manythings.mitosis.v1beta1.context.Signer_Status", Signer_Status_name, Signer_Status_value)
	proto.RegisterType((*CosmosSigner)(nil), "manythings.mitosis.v1beta1.context.CosmosSigner")
	proto.RegisterType((*EvmSigner)(nil), "manythings.mitosis.v1beta1.context.EvmSigner")
	proto.RegisterType((*Signer)(nil), "manythings.mitosis.v1beta1.context.Signer")
}

func init() {
	proto.RegisterFile("mitosis/context/v1beta1/types_signer.proto", fileDescriptor_b2db616ddebc0fb9)
}

var fileDescriptor_b2db616ddebc0fb9 = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xdf, 0x8e, 0xd2, 0x4c,
	0x14, 0x6f, 0x17, 0xb6, 0x1b, 0x06, 0x3e, 0x96, 0x6f, 0xb2, 0x2a, 0xe1, 0xa2, 0x76, 0x9b, 0x18,
	0x89, 0x91, 0x56, 0xd6, 0x17, 0x90, 0x65, 0x31, 0x54, 0x13, 0x62, 0x0a, 0x5c, 0xe8, 0x0d, 0x69,
	0xcb, 0x6c, 0x99, 0x68, 0x67, 0x2a, 0x33, 0x25, 0x34, 0xbe, 0x01, 0x57, 0xbe, 0x00, 0xef, 0xe3,
	0xe5, 0x5e, 0x9a, 0x78, 0x63, 0xe0, 0x45, 0x4c, 0x67, 0x86, 0x5d, 0xbd, 0xd1, 0xbd, 0xeb, 0x39,
	0xf9, 0xfd, 0x39, 0xe7, 0xd7, 0x33, 0xe0, 0x59, 0x82, 0x39, 0x65, 0x98, 0xb9, 0x11, 0x25, 0x1c,
	0xad, 0xb9, 0xbb, 0xea, 0x86, 0x88, 0x07, 0x5d, 0x97, 0xe7, 0x29, 0x62, 0x33, 0x86, 0x63, 0x82,
	0x96, 0x4e, 0xba, 0xa4, 0x9c, 0x42, 0x3b, 0x09, 0x48, 0xce, 0x17, 0x98, 0xc4, 0xcc, 0x51, 0x34,
	0x47, 0xc1, 0x1d, 0x45, 0x6f, 0x9d, 0xc5, 0x34, 0xa6, 0x02, 0xee, 0x16, 0x5f, 0x92, 0xd9, 0xb2,
	0xef, 0x5c, 0x92, 0x84, 0x92, 0x3f, 0x4d, 0x24, 0xc6, 0x5e, 0x81, 0x5a, 0x9f, 0xb2, 0x84, 0xb2,
	0xb1, 0xf0, 0x84, 0x0f, 0x81, 0x91, 0x2e, 0xd1, 0x35, 0x5e, 0x37, 0x75, 0x4b, 0x6f, 0x57, 0x7c,
	0x55, 0xc1, 0x27, 0xa0, 0x1e, 0x44, 0x11, 0xcd, 0x08, 0x9f, 0x91, 0x2c, 0x09, 0xd1, 0xb2, 0x79,
	0x64, 0xe9, 0xed, 0xb2, 0xff, 0x9f, 0xea, 0x8e, 0x44, 0x13, 0x3e, 0x05, 0xa7, 0x0c, 0x7d, 0xce,
	0x10, 0x89, 0xd0, 0x01, 0x57, 0x12, 0xb8, 0xfa, 0xa1, 0x2d, 0x81, 0xf6, 0x39, 0xa8, 0x0c, 0x56,
	0x89, 0x32, 0x3d, 0x03, 0xc7, 0x84, 0x92, 0x08, 0x09, 0xcf, 0xb2, 0x2f, 0x0b, 0xfb, 0x47, 0x09,
	0x18, 0x77, 0x80, 0x68, 0x11, 0x60, 0xa2, 0x86, 0x92, 0x05, 0x7c, 0x04, 0x4e, 0xd2, 0x2c, 0x9c,
	0x7d, 0x44, 0xb9, 0x18, 0xa6, 0xe6, 0x1b, 0x69, 0x16, 0xbe, 0x45, 0x39, 0xf4, 0x80, 0xc1, 0x78,
	0xc0, 0x33, 0x26, 0xcc, 0xeb, 0x17, 0x5d, 0xe7, 0xdf, 0x19, 0x3a, 0xd2, 0xca, 0x19, 0x0b, 0xa2,
	0xaf, 0x04, 0xe0, 0x2b, 0x50, 0x2e, 0xe2, 0x6a, 0x96, 0x85, 0xd0, 0xf3, 0xbf, 0x0b, 0x15, 0x29,
	0x3b, 0xfd, 0x62, 0xb6, 0x49, 0x9e, 0x22, 0x5f, 0x30, 0xe1, 0x1b, 0x60, 0x44, 0x22, 0xe1, 0xe6,
	0xb1, 0xa5, 0xb7, 0xab, 0x17, 0x2f, 0xee, 0x33, 0xcc, 0xef, 0xff, 0x64, 0xa8, 0xf9, 0x4a, 0x01,
	0xf6, 0x40, 0x09, 0xad, 0x92, 0xa6, 0x21, 0x84, 0x3a, 0xf7, 0x11, 0xba, 0x0d, 0x79, 0xa8, 0xf9,
	0x05, 0xd7, 0xfe, 0x02, 0x0c, 0xb9, 0x22, 0xec, 0x00, 0x38, 0x9e, 0xf4, 0x26, 0xd3, 0xf1, 0x6c,
	0x3a, 0x1a, 0xbf, 0x1b, 0xf4, 0xbd, 0xd7, 0xde, 0xe0, 0xaa, 0xa1, 0xb5, 0x1e, 0x6c, 0xb6, 0xd6,
	0xff, 0x12, 0x33, 0x25, 0x2c, 0x45, 0x11, 0xbe, 0xc6, 0x68, 0x0e, 0x1f, 0x83, 0xaa, 0x82, 0x7b,
	0x23, 0x6f, 0xd2, 0xd0, 0x5b, 0xf5, 0xcd, 0xd6, 0x02, 0x12, 0xe7, 0x11, 0xcc, 0xe1, 0x39, 0xa8,
	0x29, 0x80, 0x3f, 0xe8, 0x5d, 0xbd, 0x6f, 0x1c, 0xb5, 0x4e, 0x37, 0x5b, 0xab, 0xaa, 0x02, 0x45,
	0xc1, 0x3c, 0xbf, 0xac, 0x80, 0x93, 0x34, 0xc8, 0x3f, 0xd1, 0x60, 0x7e, 0x39, 0xfc, 0xb6, 0x33,
	0xf5, 0x9b, 0x9d, 0xa9, 0xff, 0xdc, 0x99, 0xfa, 0xd7, 0xbd, 0xa9, 0xdd, 0xec, 0x4d, 0xed, 0xfb,
	0xde, 0xd4, 0x3e, 0x38, 0x31, 0xe6, 0x8b, 0x2c, 0x2c, 0xf2, 0x74, 0x8b, 0x0d, 0x3b, 0x72, 0x45,
	0xf7, 0x70, 0xcd, 0xeb, 0xdb, 0x57, 0x23, 0x0e, 0x39, 0x34, 0xc4, 0x25, 0xbf, 0xfc, 0x15, 0x00,
	0x00, 0xff, 0xff, 0x33, 0x85, 0x79, 0x33, 0x55, 0x03, 0x00, 0x00,
}

func (m *CosmosSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosmosSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosmosSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		i = encodeVarintTypesSigner(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.AccountNumber != 0 {
		i = encodeVarintTypesSigner(dAtA, i, uint64(m.AccountNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintTypesSigner(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvmSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvmSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvmSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTypesSigner(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Signer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintTypesSigner(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintTypesSigner(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTypesSigner(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypesSigner(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Signer_Cosmos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signer_Cosmos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cosmos != nil {
		{
			size, err := m.Cosmos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesSigner(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Signer_Evm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signer_Evm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Evm != nil {
		{
			size, err := m.Evm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesSigner(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypesSigner(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesSigner(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CosmosSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovTypesSigner(uint64(l))
	}
	if m.AccountNumber != 0 {
		n += 1 + sovTypesSigner(uint64(m.AccountNumber))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovTypesSigner(uint64(m.SequenceNumber))
	}
	return n
}

func (m *EvmSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovTypesSigner(uint64(m.Nonce))
	}
	return n
}

func (m *Signer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypesSigner(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTypesSigner(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypesSigner(uint64(m.Status))
	}
	if m.Type != 0 {
		n += 1 + sovTypesSigner(uint64(m.Type))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *Signer_Cosmos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cosmos != nil {
		l = m.Cosmos.Size()
		n += 1 + l + sovTypesSigner(uint64(l))
	}
	return n
}
func (m *Signer_Evm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Evm != nil {
		l = m.Evm.Size()
		n += 1 + l + sovTypesSigner(uint64(l))
	}
	return n
}

func sovTypesSigner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesSigner(x uint64) (n int) {
	return sovTypesSigner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CosmosSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesSigner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosmosSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosmosSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesSigner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesSigner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			m.AccountNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypesSigner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesSigner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvmSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesSigner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvmSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvmSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypesSigner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesSigner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesSigner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesSigner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesSigner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesSigner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Signer_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cosmos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesSigner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesSigner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CosmosSigner{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Signer_Cosmos{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesSigner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesSigner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvmSigner{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Signer_Evm{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesSigner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesSigner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesSigner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesSigner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesSigner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesSigner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesSigner
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesSigner
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesSigner
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesSigner        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesSigner          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesSigner = fmt.Errorf("proto: unexpected end of group")
)
