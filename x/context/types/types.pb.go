// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/context/v1beta1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OperationStatus
type Operation_Status int32

const (
	// Unspecified operation status
	Operation_StatusUnspecified Operation_Status = 0
	// Pending operation status
	Operation_StatusPending Operation_Status = 1
	// Signing operation status
	Operation_StatusInitSign Operation_Status = 2
	// Executing operation status
	Operation_StatusFinishSign Operation_Status = 3
	// Finalized operation status
	Operation_StatusFinalized Operation_Status = 4
)

var Operation_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_PENDING",
	2: "STATUS_INIT_SIGN",
	3: "STATUS_FINISH_SIGN",
	4: "STATUS_FINALIZE",
}

var Operation_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_PENDING":     1,
	"STATUS_INIT_SIGN":   2,
	"STATUS_FINISH_SIGN": 3,
	"STATUS_FINALIZE":    4,
}

func (x Operation_Status) String() string {
	return proto.EnumName(Operation_Status_name, int32(x))
}

func (Operation_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6f7ec7e67fd4b510, []int{0, 0}
}

// Operation message
type Operation struct {
	// Chain identifier
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// Operation id
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Event ids
	EvtIds []uint64 `protobuf:"varint,3,rep,packed,name=evt_ids,json=evtIds,proto3" json:"evt_ids,omitempty"`
	// Operation status
	Status Operation_Status `protobuf:"varint,4,opt,name=status,proto3,enum=manythings.mitosis.v1beta1.context.Operation_Status" json:"status,omitempty"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7ec7e67fd4b510, []int{0}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func (m *Operation) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Operation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Operation) GetEvtIds() []uint64 {
	if m != nil {
		return m.EvtIds
	}
	return nil
}

func (m *Operation) GetStatus() Operation_Status {
	if m != nil {
		return m.Status
	}
	return Operation_StatusUnspecified
}

func init() {
	proto.RegisterEnum("manythings.mitosis.v1beta1.context.Operation_Status", Operation_Status_name, Operation_Status_value)
	proto.RegisterType((*Operation)(nil), "manythings.mitosis.v1beta1.context.Operation")
}

func init() {
	proto.RegisterFile("mitosis/context/v1beta1/types.proto", fileDescriptor_6f7ec7e67fd4b510)
}

var fileDescriptor_6f7ec7e67fd4b510 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0xd2, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0x07, 0xf0, 0x3a, 0x2d, 0x45, 0xb3, 0x44, 0x97, 0x99, 0x22, 0xaa, 0x1c, 0x22, 0xab, 0x08,
	0x29, 0x07, 0xe6, 0x68, 0xc0, 0x0b, 0x0c, 0xd6, 0x6e, 0x96, 0xa6, 0x50, 0x35, 0xed, 0x65, 0x97,
	0x2a, 0x6d, 0x4c, 0xfa, 0x49, 0xd4, 0x8e, 0x66, 0xaf, 0xda, 0x78, 0x84, 0x9c, 0x78, 0x81, 0xbc,
	0x0f, 0xc7, 0x1d, 0x39, 0x4e, 0xed, 0x63, 0x70, 0x41, 0x8d, 0x43, 0x38, 0x72, 0xb3, 0xad, 0xdf,
	0xe7, 0xcf, 0xfa, 0xfc, 0xc7, 0x6f, 0x36, 0x60, 0x94, 0x06, 0x1d, 0xae, 0x94, 0x34, 0xe2, 0xde,
	0x84, 0xdb, 0xb3, 0xa5, 0x30, 0xc9, 0x59, 0x68, 0x1e, 0x72, 0xa1, 0x59, 0x7e, 0xab, 0x8c, 0x22,
	0xc3, 0x4d, 0x22, 0x1f, 0xcc, 0x1a, 0x64, 0xa6, 0x59, 0xed, 0x59, 0xed, 0x58, 0x5d, 0xe7, 0xf5,
	0x33, 0x95, 0xa9, 0x8a, 0x87, 0x87, 0x95, 0xad, 0x1c, 0xfe, 0x76, 0xf0, 0xd1, 0x97, 0x5c, 0xdc,
	0x26, 0x06, 0x94, 0x24, 0x7d, 0xfc, 0x6c, 0xb5, 0x4e, 0x40, 0x0e, 0x10, 0x45, 0xc1, 0xd1, 0xd4,
	0x6e, 0x48, 0x0f, 0x3b, 0x90, 0x0e, 0x1c, 0x8a, 0x82, 0xce, 0xd4, 0x81, 0x94, 0xbc, 0xc6, 0xcf,
	0xc5, 0xd6, 0x2c, 0x20, 0xd5, 0x83, 0x36, 0x6d, 0x07, 0x9d, 0x69, 0x57, 0x6c, 0x0d, 0x4f, 0x35,
	0xb9, 0xc6, 0x5d, 0x6d, 0x12, 0x73, 0xa7, 0x07, 0x1d, 0x8a, 0x82, 0xde, 0xfb, 0x8f, 0xec, 0xff,
	0xef, 0x62, 0x4d, 0x77, 0x16, 0x57, 0xb5, 0xd3, 0xfa, 0x8e, 0xe1, 0x13, 0xc2, 0x5d, 0x7b, 0x44,
	0x4e, 0x31, 0x89, 0x67, 0xe7, 0xb3, 0x79, 0xbc, 0x98, 0x47, 0xf1, 0x64, 0xf4, 0x99, 0x8f, 0xf9,
	0xe8, 0xc2, 0x6d, 0x79, 0xaf, 0x8a, 0x92, 0x9e, 0x58, 0x33, 0x97, 0x3a, 0x17, 0x2b, 0xf8, 0x0a,
	0x22, 0x25, 0x6f, 0x71, 0xaf, 0xe6, 0x93, 0x51, 0x74, 0xc1, 0xa3, 0x4b, 0x17, 0x79, 0x27, 0x45,
	0x49, 0x5f, 0x58, 0x3a, 0x11, 0x32, 0x05, 0x99, 0x91, 0x00, 0xbb, 0x35, 0xe3, 0x11, 0x9f, 0x2d,
	0x62, 0x7e, 0x19, 0xb9, 0x8e, 0x47, 0x8a, 0x92, 0xf6, 0x2c, 0xe4, 0x12, 0x4c, 0x0c, 0x99, 0x24,
	0xef, 0x9a, 0xfe, 0x63, 0x1e, 0xf1, 0xf8, 0xca, 0xda, 0xb6, 0xd7, 0x2f, 0x4a, 0xea, 0x5a, 0x3b,
	0x06, 0x09, 0x7a, 0x5d, 0xe9, 0x00, 0x1f, 0xff, 0xd3, 0xe7, 0xd7, 0xfc, 0x66, 0xe4, 0x76, 0xbc,
	0x97, 0x45, 0x49, 0x8f, 0x1b, 0x9a, 0x7c, 0x83, 0xef, 0x22, 0xfd, 0x74, 0xf5, 0x73, 0xe7, 0xa3,
	0xc7, 0x9d, 0x8f, 0x9e, 0x76, 0x3e, 0xfa, 0xb1, 0xf7, 0x5b, 0x8f, 0x7b, 0xbf, 0xf5, 0x6b, 0xef,
	0xb7, 0x6e, 0x58, 0x06, 0x66, 0x7d, 0xb7, 0x64, 0x2b, 0xb5, 0x09, 0x0f, 0x43, 0x3c, 0xb5, 0x53,
	0x0c, 0xff, 0xa6, 0xe1, 0xbe, 0xc9, 0x43, 0x95, 0x83, 0x65, 0xb7, 0xfa, 0xce, 0x0f, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x25, 0xe4, 0x39, 0xae, 0x2f, 0x02, 0x00, 0x00,
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EvtIds) > 0 {
		dAtA2 := make([]byte, len(m.EvtIds)*10)
		var j1 int
		for _, num := range m.EvtIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if len(m.EvtIds) > 0 {
		l = 0
		for _, e := range m.EvtIds {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EvtIds = append(m.EvtIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EvtIds) == 0 {
					m.EvtIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EvtIds = append(m.EvtIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EvtIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Operation_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
