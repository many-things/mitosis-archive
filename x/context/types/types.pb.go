// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/context/v1beta1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OperationStatus
type OperationStatus int32

const (
	// Unspecified operation status
	OperationStatus_StatusUnspecified OperationStatus = 0
	// Pending operation status
	OperationStatus_StatusPending OperationStatus = 1
	// Signing operation status
	OperationStatus_StatusSigning OperationStatus = 2
	// Executing operation status
	OperationStatus_StatusExecuting OperationStatus = 3
	// Finalized operation status
	OperationStatus_StatusFinalized OperationStatus = 4
)

var OperationStatus_name = map[int32]string{
	0: "OPERATION_STATUS_UNSPECIFIED",
	1: "OPERATION_STATUS_PENDING",
	2: "OPERATION_STATUS_SIGNING",
	3: "OPERATION_STATUS_EXECUTING",
	4: "OPERATION_STATUS_FINALIZED",
}

var OperationStatus_value = map[string]int32{
	"OPERATION_STATUS_UNSPECIFIED": 0,
	"OPERATION_STATUS_PENDING":     1,
	"OPERATION_STATUS_SIGNING":     2,
	"OPERATION_STATUS_EXECUTING":   3,
	"OPERATION_STATUS_FINALIZED":   4,
}

func (x OperationStatus) String() string {
	return proto.EnumName(OperationStatus_name, int32(x))
}

func (OperationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6f7ec7e67fd4b510, []int{0}
}

// Operation message
type Operation struct {
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7ec7e67fd4b510, []int{0}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("manythings.mitosis.v1beta1.context.OperationStatus", OperationStatus_name, OperationStatus_value)
	proto.RegisterType((*Operation)(nil), "manythings.mitosis.v1beta1.context.Operation")
}

func init() {
	proto.RegisterFile("mitosis/context/v1beta1/types.proto", fileDescriptor_6f7ec7e67fd4b510)
}

var fileDescriptor_6f7ec7e67fd4b510 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd1, 0x4f, 0x4b, 0x3a, 0x41,
	0x1c, 0xc7, 0xf1, 0x5d, 0x7f, 0x3f, 0x82, 0x36, 0xc2, 0x3f, 0x15, 0xc4, 0x12, 0x8b, 0xd8, 0x2d,
	0x68, 0x07, 0xf1, 0xd0, 0xd9, 0x74, 0xb4, 0x81, 0x58, 0x97, 0x76, 0x17, 0xc2, 0x8b, 0xac, 0xeb,
	0x34, 0x0e, 0xe4, 0xcc, 0xe2, 0x7c, 0x0d, 0xed, 0x21, 0x78, 0xea, 0xd4, 0xcd, 0xe7, 0xd3, 0xd1,
	0x63, 0xc7, 0xd0, 0x27, 0x12, 0xeb, 0x6e, 0x22, 0x58, 0xb7, 0x19, 0xf8, 0xbc, 0x2e, 0xdf, 0xb7,
	0x71, 0x39, 0xe2, 0x20, 0x15, 0x57, 0x28, 0x92, 0x02, 0xe8, 0x14, 0xd0, 0x4b, 0xb5, 0x4f, 0x21,
	0xac, 0x22, 0x98, 0xc5, 0x54, 0xd9, 0xf1, 0x58, 0x82, 0x2c, 0x55, 0x46, 0xa1, 0x98, 0xc1, 0x90,
	0x0b, 0xa6, 0xec, 0x6c, 0x6f, 0x67, 0x3b, 0x3b, 0x73, 0xe6, 0x29, 0x93, 0x4c, 0x6e, 0xe6, 0x28,
	0x79, 0xa5, 0xb2, 0x72, 0x64, 0x1c, 0x76, 0x62, 0x3a, 0x0e, 0x81, 0x4b, 0x71, 0xf5, 0x9e, 0x33,
	0xf2, 0xdb, 0x9f, 0x07, 0x21, 0x4c, 0x54, 0xe9, 0xc6, 0xb8, 0xe8, 0xb8, 0xf8, 0xa1, 0xee, 0x93,
	0x8e, 0xd3, 0xf3, 0xfc, 0xba, 0x1f, 0x78, 0xbd, 0xc0, 0xf1, 0x5c, 0xdc, 0x20, 0x2d, 0x82, 0x9b,
	0x05, 0xcd, 0x3c, 0x9b, 0x2f, 0xca, 0xc5, 0x74, 0x1d, 0x08, 0x15, 0xd3, 0x88, 0x3f, 0x71, 0x3a,
	0x28, 0x21, 0xe3, 0x7c, 0x0f, 0xba, 0xd8, 0x69, 0x12, 0xa7, 0x5d, 0xd0, 0xcd, 0xe2, 0x7c, 0x51,
	0x3e, 0x4e, 0x91, 0x4b, 0xc5, 0x80, 0x0b, 0xf6, 0x2b, 0xf0, 0x48, 0xdb, 0x49, 0x40, 0x6e, 0x17,
	0x78, 0x9c, 0x89, 0x04, 0xd4, 0x0c, 0x73, 0x0f, 0xe0, 0x47, 0xdc, 0x08, 0xfc, 0x84, 0xfc, 0x33,
	0x4f, 0xe6, 0x8b, 0x72, 0x3e, 0x25, 0x78, 0x4a, 0xa3, 0x09, 0xfc, 0x85, 0x5a, 0xc4, 0xa9, 0xdf,
	0x93, 0x2e, 0x6e, 0x16, 0xfe, 0xef, 0xa2, 0x16, 0x17, 0xe1, 0x33, 0x7f, 0xa5, 0x83, 0xdb, 0xbb,
	0x8f, 0x95, 0xa5, 0x2f, 0x57, 0x96, 0xfe, 0xb5, 0xb2, 0xf4, 0xb7, 0xb5, 0xa5, 0x2d, 0xd7, 0x96,
	0xf6, 0xb9, 0xb6, 0xb4, 0xae, 0xcd, 0x38, 0x0c, 0x27, 0x7d, 0x3b, 0x92, 0x23, 0x94, 0x44, 0xb8,
	0x4e, 0x2b, 0xa0, 0x9f, 0x6a, 0xd3, 0x6d, 0xb7, 0x4d, 0xaf, 0xfe, 0xc1, 0xe6, 0xec, 0xb5, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0x9e, 0x5f, 0xa1, 0xd7, 0x01, 0x00, 0x00,
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
