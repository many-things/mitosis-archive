// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/context/v1beta1/types_operation.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OperationStatus
type Operation_Status int32

const (
	// Unspecified operation status
	Operation_StatusUnspecified Operation_Status = 0
	// Pending operation status
	Operation_StatusPending Operation_Status = 1
	// Signing operation status
	Operation_StatusInitSign Operation_Status = 2
	// Executing operation status
	Operation_StatusFinishSign Operation_Status = 3
	// Finalized operation status
	Operation_StatusFinalized Operation_Status = 4
)

var Operation_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_PENDING",
	2: "STATUS_INIT_SIGN",
	3: "STATUS_FINISH_SIGN",
	4: "STATUS_FINALIZE",
}

var Operation_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_PENDING":     1,
	"STATUS_INIT_SIGN":   2,
	"STATUS_FINISH_SIGN": 3,
	"STATUS_FINALIZE":    4,
}

func (x Operation_Status) String() string {
	return proto.EnumName(Operation_Status_name, int32(x))
}

func (Operation_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16d3fd8510e89a44, []int{0, 0}
}

// Operation message
type Operation struct {
	// Chain identifier
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// Operation id
	ID uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Event id
	PollID uint64 `protobuf:"varint,3,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	// Operation status
	Status        Operation_Status `protobuf:"varint,4,opt,name=status,proto3,enum=manythings.mitosis.v1beta1.context.Operation_Status" json:"status,omitempty"`
	TxPayload     []byte           `protobuf:"bytes,5,opt,name=tx_payload,json=txPayload,proto3" json:"tx_payload,omitempty"`
	TxBytesToSign []byte           `protobuf:"bytes,6,opt,name=tx_bytes_to_sign,json=txBytesToSign,proto3" json:"tx_bytes_to_sign,omitempty"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d3fd8510e89a44, []int{0}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func (m *Operation) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Operation) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Operation) GetPollID() uint64 {
	if m != nil {
		return m.PollID
	}
	return 0
}

func (m *Operation) GetStatus() Operation_Status {
	if m != nil {
		return m.Status
	}
	return Operation_StatusUnspecified
}

func (m *Operation) GetTxPayload() []byte {
	if m != nil {
		return m.TxPayload
	}
	return nil
}

func (m *Operation) GetTxBytesToSign() []byte {
	if m != nil {
		return m.TxBytesToSign
	}
	return nil
}

func init() {
	proto.RegisterEnum("manythings.mitosis.v1beta1.context.Operation_Status", Operation_Status_name, Operation_Status_value)
	proto.RegisterType((*Operation)(nil), "manythings.mitosis.v1beta1.context.Operation")
}

func init() {
	proto.RegisterFile("mitosis/context/v1beta1/types_operation.proto", fileDescriptor_16d3fd8510e89a44)
}

var fileDescriptor_16d3fd8510e89a44 = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x6e, 0x9b, 0x40,
	0x18, 0x85, 0x3d, 0xb6, 0x43, 0xe5, 0x51, 0xe3, 0x90, 0xa9, 0x5b, 0x21, 0xa4, 0x12, 0xe4, 0xaa,
	0x2a, 0x8b, 0x1a, 0x94, 0xb6, 0x17, 0x88, 0x6b, 0x3b, 0x19, 0x29, 0xa2, 0x96, 0xb1, 0x37, 0xd9,
	0x20, 0x6c, 0x28, 0x1e, 0x09, 0xcf, 0xa0, 0xcc, 0xa4, 0xc2, 0x3d, 0x82, 0x57, 0xbd, 0x00, 0xf7,
	0xe9, 0x32, 0xbb, 0x76, 0x15, 0x45, 0xf8, 0x22, 0x15, 0x0c, 0x71, 0x97, 0xd9, 0xc1, 0xff, 0x7f,
	0xef, 0xcd, 0x93, 0xfe, 0x07, 0x07, 0x1b, 0x22, 0x18, 0x27, 0xdc, 0x59, 0x31, 0x2a, 0xa2, 0x4c,
	0x38, 0x3f, 0xce, 0x97, 0x91, 0x08, 0xce, 0x1d, 0xb1, 0x4d, 0x23, 0xee, 0xb3, 0x34, 0xba, 0x0d,
	0x04, 0x61, 0xd4, 0x4e, 0x6f, 0x99, 0x60, 0xa8, 0xbf, 0x09, 0xe8, 0x56, 0xac, 0x09, 0x8d, 0xb9,
	0x5d, 0x2b, 0xed, 0x5a, 0x61, 0xd7, 0x0e, 0x7a, 0x2f, 0x66, 0x31, 0xab, 0x70, 0xa7, 0xfc, 0x92,
	0xca, 0xfe, 0x9f, 0x16, 0xec, 0x7c, 0x7b, 0x72, 0x43, 0x3d, 0x78, 0xb4, 0x5a, 0x07, 0x84, 0x6a,
	0xc0, 0x04, 0x56, 0x67, 0x26, 0x7f, 0xd0, 0x1b, 0xd8, 0x24, 0xa1, 0xd6, 0x34, 0x81, 0xd5, 0x1e,
	0x2a, 0xc5, 0xc3, 0x59, 0x13, 0x8f, 0x66, 0x4d, 0x12, 0xa2, 0x77, 0xf0, 0x45, 0xca, 0x92, 0xc4,
	0x27, 0xa1, 0xd6, 0xaa, 0x96, 0xb0, 0x78, 0x38, 0x53, 0xa6, 0x2c, 0x49, 0xf0, 0x68, 0xa6, 0x94,
	0x2b, 0x1c, 0xa2, 0x6b, 0xa8, 0x70, 0x11, 0x88, 0x3b, 0xae, 0xb5, 0x4d, 0x60, 0x75, 0x3f, 0x7d,
	0xb1, 0x9f, 0xcf, 0x6a, 0x1f, 0x12, 0xd9, 0x5e, 0xa5, 0x9d, 0xd5, 0x1e, 0xe8, 0x2d, 0x84, 0x22,
	0xf3, 0xd3, 0x60, 0x9b, 0xb0, 0x20, 0xd4, 0x8e, 0x4c, 0x60, 0xbd, 0x9c, 0x75, 0x44, 0x36, 0x95,
	0x03, 0xf4, 0x01, 0xaa, 0x22, 0xf3, 0x97, 0x5b, 0x11, 0x71, 0x5f, 0x30, 0x9f, 0x93, 0x98, 0x6a,
	0x4a, 0x05, 0x1d, 0x8b, 0x6c, 0x58, 0x8e, 0xe7, 0xcc, 0x23, 0x31, 0xed, 0x3f, 0x02, 0xa8, 0x48,
	0x6b, 0x34, 0x80, 0xc8, 0x9b, 0x5f, 0xcc, 0x17, 0x9e, 0xbf, 0x70, 0xbd, 0xe9, 0xf8, 0x2b, 0x9e,
	0xe0, 0xf1, 0x48, 0x6d, 0xe8, 0xaf, 0x77, 0xb9, 0x79, 0x2a, 0x99, 0x05, 0xe5, 0x69, 0xb4, 0x22,
	0xdf, 0x49, 0x14, 0xa2, 0xf7, 0xb0, 0x5b, 0xe3, 0xd3, 0xb1, 0x3b, 0xc2, 0xee, 0xa5, 0x0a, 0xf4,
	0xd3, 0x5d, 0x6e, 0x1e, 0x4b, 0x74, 0x1a, 0xd1, 0x90, 0xd0, 0x18, 0x59, 0x50, 0xad, 0x31, 0xec,
	0xe2, 0xb9, 0xef, 0xe1, 0x4b, 0x57, 0x6d, 0xea, 0x68, 0x97, 0x9b, 0x5d, 0x09, 0x62, 0x4a, 0x44,
	0x19, 0x05, 0x7d, 0x3c, 0xbc, 0x3f, 0xc1, 0x2e, 0xf6, 0xae, 0x24, 0xdb, 0xd2, 0x7b, 0xbb, 0xdc,
	0x54, 0x25, 0x3b, 0x21, 0x94, 0xf0, 0x75, 0x45, 0x5b, 0xf0, 0xe4, 0x3f, 0x7d, 0x71, 0x8d, 0x6f,
	0xc6, 0x6a, 0x5b, 0x7f, 0xb5, 0xcb, 0xcd, 0x93, 0x03, 0x1a, 0x24, 0xe4, 0x67, 0x14, 0x0e, 0xaf,
	0x7e, 0x17, 0x06, 0xb8, 0x2f, 0x0c, 0xf0, 0x58, 0x18, 0xe0, 0xd7, 0xde, 0x68, 0xdc, 0xef, 0x8d,
	0xc6, 0xdf, 0xbd, 0xd1, 0xb8, 0xb1, 0x63, 0x22, 0xd6, 0x77, 0x4b, 0x7b, 0xc5, 0x36, 0x4e, 0x79,
	0x8c, 0x81, 0xbc, 0x86, 0xf3, 0xd4, 0xb9, 0xec, 0xd0, 0xba, 0xaa, 0x6d, 0x4b, 0xa5, 0xaa, 0xca,
	0xe7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x79, 0xc7, 0xed, 0x1b, 0x95, 0x02, 0x00, 0x00,
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxBytesToSign) > 0 {
		i -= len(m.TxBytesToSign)
		copy(dAtA[i:], m.TxBytesToSign)
		i = encodeVarintTypesOperation(dAtA, i, uint64(len(m.TxBytesToSign)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TxPayload) > 0 {
		i -= len(m.TxPayload)
		copy(dAtA[i:], m.TxPayload)
		i = encodeVarintTypesOperation(dAtA, i, uint64(len(m.TxPayload)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintTypesOperation(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.PollID != 0 {
		i = encodeVarintTypesOperation(dAtA, i, uint64(m.PollID))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintTypesOperation(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypesOperation(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypesOperation(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesOperation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypesOperation(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovTypesOperation(uint64(m.ID))
	}
	if m.PollID != 0 {
		n += 1 + sovTypesOperation(uint64(m.PollID))
	}
	if m.Status != 0 {
		n += 1 + sovTypesOperation(uint64(m.Status))
	}
	l = len(m.TxPayload)
	if l > 0 {
		n += 1 + l + sovTypesOperation(uint64(l))
	}
	l = len(m.TxBytesToSign)
	if l > 0 {
		n += 1 + l + sovTypesOperation(uint64(l))
	}
	return n
}

func sovTypesOperation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesOperation(x uint64) (n int) {
	return sovTypesOperation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollID", wireType)
			}
			m.PollID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Operation_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesOperation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxPayload = append(m.TxPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.TxPayload == nil {
				m.TxPayload = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytesToSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesOperation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBytesToSign = append(m.TxBytesToSign[:0], dAtA[iNdEx:postIndex]...)
			if m.TxBytesToSign == nil {
				m.TxBytesToSign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesOperation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesOperation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesOperation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesOperation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesOperation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesOperation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesOperation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesOperation = fmt.Errorf("proto: unexpected end of group")
)
