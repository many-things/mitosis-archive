// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/context/v1beta1/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/many-things/mitosis/pkg/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Event for SignerKeeper.RegisterCosmosSigner and SignerKeeper.RegisterEVMSigner
type EventSignerRegistered struct {
	ChainType types.ChainType `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3,enum=manythings.mitosis.v1beta1.common.ChainType" json:"chain_type,omitempty"`
	Pubkey    []byte          `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *EventSignerRegistered) Reset()         { *m = EventSignerRegistered{} }
func (m *EventSignerRegistered) String() string { return proto.CompactTextString(m) }
func (*EventSignerRegistered) ProtoMessage()    {}
func (*EventSignerRegistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9d017f95def458, []int{0}
}
func (m *EventSignerRegistered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSignerRegistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSignerRegistered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSignerRegistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSignerRegistered.Merge(m, src)
}
func (m *EventSignerRegistered) XXX_Size() int {
	return m.Size()
}
func (m *EventSignerRegistered) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSignerRegistered.DiscardUnknown(m)
}

var xxx_messageInfo_EventSignerRegistered proto.InternalMessageInfo

func (m *EventSignerRegistered) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.ChainType_TypeUnspecified
}

func (m *EventSignerRegistered) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

// Event for OperationKeeper.InitOperation
type EventOperationInitialized struct {
	PollID      uint64 `protobuf:"varint,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	OperationID uint64 `protobuf:"varint,2,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
}

func (m *EventOperationInitialized) Reset()         { *m = EventOperationInitialized{} }
func (m *EventOperationInitialized) String() string { return proto.CompactTextString(m) }
func (*EventOperationInitialized) ProtoMessage()    {}
func (*EventOperationInitialized) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9d017f95def458, []int{1}
}
func (m *EventOperationInitialized) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOperationInitialized) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOperationInitialized.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOperationInitialized) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOperationInitialized.Merge(m, src)
}
func (m *EventOperationInitialized) XXX_Size() int {
	return m.Size()
}
func (m *EventOperationInitialized) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOperationInitialized.DiscardUnknown(m)
}

var xxx_messageInfo_EventOperationInitialized proto.InternalMessageInfo

func (m *EventOperationInitialized) GetPollID() uint64 {
	if m != nil {
		return m.PollID
	}
	return 0
}

func (m *EventOperationInitialized) GetOperationID() uint64 {
	if m != nil {
		return m.OperationID
	}
	return 0
}

// Event for OperationKeeper.StartSignOperation
type EventOperationSigningStarted struct {
	OperationID uint64 `protobuf:"varint,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	SignID      uint64 `protobuf:"varint,2,opt,name=sign_id,json=signId,proto3" json:"sign_id,omitempty"`
	Signer      []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *EventOperationSigningStarted) Reset()         { *m = EventOperationSigningStarted{} }
func (m *EventOperationSigningStarted) String() string { return proto.CompactTextString(m) }
func (*EventOperationSigningStarted) ProtoMessage()    {}
func (*EventOperationSigningStarted) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9d017f95def458, []int{2}
}
func (m *EventOperationSigningStarted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOperationSigningStarted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOperationSigningStarted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOperationSigningStarted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOperationSigningStarted.Merge(m, src)
}
func (m *EventOperationSigningStarted) XXX_Size() int {
	return m.Size()
}
func (m *EventOperationSigningStarted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOperationSigningStarted.DiscardUnknown(m)
}

var xxx_messageInfo_EventOperationSigningStarted proto.InternalMessageInfo

func (m *EventOperationSigningStarted) GetOperationID() uint64 {
	if m != nil {
		return m.OperationID
	}
	return 0
}

func (m *EventOperationSigningStarted) GetSignID() uint64 {
	if m != nil {
		return m.SignID
	}
	return 0
}

func (m *EventOperationSigningStarted) GetSigner() []byte {
	if m != nil {
		return m.Signer
	}
	return nil
}

// Event for OperationKeeper.FinishSignOperation
type EventOperationSigningFinished struct {
	OperationID uint64 `protobuf:"varint,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	SignID      uint64 `protobuf:"varint,2,opt,name=sign_id,json=signId,proto3" json:"sign_id,omitempty"`
	Signer      []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *EventOperationSigningFinished) Reset()         { *m = EventOperationSigningFinished{} }
func (m *EventOperationSigningFinished) String() string { return proto.CompactTextString(m) }
func (*EventOperationSigningFinished) ProtoMessage()    {}
func (*EventOperationSigningFinished) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9d017f95def458, []int{3}
}
func (m *EventOperationSigningFinished) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOperationSigningFinished) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOperationSigningFinished.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOperationSigningFinished) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOperationSigningFinished.Merge(m, src)
}
func (m *EventOperationSigningFinished) XXX_Size() int {
	return m.Size()
}
func (m *EventOperationSigningFinished) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOperationSigningFinished.DiscardUnknown(m)
}

var xxx_messageInfo_EventOperationSigningFinished proto.InternalMessageInfo

func (m *EventOperationSigningFinished) GetOperationID() uint64 {
	if m != nil {
		return m.OperationID
	}
	return 0
}

func (m *EventOperationSigningFinished) GetSignID() uint64 {
	if m != nil {
		return m.SignID
	}
	return 0
}

func (m *EventOperationSigningFinished) GetSigner() []byte {
	if m != nil {
		return m.Signer
	}
	return nil
}

// Event for OperationKeeper.FinishOperation
type EventOperationFinalized struct {
	OperationID uint64 `protobuf:"varint,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	ReqPollID   uint64 `protobuf:"varint,2,opt,name=req_poll_id,json=reqPollId,proto3" json:"req_poll_id,omitempty"`
	RespPollID  uint64 `protobuf:"varint,3,opt,name=resp_poll_id,json=respPollId,proto3" json:"resp_poll_id,omitempty"`
}

func (m *EventOperationFinalized) Reset()         { *m = EventOperationFinalized{} }
func (m *EventOperationFinalized) String() string { return proto.CompactTextString(m) }
func (*EventOperationFinalized) ProtoMessage()    {}
func (*EventOperationFinalized) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9d017f95def458, []int{4}
}
func (m *EventOperationFinalized) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOperationFinalized) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOperationFinalized.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOperationFinalized) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOperationFinalized.Merge(m, src)
}
func (m *EventOperationFinalized) XXX_Size() int {
	return m.Size()
}
func (m *EventOperationFinalized) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOperationFinalized.DiscardUnknown(m)
}

var xxx_messageInfo_EventOperationFinalized proto.InternalMessageInfo

func (m *EventOperationFinalized) GetOperationID() uint64 {
	if m != nil {
		return m.OperationID
	}
	return 0
}

func (m *EventOperationFinalized) GetReqPollID() uint64 {
	if m != nil {
		return m.ReqPollID
	}
	return 0
}

func (m *EventOperationFinalized) GetRespPollID() uint64 {
	if m != nil {
		return m.RespPollID
	}
	return 0
}

func init() {
	proto.RegisterType((*EventSignerRegistered)(nil), "manythings.mitosis.v1beta1.context.EventSignerRegistered")
	proto.RegisterType((*EventOperationInitialized)(nil), "manythings.mitosis.v1beta1.context.EventOperationInitialized")
	proto.RegisterType((*EventOperationSigningStarted)(nil), "manythings.mitosis.v1beta1.context.EventOperationSigningStarted")
	proto.RegisterType((*EventOperationSigningFinished)(nil), "manythings.mitosis.v1beta1.context.EventOperationSigningFinished")
	proto.RegisterType((*EventOperationFinalized)(nil), "manythings.mitosis.v1beta1.context.EventOperationFinalized")
}

func init() {
	proto.RegisterFile("mitosis/context/v1beta1/event.proto", fileDescriptor_1c9d017f95def458)
}

var fileDescriptor_1c9d017f95def458 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb3, 0x2d, 0x0a, 0xca, 0x24, 0x14, 0xc9, 0xe2, 0x23, 0x54, 0xe0, 0x54, 0xee, 0xa5,
	0x07, 0x6a, 0xd3, 0xf2, 0x06, 0xa5, 0x54, 0x58, 0x1c, 0x40, 0x2e, 0x27, 0x2e, 0x91, 0x13, 0x8f,
	0x9c, 0x11, 0xce, 0xae, 0xbb, 0xbb, 0xad, 0x1a, 0xc4, 0x3b, 0xd0, 0x27, 0xe1, 0x39, 0x38, 0xf6,
	0xc8, 0x29, 0x42, 0xce, 0x8b, 0xa0, 0x5d, 0xaf, 0x5d, 0x22, 0x10, 0x48, 0x5c, 0xb8, 0x8d, 0xb5,
	0xff, 0xf9, 0xcf, 0xcf, 0xf3, 0x01, 0xbb, 0x73, 0xd2, 0x42, 0x91, 0x8a, 0xa6, 0x82, 0x6b, 0xbc,
	0xd4, 0xd1, 0xc5, 0xc1, 0x04, 0x75, 0x7a, 0x10, 0xe1, 0x05, 0x72, 0x1d, 0x96, 0x52, 0x68, 0xe1,
	0x05, 0xf3, 0x94, 0x2f, 0xf4, 0x8c, 0x78, 0xae, 0x42, 0xa7, 0x0f, 0x9d, 0x2e, 0x74, 0x79, 0xdb,
	0xf7, 0x72, 0x91, 0x0b, 0x2b, 0x8f, 0x4c, 0x54, 0x67, 0x6e, 0x07, 0x37, 0xf6, 0xf3, 0xb9, 0xe0,
	0xad, 0xbb, 0x5e, 0x94, 0xa8, 0x6a, 0x4d, 0xf0, 0x09, 0xee, 0xbf, 0x34, 0xc5, 0x4e, 0x29, 0xe7,
	0x28, 0x13, 0xcc, 0x49, 0x69, 0x94, 0x98, 0x79, 0xaf, 0x01, 0xa6, 0xb3, 0x94, 0xf8, 0xd8, 0xa8,
	0x87, 0x6c, 0x87, 0xed, 0x6d, 0x1d, 0x3e, 0x0d, 0xff, 0xc8, 0x62, 0x8a, 0x84, 0x2f, 0x4c, 0xd2,
	0xbb, 0x45, 0x89, 0x49, 0x6f, 0xda, 0x84, 0xde, 0x03, 0xe8, 0x96, 0xe7, 0x93, 0x0f, 0xb8, 0x18,
	0x6e, 0xec, 0xb0, 0xbd, 0x41, 0xe2, 0xbe, 0x02, 0x0d, 0x8f, 0x6c, 0xf5, 0x37, 0x25, 0xca, 0x54,
	0x93, 0xe0, 0x31, 0x27, 0x4d, 0x69, 0x41, 0x1f, 0x31, 0xf3, 0x76, 0xe1, 0x76, 0x29, 0x8a, 0x62,
	0x4c, 0x99, 0x2d, 0x7f, 0xeb, 0x08, 0xaa, 0xe5, 0xa8, 0xfb, 0x56, 0x14, 0x45, 0x7c, 0x9c, 0x74,
	0xcd, 0x53, 0x9c, 0x79, 0x87, 0x30, 0x10, 0x4d, 0xb2, 0x51, 0x6e, 0x58, 0xe5, 0xdd, 0x6a, 0x39,
	0xea, 0xdf, 0x98, 0x1e, 0x27, 0xfd, 0x56, 0x14, 0x67, 0xc1, 0x67, 0x06, 0x8f, 0xd7, 0xcb, 0x9a,
	0xbf, 0x27, 0x9e, 0x9f, 0xea, 0x54, 0x6a, 0xfc, 0xd5, 0x94, 0xfd, 0xdd, 0xd4, 0xd0, 0x2a, 0xca,
	0x7f, 0x62, 0xb0, 0xb4, 0xc6, 0xd8, 0xd0, 0x9a, 0xa7, 0x38, 0x33, 0x7d, 0x50, 0xb6, 0xd1, 0xc3,
	0xcd, 0xba, 0x0f, 0xf5, 0x57, 0x70, 0xc5, 0xe0, 0xc9, 0x6f, 0x89, 0x4e, 0x88, 0x93, 0x9a, 0xfd,
	0x0f, 0xa4, 0x2f, 0x0c, 0x1e, 0xae, 0x23, 0x9d, 0x10, 0x77, 0x93, 0xf9, 0x17, 0x98, 0x7d, 0xe8,
	0x4b, 0x3c, 0x1b, 0x37, 0x13, 0xad, 0x81, 0xee, 0x54, 0xcb, 0x51, 0x2f, 0xc1, 0x33, 0x37, 0xd4,
	0x9e, 0x74, 0x61, 0xe6, 0x3d, 0x83, 0x81, 0x44, 0x55, 0xb6, 0xfa, 0x4d, 0xab, 0xdf, 0xaa, 0x96,
	0x23, 0x48, 0x50, 0x95, 0x2e, 0x01, 0x64, 0x13, 0x67, 0x47, 0xaf, 0xbe, 0x56, 0x3e, 0xbb, 0xae,
	0x7c, 0xf6, 0xbd, 0xf2, 0xd9, 0xd5, 0xca, 0xef, 0x5c, 0xaf, 0xfc, 0xce, 0xb7, 0x95, 0xdf, 0x79,
	0x1f, 0xe6, 0xa4, 0x67, 0xe7, 0x13, 0xb3, 0xa1, 0x91, 0x59, 0xe0, 0xfd, 0x7a, 0x83, 0xa3, 0xe6,
	0x3c, 0x2e, 0xdb, 0xfb, 0xb3, 0x97, 0x31, 0xe9, 0xda, 0xd3, 0x78, 0xfe, 0x23, 0x00, 0x00, 0xff,
	0xff, 0x26, 0x9e, 0xe5, 0x0c, 0x9f, 0x03, 0x00, 0x00,
}

func (m *EventSignerRegistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSignerRegistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSignerRegistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventOperationInitialized) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOperationInitialized) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOperationInitialized) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperationID != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.OperationID))
		i--
		dAtA[i] = 0x10
	}
	if m.PollID != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PollID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventOperationSigningStarted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOperationSigningStarted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOperationSigningStarted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SignID != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SignID))
		i--
		dAtA[i] = 0x10
	}
	if m.OperationID != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.OperationID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventOperationSigningFinished) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOperationSigningFinished) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOperationSigningFinished) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SignID != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SignID))
		i--
		dAtA[i] = 0x10
	}
	if m.OperationID != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.OperationID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventOperationFinalized) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOperationFinalized) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOperationFinalized) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RespPollID != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.RespPollID))
		i--
		dAtA[i] = 0x18
	}
	if m.ReqPollID != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ReqPollID))
		i--
		dAtA[i] = 0x10
	}
	if m.OperationID != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.OperationID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSignerRegistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovEvent(uint64(m.ChainType))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventOperationInitialized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PollID != 0 {
		n += 1 + sovEvent(uint64(m.PollID))
	}
	if m.OperationID != 0 {
		n += 1 + sovEvent(uint64(m.OperationID))
	}
	return n
}

func (m *EventOperationSigningStarted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperationID != 0 {
		n += 1 + sovEvent(uint64(m.OperationID))
	}
	if m.SignID != 0 {
		n += 1 + sovEvent(uint64(m.SignID))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventOperationSigningFinished) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperationID != 0 {
		n += 1 + sovEvent(uint64(m.OperationID))
	}
	if m.SignID != 0 {
		n += 1 + sovEvent(uint64(m.SignID))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventOperationFinalized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperationID != 0 {
		n += 1 + sovEvent(uint64(m.OperationID))
	}
	if m.ReqPollID != 0 {
		n += 1 + sovEvent(uint64(m.ReqPollID))
	}
	if m.RespPollID != 0 {
		n += 1 + sovEvent(uint64(m.RespPollID))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSignerRegistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSignerRegistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSignerRegistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOperationInitialized) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOperationInitialized: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOperationInitialized: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollID", wireType)
			}
			m.PollID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationID", wireType)
			}
			m.OperationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOperationSigningStarted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOperationSigningStarted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOperationSigningStarted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationID", wireType)
			}
			m.OperationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignID", wireType)
			}
			m.SignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOperationSigningFinished) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOperationSigningFinished: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOperationSigningFinished: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationID", wireType)
			}
			m.OperationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignID", wireType)
			}
			m.SignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOperationFinalized) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOperationFinalized: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOperationFinalized: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationID", wireType)
			}
			m.OperationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqPollID", wireType)
			}
			m.ReqPollID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqPollID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespPollID", wireType)
			}
			m.RespPollID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RespPollID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
