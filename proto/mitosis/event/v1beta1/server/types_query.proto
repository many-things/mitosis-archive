syntax = "proto3";

package manythings.mitosis.v1beta1.event.server;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "mitosis/event/v1beta1/params.proto";
import "mitosis/event/v1beta1/types.proto";

option go_package = "github.com/many-things/mitosis/x/event/server";

// QueryParams is request type for the Query/Params RPC method.
message QueryParams {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// Query single poll request
message QueryPoll {
  string chain = 1;
  uint64 id = 2;
}

// Response of [QueryPoll]
message QueryPollResponse {
  Poll poll = 1;
}

// Query list of polls request
message QueryPolls {
  string chain = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// Response of [QueryPolls]
message QueryPollsResponse {
  repeated Poll polls = 1;
  cosmos.base.query.v1beta1.PageResponse page = 2;
}

// Query single proxy account
message QueryProxy {
  bytes validator = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress"];
}

// Response of [QueryProxy]
message QueryProxyResponse {
  bytes validator = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress"];
  bytes proxy_account = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// Query list of proxy accounts
message QueryProxies {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// Response of [QueryProxies]
message QueryProxiesResponse {
  repeated QueryProxyResponse proxies = 1;
  cosmos.base.query.v1beta1.PageResponse page = 2;
}

// Query single chain info
message QueryChain {
  string chain = 1;
  string network_id = 2;
}

// Response of [QueryChain]
message QueryChainResponse {
  string chain = 1;
  string network_id = 2;
  bytes chain_prefix = 3;
}

// Query list of chain info
message QueryChains {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// Response of [QueryChains]
message QueryChainsResponse {
  repeated QueryChainResponse chains = 1;
  cosmos.base.query.v1beta1.PageResponse page = 2;
}
